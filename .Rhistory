library(opImputation)
seed = 100
nIter = 20
nProc = nProc <- round( ( parallel::detectCores( ) )  ) - 2
probMissing = 0.1
PValueThresholdForMetrics = 0.1
ImputationRepetitions = 20
Data = iris[,1:4]
PlotIt = TRUE
pfctMtdsInABC = FALSE
overallBestzDelta = FALSE
univariate_imputation_methods <- c( "median", "mean", "mode", "rSample" )
poisoned_imputation_methods <- c( "plus", "plusminus", "factor" )
calibrating_imputation_methods <- c("tinyNoise_0.000001", "tinyNoise_0.00001", "tinyNoise_0.0001", "tinyNoise_0.001", "tinyNoise_0.01",
"tinyNoise_0.05", "tinyNoise_0.1", "tinyNoise_0.2", "tinyNoise_0.5", "tinyNoise_1")
multivariate_imputation_methods <- c( "bag", "bag_repeated",
"rf_mice", "rf_mice_repeated", "rf_missForest", "rf_missForest_repeated", "miceRanger", "miceRanger_repeated",
"cart", "cart_repeated",
"linear",
"pmm", "pmm_repeated",
"knn3", "knn5", "knn7", "knn9", "knn10",
"ameliaImp", "ameliaImp_repeated",
"miImp"
)
all_imputation_methods <- c( univariate_imputation_methods,
poisoned_imputation_methods,
calibrating_imputation_methods,
multivariate_imputation_methods
)
ImputationMethods =all_imputation_methods
radius <- 5
totalNr <- 100
nVars <- 3
dfXmatrix <- NULL
jitterAmount <- 0.3
# "Two linear xy data sets forming an X" =
set.seed( seed )
x <- jitter( seq( from = 0, to = 10, length.out = totalNr ), amount = jitterAmount )
set.seed( seed + 1 )
y1 <- jitter( 1 * x, amount = jitterAmount )
set.seed( seed + 2 )
y2 <- jitter( -1 * x + 10, amount = jitterAmount )
dfXmatrixTwolinearXY <- cbind.data.frame( Var1 = x, Var2 = y1, Var3 = y2 )
# "UniformRandom3VarIndependent"
set.seed( seed )
x <- runif( totalNr, min = 0, max = 10 )
set.seed( seed + 1 )
y1 <- runif( totalNr, min = 0, max = 10 )
set.seed( seed + 2 )
y2 <- runif( totalNr, min = 0, max = 10 )
dfXmatrixIndependent <- cbind.data.frame( Var1 = x, Var2 = y1, Var3 = y2 )
# "UniformRandom3VarDependent" = {
set.seed( seed )
x <- runif( totalNr, min = 0, max = 10 )
set.seed( seed )
y1 <- runif( totalNr, min = 0, max = 10 )
set.seed( seed )
y2 <- runif( totalNr, min = 0, max = 10 )
dfXmatrixDependent <- cbind.data.frame( Var1 = x, Var2 = y1, Var3 = y2 )
# "AlmostIdenticalValues" = {
set.seed( seed )
x <- jitter(rep(1, totalNr), amount = 0.0001 * 1)
set.seed( seed + 1 )
y1 <- jitter(rep(1, totalNr), amount = 0.0001 * 1)
set.seed( seed +2 )
y2 <- jitter(rep(1, totalNr), amount = 0.0001 * 1)
dfXmatrixIdent <- cbind.data.frame( Var1 = x, Var2 = y1, Var3 = y2 )
TestImputationHepta <- opImputationAnalyze(Data = data.frame(FCPS::Hepta$Data),
ImputationMethods =  all_imputation_methods, nProc = nProc, overallBestzDelta = TRUE)
pic <- TestImputationHepta$FigABC
save(pic, file = "TestImputationHepta_FigABC.rdata")
TestImputationTwolinearXY <- opImputationAnalyze(Data = dfXmatrixTwolinearXY,
ImputationMethods =  all_imputation_methods, nProc = nProc)
library(opImputation)
seed = 100
nIter = 20
nProc = nProc <- round( ( parallel::detectCores( ) )  ) - 2
probMissing = 0.1
PValueThresholdForMetrics = 0.1
ImputationRepetitions = 20
Data = iris[,1:4]
PlotIt = TRUE
pfctMtdsInABC = FALSE
overallBestzDelta = FALSE
univariate_imputation_methods <- c( "median", "mean", "mode", "rSample" )
poisoned_imputation_methods <- c( "plus", "plusminus", "factor" )
calibrating_imputation_methods <- c("tinyNoise_0.000001", "tinyNoise_0.00001", "tinyNoise_0.0001", "tinyNoise_0.001", "tinyNoise_0.01",
"tinyNoise_0.05", "tinyNoise_0.1", "tinyNoise_0.2", "tinyNoise_0.5", "tinyNoise_1")
multivariate_imputation_methods <- c( "bag", "bag_repeated",
"rf_mice", "rf_mice_repeated", "rf_missForest", "rf_missForest_repeated", "miceRanger", "miceRanger_repeated",
"cart", "cart_repeated",
"linear",
"pmm", "pmm_repeated",
"knn3", "knn5", "knn7", "knn9", "knn10",
"ameliaImp", "ameliaImp_repeated",
"miImp"
)
all_imputation_methods <- c( univariate_imputation_methods,
poisoned_imputation_methods,
calibrating_imputation_methods,
multivariate_imputation_methods
)
ImputationMethods =all_imputation_methods
radius <- 5
totalNr <- 100
nVars <- 3
dfXmatrix <- NULL
jitterAmount <- 0.3
# "Two linear xy data sets forming an X" =
set.seed( seed )
x <- jitter( seq( from = 0, to = 10, length.out = totalNr ), amount = jitterAmount )
set.seed( seed + 1 )
y1 <- jitter( 1 * x, amount = jitterAmount )
set.seed( seed + 2 )
y2 <- jitter( -1 * x + 10, amount = jitterAmount )
dfXmatrixTwolinearXY <- cbind.data.frame( Var1 = x, Var2 = y1, Var3 = y2 )
# "UniformRandom3VarIndependent"
set.seed( seed )
x <- runif( totalNr, min = 0, max = 10 )
set.seed( seed + 1 )
y1 <- runif( totalNr, min = 0, max = 10 )
set.seed( seed + 2 )
y2 <- runif( totalNr, min = 0, max = 10 )
dfXmatrixIndependent <- cbind.data.frame( Var1 = x, Var2 = y1, Var3 = y2 )
# "UniformRandom3VarDependent" = {
set.seed( seed )
x <- runif( totalNr, min = 0, max = 10 )
set.seed( seed )
y1 <- runif( totalNr, min = 0, max = 10 )
set.seed( seed )
y2 <- runif( totalNr, min = 0, max = 10 )
dfXmatrixDependent <- cbind.data.frame( Var1 = x, Var2 = y1, Var3 = y2 )
# "AlmostIdenticalValues" = {
set.seed( seed )
x <- jitter(rep(1, totalNr), amount = 0.0001 * 1)
set.seed( seed + 1 )
y1 <- jitter(rep(1, totalNr), amount = 0.0001 * 1)
set.seed( seed +2 )
y2 <- jitter(rep(1, totalNr), amount = 0.0001 * 1)
dfXmatrixIdent <- cbind.data.frame( Var1 = x, Var2 = y1, Var3 = y2 )
TestImputationIris <- opImputationAnalyze(Data = iris[,1:4], nProc = nProc)
TestImputationHepta <- opImputationAnalyze(Data = data.frame(FCPS::Hepta$Data),
ImputationMethods =  all_imputation_methods, nProc = nProc, overallBestzDelta = TRUE)
pic <- TestImputationHepta$FigABC
save(pic, file = "TestImputationHepta_FigABC.rdata")
TestImputationTwolinearXY <- opImputationAnalyze(Data = dfXmatrixTwolinearXY,
ImputationMethods =  all_imputation_methods, nProc = nProc)
TestImputationRandomIndependent <- opImputationAnalyze(Data = dfXmatrixIndependent,
ImputationMethods =  all_imputation_methods, nProc = nProc, overallBestzDelta = TRUE)
all_imputation_methods
library(opImputation)
library(opImputation)
TestImputation <- opImputationAnalyze(Data = iris[,1:4],
ImputationMethods =  c("rf_missForest" ) )
TestImputation <- opImputationAnalyze(Data = iris[,1:4],
ImputationMethods =  c("rf_missForest" ) )
all_imputation_methods
library(opImputation)
library(opImputation)
TestImputation <- opImputationAnalyze(Data = iris[,1:4],
ImputationMethods =  c("rf_missForest" ) )
all_imputation_methods
as.vector(all_imputation_methods)
ulist(all_imputation_methods)
unlist(all_imputation_methods)
paset(all_imputation_methods, sep = ” “, collapse )
paset(all_imputation_methods, sep = "", collapse )
paste(all_imputation_methods, sep = "", collapse )
paste(all_imputation_methods, collapse = ", ")
paste0( "opImputation: This is a comparative analysis. The number of 'ImputationMethods' must be > 1. Select at least two from:\n",
paste(all_imputation_methods, collapse = ", ") "\n. Execution stopped." )
paste0( "opImputation: This is a comparative analysis. The number of 'ImputationMethods' must be > 1. Select at least two from:\n",
paste(all_imputation_methods, collapse = ", "), "\n. Execution stopped." )
paste0( "opImputation: This is a comparative analysis. The number of 'ImputationMethods' must be > 1. Select at least two from: ",
paste(all_imputation_methods, collapse = ", "), ". Execution stopped." )
paste0( "opImputation: This is a comparative analysis. The number of 'ImputationMethods' must be > 1. Select at least two from: ",
paste(sort(all_imputation_methods), collapse = ", "), ". Execution stopped." )
library(opImputation)
TestImputation <- opImputationAnalyze(Data = iris[,1:4],
ImputationMethods =  c("rf_missForest" ) )
library(opImputation)
TestImputation <- opImputationAnalyze(Data = iris[,1:4],
ImputationMethods =  c("rf_missForest" ) )
library(opImputation)
TestImputation <- opImputationAnalyze(Data = iris[,1:4],
ImputationMethods =  c("rf_missForest" ) )
TestImputationIris <- opImputationAnalyze(Data = iris[,1:4], nProc = nProc)
seq(list.of.seeds)
seq_along(list.of.seeds)
seq(list.of.seeds)
library(opImputation)
opImputationImpute(Data = iris[1,4], seed = 1, ImputationMethod = "rf_missForest", nIter = 10, nProc = nProc)
nIter
ImputationMethod = "rf_missForest"
seed
Data = iris[1,4]
list.of.seeds <- 1:nIter + seed - 1
list.of.seeds
iImputedData <- pbmcapply::pbmclapply( list.of.seeds, function( seed ) {
imputeMissings( x = Data, method = ImputationMethod, ImputationRepetitions = ImputationRepetitions, seed = seed, x_orig = NULL )
}, mc.cores = nProc )
iImputedData
# Collection of implemented imputation methods
# Helper functions
imputeMedian <- function( x ) {
x <- as.numeric( as.character( x ) )
x[is.na( x )] <- median( x, na.rm = TRUE )
return( x )
}
imputeMean <- function( x ) {
x <- as.numeric( as.character( x ) )
x[is.na( x )] <- mean( x, na.rm = TRUE )
return( x )
}
getMode <- function( v ) {
v <- na.omit( v )
uniqv <- unique( v )
mode <- uniqv[which.max( tabulate( match( v, uniqv ) ) )]
return( mode )
}
imputeMode <- function( x ) {
x <- as.numeric( as.character( x ) )
x[is.na( x )] <- getMode( x )
return( x )
}
imputeRandom <- function( x ) {
x <- as.numeric( as.character( x ) )
x[is.na( x )] <- sample( na.omit( x ), replace = TRUE )
return( x )
}
makeBadImputations <- function( x ) {
x[!is.na( x )] <- NA
return( data.frame( x ) )
}
medianNotZero <- function( x ) {
med <- median( abs( x ), na.rm = TRUE )
m <- ifelse( med != 0, med, 1 )
return( m )
}
median_imputations <- function( x ) {
all.matrix <- array( unlist( x ), dim = c( dim( x[[1]] )[1], dim( x[[1]] )[2], length( x ) ) )
avg <- data.frame( apply( all.matrix, c( 1, 2 ), function( x ) median( x, na.rm = TRUE ) ) )
names( avg ) <- colnames( x[[1]] )
rownames( avg ) <- rownames( x[[1]] )
return( avg )
}
# Main imputation method selection
imputeMissings <- function( x, method = "rf_missForest", ImputationRepetitions = 10, seed = NULL, x_orig = NULL ) {
x <- data.frame( x )
if ( is.null( seed ) ) {
seed <- .Random.seed[1]
}
list.of.seeds <- seq_len( ncol( x ) ) + seed - 1
set.seed( seed )
ImputedData <- makeBadImputations( x )
switch(
method,
median = ImputedData <- apply( x, 2, imputeMedian ),
mean = ImputedData <- apply( x, 2, imputeMean ),
mode = ImputedData <- apply( x, 2, imputeMode ),
rSample = ImputedData <- apply( x, 2, imputeRandom ),
bag = {
set.seed( seed )
Impu <- try( suppressWarnings( caret::preProcess( x, method = "bagImpute" ) ), TRUE )
if ( !inherits( Impu, "try-error" ) ) {
ImputedData <- predict( Impu, x )
}
},
bag_repeated = {
iImputedData <- lapply( list.of.seeds, function( s ) {
set.seed( s )
Impu <- try( suppressWarnings( caret::preProcess( x, method = "bagImpute" ) ), TRUE )
if ( !inherits( Impu, "try-error" ) ) {
ImputedData <- predict( Impu, x )
}
return( ImputedData = ImputedData )
} )
ImputedData <- tryCatch( median_imputations( iImputedData ), error = function( e ) NULL )
},
rf_mice = {
set.seed( seed )
Impu <- try( suppressWarnings( mice::mice( x, method = "rf", print = FALSE ) ), TRUE )
if ( !inherits( Impu, "try-error" ) ) {
ImputedData <- mice::complete( Impu )
}
},
rf_mice_repeated = {
iImputedData <- lapply( list.of.seeds, function( s ) {
set.seed( s )
Impu <- try( suppressWarnings( mice::mice( x, method = "rf", print = FALSE ) ), TRUE )
if ( !inherits( Impu, "try-error" ) ) {
ImputedData <- mice::complete( Impu )
}
return( ImputedData = ImputedData )
} )
ImputedData <- tryCatch( median_imputations( iImputedData ), error = function( e ) NULL )
},
rf_missForest = {
set.seed( seed )
Impu <- try( suppressWarnings( missForest::missForest( x ) ), TRUE )
if ( !inherits( Impu, "try-error" ) ) {
ImputedData <- Impu$ximp
}
},
rf_missForest_repeated = {
iImputedData <- lapply( list.of.seeds, function( s ) {
set.seed( s )
Impu <- try( suppressWarnings( missForest::missForest( x ) ), TRUE )
if ( !inherits( Impu, "try-error" ) ) {
ImputedData <- Impu$ximp
}
return( ImputedData = ImputedData )
} )
ImputedData <- tryCatch( median_imputations( iImputedData ), error = function( e ) NULL )
},
miceRanger = {
set.seed( seed )
miceObj <- suppressWarnings( miceRanger::miceRanger( x, 1, 1, returnModels = TRUE, verbose = FALSE ) )
Impu <- try( suppressWarnings( miceRanger::impute( x, miceObj, verbose = FALSE ) ), TRUE )
if ( !inherits( Impu, "try-error" ) ) {
ImputedData <- data.frame( Impu$imputedData[[1]] )
}
},
miceRanger_repeated = {
iImputedData <- lapply( list.of.seeds, function( s ) {
set.seed( s )
miceObj <- suppressWarnings( miceRanger::miceRanger( x, 1, 1, returnModels = TRUE, verbose = FALSE ) )
Impu <- try( suppressWarnings( miceRanger::impute( x, miceObj, verbose = FALSE ) ), TRUE )
if ( !inherits( Impu, "try-error" ) ) {
ImputedData <- data.frame( Impu$imputedData[[1]] )
}
return( ImputedData = ImputedData )
} )
ImputedData <- tryCatch( median_imputations( iImputedData ), error = function( e ) NULL )
},
cart = {
set.seed( seed )
Impu <- try( suppressWarnings( mice::mice( x, method = "cart", print = FALSE ) ), TRUE )
if ( !inherits( Impu, "try-error" ) ) {
ImputedData <- mice::complete( Impu )
}
},
cart_repeated = {
iImputedData <- lapply( list.of.seeds, function( s ) {
set.seed( s )
Impu <- try( suppressWarnings( mice::mice( x, method = "cart", print = FALSE ) ), TRUE )
if ( !inherits( Impu, "try-error" ) ) {
ImputedData <- mice::complete( Impu )
}
return( ImputedData = ImputedData )
} )
ImputedData <- tryCatch( median_imputations( iImputedData ), error = function( e ) NULL )
},
linear = {
set.seed( seed )
Impu <- try( suppressWarnings( mice::mice( x, method = "lasso.norm", print = FALSE ) ), TRUE )
if ( !inherits( Impu, "try-error" ) ) {
ImputedData <- mice::complete( Impu )
}
},
pmm = {
set.seed( seed )
Impu <- try( suppressWarnings( mice::mice( x, method = "pmm", printFlag = FALSE ) ), TRUE )
if ( !inherits( Impu, "try-error" ) ) {
ImputedData <- mice::complete( Impu )
}
},
pmm_repeated = {
iImputedData <- lapply( list.of.seeds, function( s ) {
set.seed( s )
Impu <- try( suppressWarnings( mice::mice( x, method = "pmm", printFlag = FALSE ) ), TRUE )
if ( !inherits( Impu, "try-error" ) ) {
ImputedData <- mice::complete( Impu )
}
return( ImputedData = ImputedData )
} )
ImputedData <- tryCatch( median_imputations( iImputedData ), error = function( e ) NULL )
},
knn3 = {
Impu <- try( multiUS::KNNimp( x, k = 3 ), TRUE )
if ( !inherits( Impu, "try-error" ) ) {
ImputedData <- Impu
}
},
knn5 = {
Impu <- try( multiUS::KNNimp( x, k = 5 ), TRUE )
if ( !inherits( Impu, "try-error" ) ) {
ImputedData <- Impu
}
},
knn7 = {
Impu <- try( multiUS::KNNimp( x, k = 7 ), TRUE )
if ( !inherits( Impu, "try-error" ) ) {
ImputedData <- Impu
}
},
knn9 = {
Impu <- try( multiUS::KNNimp( x, k = 9 ), TRUE )
if ( !inherits( Impu, "try-error" ) ) {
ImputedData <- Impu
}
},
knn10 = {
Impu <- try( multiUS::KNNimp( x ), TRUE )
if ( !inherits( Impu, "try-error" ) ) {
ImputedData <- Impu
} else {
ImputedData <- makeBadImputations( x )
}
},
ameliaImp = {
set.seed( seed )
Impu <- try( eval_with_timeout( suppressWarnings( Amelia::amelia.default( x ) ), timeout = 30 ), TRUE )
if ( !inherits( Impu, "try-error" ) ) {
ImputedData <- Impu$imputations[[1]]
}
},
ameliaImp_repeated = {
set.seed( seed )
Impu <- try( eval_with_timeout( suppressWarnings( Amelia::amelia.default( x, m = ImputationRepetitions ) ), timeout = 30 ), TRUE )
if ( !inherits( Impu, "try-error" ) ) {
iImputedData <- Impu$imputations
ImputedData <- tryCatch( median_imputations( iImputedData ), error = function( e ) NULL )
}
},
miImp = {
set.seed( seed )
Impu <- try( suppressWarnings( mi::mi( x, verbose = FALSE, parallel = FALSE ) ), TRUE )
if ( !inherits( Impu, "try-error" ) ) {
iImputedData <- mi::complete( Impu )
iImputedDataI <- lapply( iImputedData, function( y ) y[, names( x )] )
ImputedData <- tryCatch( median_imputations( iImputedDataI ), error = function( e ) NULL )
}
},
# from here, noise and nonsense imputations for use in the experiments
plusminus = {
fac <- seq_len( nrow( x_orig ) )
ImputedData <- apply( x_orig, 2, function( x ) x + ( -1 )^fac * 0.11 * medianNotZero( x ) )
},
plus = {
ImputedData <- apply( x_orig, 2, function( x ) x + 1 * 0.1 * medianNotZero( x ) )
},
factor = {
ImputedData <- apply( x_orig, 2, function( x ) x * ( 1 + 0.03 * medianNotZero( x ) ) )
},
tinyNoise_0.000001 = {
set.seed( seed )
ImputedData <- apply( x_orig, 2, function( x ) jitter( x, amount = .000001 * medianNotZero( x ) ) )
},
tinyNoise_0.00001 = {
set.seed( seed )
ImputedData <- apply( x_orig, 2, function( x ) jitter( x, amount = .00001 * medianNotZero( x ) ) )
},
tinyNoise_0.0001 = {
set.seed( seed )
ImputedData <- apply( x_orig, 2, function( x ) jitter( x, amount = .0001 * medianNotZero( x ) ) )
},
tinyNoise_0.001 = {
set.seed( seed )
ImputedData <- apply( x_orig, 2, function( x ) jitter( x, amount = .001 * medianNotZero( x ) ) )
},
tinyNoise_0.01 = {
set.seed( seed )
ImputedData <- apply( x_orig, 2, function( x ) jitter( x, amount = .01 * medianNotZero( x ) ) )
},
tinyNoise_0.05 = {
set.seed( seed )
ImputedData <- apply( x_orig, 2, function( x ) jitter( x, amount = .05 * medianNotZero( x ) ) )
},
tinyNoise_0.1 = {
set.seed( seed )
ImputedData <- apply( x_orig, 2, function( x ) jitter( x, amount = .1 * medianNotZero( x ) ) )
},
tinyNoise_0.2 = {
set.seed( seed )
ImputedData <- apply( x_orig, 2, function( x ) jitter( x, amount = .2 * medianNotZero( x ) ) )
},
tinyNoise_0.5 = {
set.seed( seed )
ImputedData <- apply( x_orig, 2, function( x ) jitter( x, amount = .5 * medianNotZero( x ) ) )
},
tinyNoise_1 = {
set.seed( seed )
ImputedData <- apply( x_orig, 2, function( x ) jitter( x, amount = 1 * medianNotZero( x ) ) )
}
)
# final error intercepting, if necessary
if ( !method %in% poisoned_imputation_methods ) {
err <- try( ImputedData - x, TRUE )
if ( inherits( err, "try-error" ) | sum( is.na( ImputedData ) ) > 0 ) {
ImputedData <- makeBadImputations( x )
}
}
names( ImputedData ) <- names( x )
return( ImputedData )
}
iImputedData <- pbmcapply::pbmclapply( list.of.seeds, function( seed ) {
imputeMissings( x = Data, method = ImputationMethod, ImputationRepetitions = ImputationRepetitions, seed = seed, x_orig = NULL )
}, mc.cores = nProc )
iImputedData
Data
opImputationImpute(Data = iris[,1:4], seed = 1, ImputationMethod = "rf_missForest", nIter = 10, nProc = nProc)
ImputationMethod
substr(ImputationMethod, "repeated")
grep(ImputationMethod, "repeated")
grep(ImputationMethod, "mis")
grep("mis", ImputationMethod)
grep("miss", ImputationMethod)
grep("aamiss", ImputationMethod)
(grep("aamiss", ImputationMethod) > 0)
length(grep("aamiss", ImputationMethod) )
length(grep("miss", ImputationMethod) )
