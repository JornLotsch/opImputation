retrieveZdeltas <- function( RepeatedSampleImputations ) {
ImputationZDeltaInsertedMissings <- lapply( RepeatedSampleImputations, function( x ) {
x[["ImputationZDeltaInsertedMissings"]]
} )
meanImputationZDeltaInsertedMissings <- Reduce( "+", ImputationZDeltaInsertedMissings ) / length( ImputationZDeltaInsertedMissings )
rowmeanImputationZDeltaInsertedMissings <- rowMeans( meanImputationZDeltaInsertedMissings )
ImputationZDeltaInsertedMissingsMultivar <-
lapply( ImputationZDeltaInsertedMissings,
function( x ) x[grep( paste( as.character( c( setdiff( all_imputation_methods,
c( scalar_imputation_methods, nonsense_imputation_methods ) ) ) ), sep = "' '", collapse = "|" ), row.names( x ) ),] )
ImputationZDeltaInsertedMissingsMultivarV <- unlist( ImputationZDeltaInsertedMissingsMultivar )
skewnessGMZDeltaInsertedMissingsMultivarV <- skewnessGM( ImputationZDeltaInsertedMissingsMultivarV )
ImputationZDeltaInsertedMissingsUnivar <-
lapply( ImputationZDeltaInsertedMissings,
function( x ) x[grep( paste( as.character( scalar_imputation_methods ), sep = "' '", collapse = "|" ), row.names( x ) ),] )
ImputationZDeltaInsertedMissingsUnivarV <- unlist( ImputationZDeltaInsertedMissingsUnivar )
skewnessGMZDeltaInsertedMissingsUnivarV <- skewnessGM( ImputationZDeltaInsertedMissingsUnivarV )
ImputationZDeltaInsertedMissingsNonsense <-
lapply( ImputationZDeltaInsertedMissings,
function( x ) x[grep( paste( as.character( nonsense_imputation_methods ), sep = "' '", collapse = "|" ), row.names( x ) ),] )
ImputationZDeltaInsertedMissingsNonsenseV <- unlist( ImputationZDeltaInsertedMissingsNonsense )
skewnessGMZDeltaInsertedMissingsNonsenseV <- skewnessGM( ImputationZDeltaInsertedMissingsNonsenseV )
return( list(
ImputationZDeltaInsertedMissingsMultivarV = ImputationZDeltaInsertedMissingsMultivarV,
ImputationZDeltaInsertedMissingsUnivarV = ImputationZDeltaInsertedMissingsUnivarV,
ImputationZDeltaInsertedMissingsNonsenseV = ImputationZDeltaInsertedMissingsNonsenseV,
skewnessGMZDeltaInsertedMissingsMultivarV = skewnessGMZDeltaInsertedMissingsMultivarV,
skewnessGMZDeltaInsertedMissingsUnivarV = skewnessGMZDeltaInsertedMissingsUnivarV,
skewnessGMZDeltaInsertedMissingsNonsenseV = skewnessGMZDeltaInsertedMissingsNonsenseV
) )
}
rowmeanImputationZDeltaInsertedMissings
# Function to retrieve Zdelta values from iterations
retrieveZdeltas <- function(RepeatedSampleImputations) {
ImputationZDeltaInsertedMissings <- lapply(RepeatedSampleImputations, function(x) x[["ImputationZDeltaInsertedMissings"]])
meanImputationZDeltaInsertedMissings <- Reduce("+", ImputationZDeltaInsertedMissings) / length(ImputationZDeltaInsertedMissings)
rowmeanImputationZDeltaInsertedMissings <- rowMeans(meanImputationZDeltaInsertedMissings)
ImputationZDeltaInsertedMissingsMultivarV <- unlist(getImputationZDeltaSubset(ImputationZDeltaInsertedMissings, setdiff(all_imputation_methods, c(scalar_imputation_methods, nonsense_imputation_methods))))
skewnessGMZDeltaInsertedMissingsMultivarV <- skewnessGM(ImputationZDeltaInsertedMissingsMultivarV)
ImputationZDeltaInsertedMissingsUnivarV <- unlist(getImputationZDeltaSubset(ImputationZDeltaInsertedMissings, scalar_imputation_methods))
skewnessGMZDeltaInsertedMissingsUnivarV <- skewnessGM(ImputationZDeltaInsertedMissingsUnivarV)
ImputationZDeltaInsertedMissingsNonsenseV <- unlist(getImputationZDeltaSubset(ImputationZDeltaInsertedMissings, nonsense_imputation_methods))
skewnessGMZDeltaInsertedMissingsNonsenseV <- skewnessGM(ImputationZDeltaInsertedMissingsNonsenseV)
return(list(
rowmeanImputationZDeltaInsertedMissings = rowmeanImputationZDeltaInsertedMissings,
ImputationZDeltaInsertedMissingsMultivarV = ImputationZDeltaInsertedMissingsMultivarV,
ImputationZDeltaInsertedMissingsUnivarV = ImputationZDeltaInsertedMissingsUnivarV,
ImputationZDeltaInsertedMissingsNonsenseV = ImputationZDeltaInsertedMissingsNonsenseV,
skewnessGMZDeltaInsertedMissingsMultivarV = skewnessGMZDeltaInsertedMissingsMultivarV,
skewnessGMZDeltaInsertedMissingsUnivarV = skewnessGMZDeltaInsertedMissingsUnivarV,
skewnessGMZDeltaInsertedMissingsNonsenseV = skewnessGMZDeltaInsertedMissingsNonsenseV
))
}
dfXmatrixall_forPlot
ImputationZDeltaInsertedMissings <- lapply(RepeatedSampleImputations, function(x) x[["ImputationZDeltaInsertedMissings"]])
meanImputationZDeltaInsertedMissings <- Reduce("+", ImputationZDeltaInsertedMissings) / length(ImputationZDeltaInsertedMissings)
rowmeanImputationZDeltaInsertedMissings <- rowMeans(meanImputationZDeltaInsertedMissings)
ImputationZDeltaInsertedMissingsMultivarV <- unlist(getImputationZDeltaSubset(ImputationZDeltaInsertedMissings, setdiff(all_imputation_methods, c(scalar_imputation_methods, nonsense_imputation_methods))))
#################################### Functions ########################################################################
# Calulate Groeneveld - Meeden skewness
skewnessGM <- function(x) {
x <- na.omit(x)
n <- length(x)
meanX <- mean(x, na.rm = TRUE)
medianX <- median(x, na.rm = TRUE)
Erw <- sum(abs(x - medianX)) / n
GM <- abs(meanX - medianX) / Erw
return(GM)
}
# Helper function to reduce duplication
getImputationZDeltaSubset <- function(x, methods) {
lapply(x, function(y) y[grep(paste(as.character(methods), sep = "' '", collapse = "|"), row.names(y)), ])
}
ImputationZDeltaInsertedMissings <- lapply(RepeatedSampleImputations, function(x) x[["ImputationZDeltaInsertedMissings"]])
meanImputationZDeltaInsertedMissings <- Reduce("+", ImputationZDeltaInsertedMissings) / length(ImputationZDeltaInsertedMissings)
rowmeanImputationZDeltaInsertedMissings <- rowMeans(meanImputationZDeltaInsertedMissings)
ImputationZDeltaInsertedMissingsMultivarV <- unlist(getImputationZDeltaSubset(ImputationZDeltaInsertedMissings, setdiff(all_imputation_methods, c(scalar_imputation_methods, nonsense_imputation_methods))))
skewnessGMZDeltaInsertedMissingsMultivarV <- skewnessGM(ImputationZDeltaInsertedMissingsMultivarV)
ImputationZDeltaInsertedMissingsUnivarV <- unlist(getImputationZDeltaSubset(ImputationZDeltaInsertedMissings, scalar_imputation_methods))
skewnessGMZDeltaInsertedMissingsUnivarV <- skewnessGM(ImputationZDeltaInsertedMissingsUnivarV)
ImputationZDeltaInsertedMissingsNonsenseV <- unlist(getImputationZDeltaSubset(ImputationZDeltaInsertedMissings, nonsense_imputation_methods))
skewnessGMZDeltaInsertedMissingsNonsenseV <- skewnessGM(ImputationZDeltaInsertedMissingsNonsenseV)
ImputationZDeltaInsertedMissings
meanImputationZDeltaInsertedMissings <- Reduce("+", ImputationZDeltaInsertedMissings) / length(ImputationZDeltaInsertedMissings)
rowmeanImputationZDeltaInsertedMissings <- rowMeans(meanImputationZDeltaInsertedMissings)
meanImputationZDeltaInsertedMissings
rowmeanImputationZDeltaInsertedMissings
df4plot <- data.frame(reshape2::melt( rowmeanImputationZDeltaInsertedMissings ) )
df4plot
df4plot_long <- data.frame(reshape2::melt( rowmeanImputationZDeltaInsertedMissings ) )
df4plot_long <- data.frame(reshape2::melt( rowmeanImputationZDeltaInsertedMissings ) )
df4plot_long$Method <- gsub( " imputed", "", rownames( df4plot_long ) )
df4plot_long
df4plot_long$Method <- gsub( " imputed", "", rownames( df4plot_long ) )
df4plot_long$color <- ifelse( df4plot_long$Method %in% gsub( " imputed", "", nonsense_imputation_methods ), "red", "dodgerblue" )
df4plot_long$color[df4plot_long$Method %in% gsub( " imputed", "", scalar_imputation_methods )] <- "gold"
df4plot_long
minNonsense <- min( df4plot_long$value[dfXmatrixall_forPlot_long$color %in% c( "red" ) ] )
minNonsense <- min( df4plot_long$value[df4plot_long$color %in% c( "red" ) ] )
minScalar <- min( df4plot_long$value[df4plot_long$color %in% c( "gold" ) ] )
dfAnnotate <- data.frame( Methods = c( "Best poisened", "Best univariate" ), y = c( minFake, minScalar ), x = 3, color = c( "salmon", "orange" ) )
minNonsense <- min( df4plot_long$value[df4plot_long$color %in% c( "red" ) ] )
minScalar <- min( df4plot_long$value[df4plot_long$color %in% c( "gold" ) ] )
dfAnnotate <- data.frame( Methods = c( "Best poisened", "Best univariate" ), y = c( minNonsense, minScalar ), x = 3, color = c( "salmon", "orange" ) )
minNonsense
ggplot( data = df4plot_long, aes( x = Method, y = value) ) +
geom_bar( stat = "identity", position = "dodge", fill = df4plot_long$color, alpha = 0.5 ) +
theme_light( ) +
theme( axis.text.x = element_text( angle = 90, vjust = 0.5, hjust = 1 ),
legend.position = c( .9, .7 ),
legend.background = element_rect( fill = alpha( "white", 0.5 ) ) ) +
labs( title = paste0( ActualDataset, ": zDelta" ), y = "zDelta", x = NULL ) +
scale_color_colorblind( ) +
scale_alpha_manual( values = c( .2, .5 ) ) +
scale_y_continuous( breaks = pretty_breaks( ) ) +
geom_hline( yintercept = minFake, color = "salmon", linetype = "dashed" ) +
geom_hline( yintercept = minScalar, color = "orange", linetype = "dotdash" ) +
annotate( geom = "text", x = dfAnnotate$x, y = dfAnnotate$y + 0.005, label = dfAnnotate$Methods, color = dfAnnotate$color )
ggplot( data = df4plot_long, aes( x = Method, y = value) ) +
geom_bar( stat = "identity", position = "dodge", fill = df4plot_long$color, alpha = 0.5 ) +
theme_light( ) +
theme( axis.text.x = element_text( angle = 90, vjust = 0.5, hjust = 1 ),
legend.position = c( .9, .7 ),
legend.background = element_rect( fill = alpha( "white", 0.5 ) ) ) +
labs( title = "zDelta (means)" , y = "zDelta", x = NULL ) +
scale_color_colorblind( ) +
scale_alpha_manual( values = c( .2, .5 ) ) +
scale_y_continuous( breaks = pretty_breaks( ) ) +
geom_hline( yintercept = minFake, color = "salmon", linetype = "dashed" ) +
geom_hline( yintercept = minScalar, color = "orange", linetype = "dotdash" ) +
annotate( geom = "text", x = dfAnnotate$x, y = dfAnnotate$y + 0.005, label = dfAnnotate$Methods, color = dfAnnotate$color )
ggplot( data = df4plot_long, aes( x = Method, y = value) ) +
geom_bar( stat = "identity", position = "dodge", fill = df4plot_long$color, alpha = 0.5 ) +
theme_light( ) +
theme( axis.text.x = element_text( angle = 90, vjust = 0.5, hjust = 1 ),
legend.position = c( .9, .7 ),
legend.background = element_rect( fill = alpha( "white", 0.5 ) ) ) +
labs( title = "zDelta (means)" , y = "zDelta", x = NULL ) +
scale_y_continuous( breaks = pretty_breaks( ) ) +
geom_hline( yintercept = minFake, color = "salmon", linetype = "dashed" ) +
geom_hline( yintercept = minScalar, color = "orange", linetype = "dotdash" ) +
annotate( geom = "text", x = dfAnnotate$x, y = dfAnnotate$y + 0.005, label = dfAnnotate$Methods, color = dfAnnotate$color )
pretty_breaks
??pretty_breaks
ggplot( data = df4plot_long, aes( x = Method, y = value) ) +
geom_bar( stat = "identity", position = "dodge", fill = df4plot_long$color, alpha = 0.5 ) +
theme_light( ) +
theme( axis.text.x = element_text( angle = 90, vjust = 0.5, hjust = 1 ),
legend.position = c( .9, .7 ),
legend.background = element_rect( fill = alpha( "white", 0.5 ) ) ) +
labs( title = "zDelta (means)" , y = "zDelta", x = NULL ) +
scale_y_continuous( breaks = scales::pretty_breaks( ) ) +
geom_hline( yintercept = minFake, color = "salmon", linetype = "dashed" ) +
geom_hline( yintercept = minScalar, color = "orange", linetype = "dotdash" ) +
annotate( geom = "text", x = dfAnnotate$x, y = dfAnnotate$y + 0.005, label = dfAnnotate$Methods, color = dfAnnotate$color )
ggplot( data = df4plot_long, aes( x = Method, y = value) ) +
geom_bar( stat = "identity", position = "dodge", fill = df4plot_long$color, alpha = 0.5 ) +
theme_light( ) +
theme( axis.text.x = element_text( angle = 90, vjust = 0.5, hjust = 1 ),
legend.position = c( .9, .7 ),
legend.background = element_rect( fill = alpha( "white", 0.5 ) ) ) +
labs( title = "zDelta (means)" , y = "zDelta", x = NULL ) +
scale_y_continuous( breaks = scales::pretty_breaks( ) ) +
geom_hline( yintercept = minNonsense, color = "salmon", linetype = "dashed" ) +
geom_hline( yintercept = minScalar, color = "orange", linetype = "dotdash" ) +
annotate( geom = "text", x = dfAnnotate$x, y = dfAnnotate$y + 0.005, label = dfAnnotate$Methods, color = dfAnnotate$color )
generatePlotDataFrame <- function(rowmeans, nonsense, scalar) {
df <- data.frame(reshape2::melt(rowmeans))
df$Method <- gsub(" imputed", "", rownames(df))
df$color <- "dodgerblue"
df$color[df$Method %in% gsub(" imputed", "", nonsense)] <- "red"
df$color[df$Method %in% gsub(" imputed", "", scalar)] <- "gold"
return(df)
}
# Data frame creation
df4plot_long <- generatePlotDataFrame(rowmeanImputationZDeltaInsertedMissings, nonsense_imputation_methods, scalar_imputation_methods)
# Plotting
BarplotMeanZDeltas <-
ggplot(data = df4plot_long, aes(x = Method, y = value)) +
geom_bar(stat = "identity", position = "dodge", fill = alpha(df4plot_long$color, 0.5)) +
theme_light() +
theme(
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
legend.position = c(0.9, 0.7),
legend.background = element_rect(fill = alpha("white", 0.5))
) +
labs(title = "zDelta (means)", y = "zDelta", x = NULL) +
scale_y_continuous(breaks = scales::pretty_breaks()) +
geom_hline(yintercept = min(df4plot_long$value[df4plot_long$color %in% c("red")]), color = "salmon", linetype = "dashed") +
geom_hline(yintercept = min(df4plot_long$value[df4plot_long$color %in% c("gold")]), color = "orange", linetype = "dotdash")
BarplotMeanZDeltas
generatePlotDataFrame <- function(rowmeans, nonsense, scalar) {
df <- data.frame(reshape2::melt(rowmeans))
df$Method <- gsub(" imputed", "", rownames(df))
df$color <- "dodgerblue"
df$color[df$Method %in% gsub(" imputed", "", nonsense)] <- "red"
df$color[df$Method %in% gsub(" imputed", "", scalar)] <- "gold"
return(df)
}
# Data frame creation
df4plot_long <- generatePlotDataFrame(rowmeanImputationZDeltaInsertedMissings, nonsense_imputation_methods, scalar_imputation_methods)
minNonsense <- min( df4plot_long$value[df4plot_long$color %in% c( "red" ) ] )
minScalar <- min( df4plot_long$value[df4plot_long$color %in% c( "gold" ) ] )
dfAnnotate <- data.frame( Methods = c( "Best poisened", "Best univariate" ), y = c( minNonsense, minScalar ), x = 3, color = c( "salmon", "orange" ) )
# Plotting
BarplotMeanZDeltas <-
ggplot(data = df4plot_long, aes(x = Method, y = value)) +
geom_bar(stat = "identity", position = "dodge", fill = alpha(df4plot_long$color, 0.5)) +
theme_light() +
theme(
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
legend.position = c(0.9, 0.7),
legend.background = element_rect(fill = alpha("white", 0.5))
) +
labs(title = "zDelta (means)", y = "zDelta", x = NULL) +
scale_y_continuous(breaks = scales::pretty_breaks()) +
geom_hline(yintercept = min(df4plot_long$value[df4plot_long$color %in% c("red")]), color = "salmon", linetype = "dashed") +
geom_hline(yintercept = min(df4plot_long$value[df4plot_long$color %in% c("gold")]), color = "orange", linetype = "dotdash") +
annotate( geom = "text", x = dfAnnotate$x, y = dfAnnotate$y + 0.005, label = dfAnnotate$Methods, color = dfAnnotate$color )
BarplotMeanZDeltas
ImputationZDeltaInsertedMissingsMultivarV
ImputationZDeltaInsertedMissingsNonsenseV
ImputationZDeltaInsertedMissingsMultivar
ImputationZDeltaInsertedMissingsMultivarV
ImputationZDeltaInsertedMissingsUnivarV
ImputationZDeltaInsertedMissingsNonsenseV
df4plot_long <- rbind.data.frame(
cbind.data.frame(Category = "Multivariate", Zdelta = ImputationZDeltaInsertedMissingsMultivarV),
cbind.data.frame(Category = "Univariate", Zdelta = ImputationZDeltaInsertedMissingsUnivarV),
cbind.data.frame(Category = "Poisened", Zdelta = ImputationZDeltaInsertedMissingsNonsenseV)
)
df4plot_long
df4plot_long
unique(df4plot_long$Category)
Pareto <- ParetoDensityEstimation(Data = df4plot_long$Zdelta[df4plot_long$Category == Category], plotIt = FALSE)
ParetoDensityEstimation
ParetoDensityEstimation
Pareto <- DataVisualizations::ParetoDensityEstimation(Data = df4plot_long$Zdelta[df4plot_long$Category == Category], PlotIt = FALSE)
# Calculate PDE xy
ParetoDistributions <- lapply(unique(df4plot_long$Category), function(Category) {
Pareto <- DataVisualizations::ParetoDensityEstimation(Data = df4plot_long$Zdelta[df4plot_long$Category == Category], PlotIt = FALSE)
dfPareto <- data.frame(Category = Category, x = Pareto$kernels, y = Pareto$paretoDensity)
return(dfPareto)
})
ParetoDistributions
dfParetoAll <- do.call(rbind.data.frame, ParetoDistributions)
PDErawZDeltas <- ggplot(data = dfParetoAll, aes(x = x, y = y, color = Variable)) +
geom_line() +
theme_light() +
theme(
legend.position = "bottom",
legend.direction = "horizontal",
legend.background = element_rect(colour = "transparent", fill = ggplot2::alpha("white", 0.4))
) +
labs(
title = paste0(deparse(substitute(data)), ": PDE"),
x = paste0("Data (MinMax scaled = ", scaled, ")"),
y = "PDE"
)
PDErawZDeltas <- ggplot(data = dfParetoAll, aes(x = x, y = y, color = Variable)) +
geom_line() +
theme_light() +
theme(
legend.position = "bottom",
legend.direction = "horizontal",
legend.background = element_rect(colour = "transparent", fill = ggplot2::alpha("white", 0.4))
) +
labs(
title = paste0(deparse(substitute(data)), ": PDE"),
x = paste0("Data"),
y = "PDE"
)
PDErawZDeltas
PDErawZDeltas <- ggplot(data = dfParetoAll, aes(x = x, y = y, color = Category)) +
geom_line() +
theme_light() +
theme(
legend.position = "bottom",
legend.direction = "horizontal",
legend.background = element_rect(colour = "transparent", fill = ggplot2::alpha("white", 0.4))
) +
labs(
title = paste0(deparse(substitute(data)), ": PDE"),
x = paste0("Data"),
y = "PDE"
)
PDErawZDeltas
PDErawZDeltas <- ggplot(data = dfParetoAll, aes(x = x, y = y, color = Category)) +
geom_line() +
theme_light() +
theme(
legend.position = "bottom",
legend.direction = "horizontal",
legend.background = element_rect(colour = "transparent", fill = ggplot2::alpha("white", 0.4))
) +
labs( title = "PDE of raw zDelta values", x = "Data", y = "PDE" )
PDErawZDeltas
df4plot_long <- rbind.data.frame(
cbind.data.frame(Category = "Multivariate", Zdelta = multivarZDeltas),
cbind.data.frame(Category = "Univariate", Zdelta = univarZDeltas),
cbind.data.frame(Category = "Poisened", Zdelta = nonsenseZDeltas)
)
#################################### Paths ########################################################################
pfad_o <- "/home/joern/Aktuell/opImputation/"
pfad_u1 <- "09Originale/"
pfad_r <- "12RLibrary/opImputation/R/"
pfad_r2 <- "08AnalyseProgramme/R/"
#################################### Libraries ########################################################################
source( paste0( pfad_o, pfad_r, "createMissings.R" ) )
source( paste0( pfad_o, pfad_r, "imputeMissings.R" ) )
source( paste0( pfad_o, pfad_r, "eval_with_timeout.R" ) )
source( paste0( pfad_o, pfad_r, "makeAndMeasureRepeatedImputations.R" ) )
# source( paste0( pfad_o, pfad_r, "plotVariablesPDE.R" ) )
source( paste0( pfad_o, pfad_r, "calculateMetrics.R" ) )
source( paste0( pfad_o, pfad_r, "findBestImputation.R" ) )
nProc <- max( round( ( detectCores( ) ) / 10 ), 4 )
# nProc <- 5
################## Switches #######################################
seed <- 100
nIter <- 20
list.of.seeds <- 1:nIter + seed - 1
PercentMissingInitial <- 10
PercentMissing <- 10
probMissing <- PercentMissing / 100
################## Functions #######################################
################## Create data set #######################################
DatasetNames <- c( "UniformRandom3VarDependent",
"UniformRandom3VarIndependent" )
source( paste0( pfad_o, pfad_r2, "create_prepaire_Datasets.R" ) )
################## Imputation methods #######################################
ImputationMethods <- c( "plus", "rf2", "median")
# ImputationMethods <- all_imputation_methods
################## Make missings in each variable #######################################
Datasets <-
pbmcapply::pbmclapply( DatasetNames, function( ActualDataset ) {
dfXmatrix <- DatasetsInitial[[ActualDataset]]
dfXmatrixInitialMissings_WhichAnddata <-
createMissings( x = dfXmatrix, Prob = PercentMissingInitial / 100, seed = seed^2, mnarity = 0, lowOnly = F, mnarshape = 1 )
dfXmatrixInitialMissings <- dfXmatrixInitialMissings_WhichAnddata$missData
dfXmatrixInitialMissings_Which <- dfXmatrixInitialMissings_WhichAnddata$toDelete
return( list(
dfXmatrix = dfXmatrix,
dfXmatrixInitialMissings = dfXmatrixInitialMissings,
dfXmatrixInitialMissings_Which = dfXmatrixInitialMissings_Which
) )
}, mc.cores = nProc )
names( Datasets ) <- DatasetNames
################## Impute data sets #######################################
RepeatedSampleImputations <-
makeAndMeasureRepeatedImputations( Data = Datasets$UniformRandom3VarIndependent$dfXmatrixInitialMissings,
seeds = list.of.seeds,
probMissing = probMissing )
print( "BestMethodPerDataset" )
BestMethodPerDataset <- names(BestMethod(RepeatedSampleImputations = RepeatedSampleImputations)$BestPerDatasetRanksums_insertedMissings)
print( BestMethodPerDataset )
ImputedDataFinal
lapply( RepeatedSampleImputations, function( x ) {
x[["dfXmatrixInitialMissingsAll"]]
} )
RepeatedSampleImputations
lapply( RepeatedSampleImputations, function( x ) {
x[["dfXmatrixall"]]
} )
ImputedDataX <- lapply( RepeatedSampleImputations, function( x ) {
x[["dfXmatrixall"]]
} )
ImputedDataX
ImputedDataXAverage <-
Reduce( "+", lapply( ImputedDataX, function( x ) within( x, rm( Data ) ) ) ) / length( ImputedDataX )
ImputedDataXAverage
RepeatedSampleImputations
ImputedDataXAverage
ImputedDataX
dfXmatrixall
dfXmatrix
dfXmatrixall
make.names(dfXmatrixall$Data)
paste0(make.names(dfXmatrixall$Data),1:nrow(dfXmatrix))
paste0(make.names(dfXmatrixall$Data),1:nrow(dfXmatrix), sep=".")
paste0(make.names(dfXmatrixall$Data),1:nrow(dfXmatrix), collapse = ".")
paste0(make.names(dfXmatrixall$Data),".",1:nrow(dfXmatrix))
#################################### Paths ########################################################################
pfad_o <- "/home/joern/Aktuell/opImputation/"
pfad_u1 <- "09Originale/"
pfad_r <- "12RLibrary/opImputation/R/"
pfad_r2 <- "08AnalyseProgramme/R/"
#################################### Libraries ########################################################################
source( paste0( pfad_o, pfad_r, "createMissings.R" ) )
source( paste0( pfad_o, pfad_r, "imputeMissings.R" ) )
source( paste0( pfad_o, pfad_r, "eval_with_timeout.R" ) )
source( paste0( pfad_o, pfad_r, "makeAndMeasureRepeatedImputations.R" ) )
# source( paste0( pfad_o, pfad_r, "plotVariablesPDE.R" ) )
source( paste0( pfad_o, pfad_r, "calculateMetrics.R" ) )
source( paste0( pfad_o, pfad_r, "findBestImputation.R" ) )
nProc <- max( round( ( detectCores( ) ) / 10 ), 4 )
# nProc <- 5
################## Switches #######################################
seed <- 100
nIter <- 20
list.of.seeds <- 1:nIter + seed - 1
PercentMissingInitial <- 10
PercentMissing <- 10
probMissing <- PercentMissing / 100
################## Functions #######################################
################## Create data set #######################################
DatasetNames <- c( "UniformRandom3VarDependent",
"UniformRandom3VarIndependent" )
source( paste0( pfad_o, pfad_r2, "create_prepaire_Datasets.R" ) )
################## Imputation methods #######################################
ImputationMethods <- c( "plus", "rf2", "median")
# ImputationMethods <- all_imputation_methods
################## Make missings in each variable #######################################
Datasets <-
pbmcapply::pbmclapply( DatasetNames, function( ActualDataset ) {
dfXmatrix <- DatasetsInitial[[ActualDataset]]
dfXmatrixInitialMissings_WhichAnddata <-
createMissings( x = dfXmatrix, Prob = PercentMissingInitial / 100, seed = seed^2, mnarity = 0, lowOnly = F, mnarshape = 1 )
dfXmatrixInitialMissings <- dfXmatrixInitialMissings_WhichAnddata$missData
dfXmatrixInitialMissings_Which <- dfXmatrixInitialMissings_WhichAnddata$toDelete
return( list(
dfXmatrix = dfXmatrix,
dfXmatrixInitialMissings = dfXmatrixInitialMissings,
dfXmatrixInitialMissings_Which = dfXmatrixInitialMissings_Which
) )
}, mc.cores = nProc )
names( Datasets ) <- DatasetNames
################## Impute data sets #######################################
RepeatedSampleImputations <-
makeAndMeasureRepeatedImputations( Data = Datasets$UniformRandom3VarIndependent$dfXmatrixInitialMissings,
seeds = list.of.seeds,
probMissing = probMissing )
##################  Look at  bad imputations #######################################
##################  Find best imputation #######################################
print( "BestMethodPerDataset" )
BestMethodPerDataset <- names(BestMethod(RepeatedSampleImputations = RepeatedSampleImputations)$BestPerDatasetRanksums_insertedMissings)
print( BestMethodPerDataset )
ImputedDataX <- lapply( RepeatedSampleImputations, function( x ) {
x[["dfXmatrixall"]]
} )
ImputedDataXAverage <-
Reduce( "+", lapply( ImputedDataX, function( x ) within( x, rm( Data ) ) ) ) / length( ImputedDataX )
ImputedDataXAverage
dfXmatrixInitialMissings
ImputedDataXAverage
Data
DataRepeated <- do.call( "rbind.data.frame", replicate( ( dim( ImputedDataXAverage )[1] / nrow( Data ) ),
Data, simplify = FALSE ) )
DataRepeated
replaceNonmissingsWithOriginal <- function( complete, miss ) {
ifelse( is.na( miss ), complete, miss )
}
ImputedDataAverageOrigRestored <- mapply( replaceNonmissingsWithOriginal, ImputedDataXAverage, DataRepeated )
ImputedDataAverageOrigRestored
ImputedDataAverage <- cbind.data.frame( Data = ImputedDataX[[1]]$Data, ImputedDataAverageOrigRestored )
ImputedDataAverage
retrieveAveragedImputedData <- function(Data, RepeatedSampleImputations) {
ImputedDataX <- lapply( RepeatedSampleImputations, function( x ) {
x[["dfXmatrixall"]]
} )
ImputedDataXAverage <-
Reduce( "+", lapply( ImputedDataX, function( x ) within( x, rm( Data ) ) ) ) / length( ImputedDataX )
DataRepeated <- do.call( "rbind.data.frame", replicate( ( dim( ImputedDataXAverage )[1] / nrow( Data ) ),
Data, simplify = FALSE ) )
ImputedDataAverageOrigRestored <- mapply( replaceNonmissingsWithOriginal, ImputedDataXAverage, DataRepeated )
ImputedDataAverage <- cbind.data.frame( Data = ImputedDataX[[1]]$Data, ImputedDataAverageOrigRestored )
return( ImputedDataAverage )
}
ImputedDataX <- lapply(RepeatedSampleImputations, function(x) x[["dfXmatrixall"]])
# Remove 'Data' column from each imputed data frame
ImputedDataX <- lapply(ImputedDataX, function(x) x[, !colnames(x) %in% "Data", drop = FALSE])
# Average imputed data
ImputedDataXAverage <- Reduce("+", ImputedDataX) / length(ImputedDataX)
# Repeat original data to match the dimensions
DataRepeated <- do.call("rbind.data.frame", replicate((dim(ImputedDataXAverage)[1] / nrow(Data)), Data, simplify = FALSE))
# Replace non-missing values in ImputedDataXAverage with corresponding values from DataRepeated
ImputedDataAverageOrigRestored <- Map(replaceNonmissingsWithOriginal, ImputedDataXAverage, DataRepeated)
# Combine original 'Data' column with the imputed data
ImputedDataAverage <- cbind.data.frame(Data = ImputedDataX[[1]]$Data, ImputedDataAverageOrigRestored)
ImputedDataX <- lapply(RepeatedSampleImputations, function(x) x[["dfXmatrixall"]])
ImputedDataX
ImputedDataX <- lapply(ImputedDataX, function(x) x[, !colnames(x) %in% "Data", drop = FALSE])
ImputedDataX
ImputedDataXAverage <- Reduce("+", ImputedDataX) / length(ImputedDataX)
ImputedDataXAverage
DataRepeated <- do.call("rbind.data.frame", replicate((dim(ImputedDataXAverage)[1] / nrow(Data)), Data, simplify = FALSE))
DataRepeated
ImputedDataAverageOrigRestored <- Map(replaceNonmissingsWithOriginal, ImputedDataXAverage, DataRepeated)
ImputedDataAverageOrigRestored
ImputedDataAverageOrigRestored <- mapply( replaceNonmissingsWithOriginal, ImputedDataXAverage, DataRepeated )
ImputedDataAverageOrigRestored
ImputedDataAverage <- cbind.data.frame(Data = ImputedDataX[[1]]$Data, ImputedDataAverageOrigRestored)
ImputedDataX
ImputedDataX <- lapply(RepeatedSampleImputations, function(x) x[["dfXmatrixall"]])
# Remove 'Data' column from each imputed data frame
ImputedDataXWithoutData <- lapply(ImputedDataX, function(x) x[, !colnames(x) %in% "Data", drop = FALSE])
# Average imputed data
ImputedDataXAverage <- Reduce("+", ImputedDataXWithoutData) / length(ImputedDataXWithoutData)
# Repeat original data to match the dimensions
DataRepeated <- do.call("rbind.data.frame", replicate((dim(ImputedDataXAverage)[1] / nrow(Data)), Data, simplify = FALSE))
# Replace non-missing values in ImputedDataXAverage with corresponding values from DataRepeated
ImputedDataAverageOrigRestored <- mapply( replaceNonmissingsWithOriginal, ImputedDataXAverage, DataRepeated )
# Combine original 'Data' column with the imputed data
ImputedDataAverage <- cbind.data.frame(Data = ImputedDataX[[1]]$Data, ImputedDataAverageOrigRestored)
ImputedDataAverage
ZDeltafinalInitialMissings
ImputationZDeltaInsertedMissings
meanImputationZDeltaInsertedMissings
dfXmatriximputed
zABCvalues_insertedMissings
BestMethodPerDataset
BestMethod(RepeatedSampleImputations = RepeatedSampleImputations)
RepeatedSampleImputations
