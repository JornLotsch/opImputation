} )
}
# Function to z-transform the ABC values
calculate_zABC_values <- function( meanRanks, nVar, nMethods, nIter ) {
d <- nVar * nIter
M <- nMethods
m <- ( M + 1 ) / 2
s <- ( 1 / sqrt( 12 ) ) * ( M / sqrt( d ) )
ZmeanRanksPerAlg <- ( meanRanks - m ) / s
ZmeanRanksPerAlg[ZmeanRanksPerAlg > 0] <- 0
ABCvalue <- ZmeanRanksPerAlg^2
return( ABCvalue )
}
# Function to calculate combined metrics
calculate_combined_metrics <-
function( RMSEMX, MEMx, rBiasMx, nIter ) {
RRMSEMX <- rank_MEs( RMSEMX )
RMEMx <- rank_MEs( MEMx )
RrBiasMx <- rank_MEs( rBiasMx )
rankErrorsMissings <- mapply( function( r1, r2, r3 ) { ( r1 + r2 + r3 ) / 3 }, RRMSEMX, RMEMx, RrBiasMx, SIMPLIFY = FALSE )
rankErrorsMissings <- rename_df_columns_in_nested_list( df = rankErrorsMissings )
ranksumsErrorsMissings <- lapply( rankErrorsMissings, function( x ) apply( x, 1, median ) )
grandMeanrankErrorsMissings <- median_imputations( rankErrorsMissings )
# grandMeanrankErrorsMissings <- Reduce( "+", rankErrorsMissings ) / length( rankErrorsMissings )
median_imputations_2d <- function( x ) {
all.matrix <- array( unlist( x ), dim = c( dim( x[[1]] )[1], dim( x[[1]] )[2], length( x ) ) )
avg <- data.frame( apply( all.matrix, c( 1, 2 ), function( x ) median( x, na.rm = TRUE ) ) )
return( avg )
}
all.matrix <- data.frame( array( unlist( ranksumsErrorsMissings ), dim = c( length( ranksumsErrorsMissings[[1]] ), length( ranksumsErrorsMissings ) ) ) )
rownames( all.matrix ) <- names( ranksumsErrorsMissings[[1]] )
PerDatasetRanksums_Missings <- apply( all.matrix, c( 1 ), function( x ) median( x, na.rm = TRUE ) )
BestPerDatasetRanksums_Missings <- names( which.min( PerDatasetRanksums_Missings ) )
BestUnivariatePerDatasetRanksums_Missings <- names( which.min( PerDatasetRanksums_Missings[gsub( " imputed", "",
names( PerDatasetRanksums_Missings ) ) %in% univariate_imputation_methods] ) )
BestMultivariatePerDatasetRanksums_Missings <- names( which.min( PerDatasetRanksums_Missings[gsub( " imputed", "",
names( PerDatasetRanksums_Missings ) ) %in% multivariate_imputation_methods] ) )
BestUniMultivariatePerDatasetRanksums_Missings <- names( which.min( PerDatasetRanksums_Missings[gsub( " imputed", "",
names( PerDatasetRanksums_Missings ) ) %in% c( univariate_imputation_methods, multivariate_imputation_methods )] ) )
BestPoisonedPerDatasetRanksums_Missings <- names( which.min( PerDatasetRanksums_Missings[gsub( " imputed", "",
names( PerDatasetRanksums_Missings ) ) %in% poisoned_imputation_methods] ) )
zABCvalues <- calculate_zABC_values( meanRanks = PerDatasetRanksums_Missings,
nVar = ncol( RMSEMX[[1]] ),
nMethods = length( PerDatasetRanksums_Missings ),
nIter = nIter )
ABCRanksums <-
ABCanalysis( as.vector( zABCvalues ) )
BestRanksumsGrandMean_Missings_ABC_A <-
names( PerDatasetRanksums_Missings )[ABCRanksums$Aind]
return( list(
rankErrorsMissings = rankErrorsMissings,
ranksumsErrorsMissings = ranksumsErrorsMissings,
grandMeanrankErrorsMissings = grandMeanrankErrorsMissings,
PerDatasetRanksums_Missings = PerDatasetRanksums_Missings,
BestPerDatasetRanksums_Missings = BestPerDatasetRanksums_Missings,
BestUnivariatePerDatasetRanksums_Missings = BestUnivariatePerDatasetRanksums_Missings,
BestMultivariatePerDatasetRanksums_Missings = BestMultivariatePerDatasetRanksums_Missings,
BestUniMultivariatePerDatasetRanksums_Missings = BestUniMultivariatePerDatasetRanksums_Missings,
BestPoisonedPerDatasetRanksums_Missings = BestPoisonedPerDatasetRanksums_Missings,
zABCvalues = zABCvalues,
ABCRanksums = ABCRanksums,
BestRanksumsGrandMean_Missings_ABC_A = BestRanksumsGrandMean_Missings_ABC_A,
RRMSEMX = RRMSEMX,
RMEMx = RMEMx,
RrBiasMx = RrBiasMx
) )
}
# Find best imputation
find_best_method <- function( RepeatedSampleImputations, pfctMtdsInABC, nIter ) {
# Inserted diagnostic missings
RMSEinsertedMissings <- lapply( RepeatedSampleImputations, function( x ) {
x[["ImputationRMSEInsertedMissings"]]
} )
MEinsertedMissings <- lapply( RepeatedSampleImputations, function( x ) {
x[["ImputationMEInsertedMissings"]]
} )
rBiasinsertedMissings <- lapply( RepeatedSampleImputations, function( x ) {
x[["ImputationrBiasInsertedMissings"]]
} )
if ( pfctMtdsInABC == FALSE ) {
RMSEinsertedMissings <- lapply( RMSEinsertedMissings, function( x ) x[!gsub( " imputed", "", rownames( x ) ) %in% calibrating_imputation_methods,] )
MEinsertedMissings <- lapply( MEinsertedMissings, function( x ) x[!gsub( " imputed", "", rownames( x ) ) %in% calibrating_imputation_methods,] )
rBiasinsertedMissings <- lapply( rBiasinsertedMissings, function( x ) x[!gsub( " imputed", "", rownames( x ) ) %in% calibrating_imputation_methods,] )
}
CombinedMetricsInsertedMissings <-
calculate_combined_metrics( RMSEMX = RMSEinsertedMissings,
MEMx = MEinsertedMissings,
rBiasMx = rBiasinsertedMissings,
nIter = nIter )
# Return results
return( list(
BestPerDatasetRanksums_insertedMissings = CombinedMetricsInsertedMissings[["BestPerDatasetRanksums_Missings"]],
BestUnivariatePerDatasetRanksums_insertedMissings = CombinedMetricsInsertedMissings[["BestUnivariatePerDatasetRanksums_Missings"]],
BestMultivariatePerDatasetRanksums_insertedMissings = CombinedMetricsInsertedMissings[["BestMultivariatePerDatasetRanksums_Missings"]],
BestUniMultivariatePerDatasetRanksums_insertedMissings = CombinedMetricsInsertedMissings[["BestUniMultivariatePerDatasetRanksums_Missings"]],
BestPoisonedPerDatasetRanksums_insertedMissings = CombinedMetricsInsertedMissings[["BestPoisonedPerDatasetRanksums_Missings"]],
BestPerDatasetRanksums_insertedMissings = CombinedMetricsInsertedMissings[["BestPerDatasetRanksums_Missings"]],
BestPerDatasetRanksums_insertedMissings = CombinedMetricsInsertedMissings[["BestPerDatasetRanksums_Missings"]],
BestRanksumsGrandMean_insertedMissings_ABC_A = CombinedMetricsInsertedMissings[["BestRanksumsGrandMean_Missings_ABC_A"]],
ranksumsErrorsInsertedMissings = CombinedMetricsInsertedMissings[["ranksumsErrorsMissings"]],
grandMeanrankErrorsInsertedMissings = CombinedMetricsInsertedMissings[["grandMeanrankErrorsMissings"]],
RMSEinsertedMissings = RMSEinsertedMissings,
MEinsertedMissings = MEinsertedMissings,
rBiasinsertedMissings = rBiasinsertedMissings,
ranksRMSEinsertedMissings = CombinedMetricsInsertedMissings[["RRMSEMX"]],
ranksMEinsertedMissings = CombinedMetricsInsertedMissings[["RMEMx"]],
ranksrBiasinsertedMissings = CombinedMetricsInsertedMissings[["RrBiasMx"]],
PerDatasetRanksums_insertedMissings = CombinedMetricsInsertedMissings[["PerDatasetRanksums_Missings"]],
zABCvalues_insertedMissings = CombinedMetricsInsertedMissings[["zABCvalues"]]
) )
}
RRMSEMX <- rank_MEs( RMSEMX )
# Inserted diagnostic missings
RMSEinsertedMissings <- lapply( RepeatedSampleImputations, function( x ) {
x[["ImputationRMSEInsertedMissings"]]
} )
MEinsertedMissings <- lapply( RepeatedSampleImputations, function( x ) {
x[["ImputationMEInsertedMissings"]]
} )
rBiasinsertedMissings <- lapply( RepeatedSampleImputations, function( x ) {
x[["ImputationrBiasInsertedMissings"]]
} )
if ( pfctMtdsInABC == FALSE ) {
RMSEinsertedMissings <- lapply( RMSEinsertedMissings, function( x ) x[!gsub( " imputed", "", rownames( x ) ) %in% calibrating_imputation_methods,] )
MEinsertedMissings <- lapply( MEinsertedMissings, function( x ) x[!gsub( " imputed", "", rownames( x ) ) %in% calibrating_imputation_methods,] )
rBiasinsertedMissings <- lapply( rBiasinsertedMissings, function( x ) x[!gsub( " imputed", "", rownames( x ) ) %in% calibrating_imputation_methods,] )
}
RMSEMX = RMSEinsertedMissings
MEMx = MEinsertedMissings
rBiasMx = rBiasinsertedMissings
RRMSEMX <- rank_MEs( RMSEMX )
RMEMx <- rank_MEs( MEMx )
RrBiasMx <- rank_MEs( rBiasMx )
rankErrorsMissings <- mapply( function( r1, r2, r3 ) { ( r1 + r2 + r3 ) / 3 }, RRMSEMX, RMEMx, RrBiasMx, SIMPLIFY = FALSE )
rankErrorsMissings <- rename_df_columns_in_nested_list( df = rankErrorsMissings )
ranksumsErrorsMissings <- lapply( rankErrorsMissings, function( x ) apply( x, 1, median ) )
median_imputations( rankErrorsMissings )
rankErrorsMissings
rankErrorsMissings[[1]]
names(rankErrorsMissings[[1]])
colnames(rankErrorsMissings[[1]])
median_imputations <- function( x ) {
all.matrix <- array( unlist( x ), dim = c( dim( x[[1]] )[1], dim( x[[1]] )[2], length( x ) ) )
avg <- data.frame( apply( all.matrix, c( 1, 2 ), function( x ) median( x, na.rm = TRUE ) ) )
names( avg ) <- colnames( x[[1]] )
rownames( avg ) <- rownames( x[[1]] )
return( avg )
}
rankErrorsMissings <- mapply( function( r1, r2, r3 ) { ( r1 + r2 + r3 ) / 3 }, RRMSEMX, RMEMx, RrBiasMx, SIMPLIFY = FALSE )
rankErrorsMissings <- rename_df_columns_in_nested_list( df = rankErrorsMissings )
ranksumsErrorsMissings <- lapply( rankErrorsMissings, function( x ) apply( x, 1, median ) )
grandMeanrankErrorsMissings <- median_imputations( rankErrorsMissings )
grandMeanrankErrorsMissings
# grandMeanrankErrorsMissings <- Reduce( "+", rankErrorsMissings ) / length( rankErrorsMissings )
median_imputations_2d <- function( x ) {
all.matrix <- array( unlist( x ), dim = c( dim( x[[1]] )[1], dim( x[[1]] )[2], length( x ) ) )
avg <- data.frame( apply( all.matrix, c( 1, 2 ), function( x ) median( x, na.rm = TRUE ) ) )
return( avg )
}
all.matrix <- data.frame( array( unlist( ranksumsErrorsMissings ), dim = c( length( ranksumsErrorsMissings[[1]] ), length( ranksumsErrorsMissings ) ) ) )
rownames( all.matrix ) <- names( ranksumsErrorsMissings[[1]] )
PerDatasetRanksums_Missings <- apply( all.matrix, c( 1 ), function( x ) median( x, na.rm = TRUE ) )
PerDatasetRanksums_Missings
all.matrix <- data.frame( array( unlist( ranksumsErrorsMissings ), dim = c( length( ranksumsErrorsMissings[[1]] ), length( ranksumsErrorsMissings ) ) ) )
rownames( all.matrix ) <- names( ranksumsErrorsMissings[[1]] )
PerDatasetRanksums_Missings <- apply( all.matrix, c( 1 ), function( x ) median( x, na.rm = TRUE ) )
BestPerDatasetRanksums_Missings <- names( which.min( PerDatasetRanksums_Missings ) )
BestUnivariatePerDatasetRanksums_Missings <- names( which.min( PerDatasetRanksums_Missings[gsub( " imputed", "",
names( PerDatasetRanksums_Missings ) ) %in% univariate_imputation_methods] ) )
BestMultivariatePerDatasetRanksums_Missings <- names( which.min( PerDatasetRanksums_Missings[gsub( " imputed", "",
names( PerDatasetRanksums_Missings ) ) %in% multivariate_imputation_methods] ) )
BestUniMultivariatePerDatasetRanksums_Missings <- names( which.min( PerDatasetRanksums_Missings[gsub( " imputed", "",
names( PerDatasetRanksums_Missings ) ) %in% c( univariate_imputation_methods, multivariate_imputation_methods )] ) )
BestPoisonedPerDatasetRanksums_Missings <- names( which.min( PerDatasetRanksums_Missings[gsub( " imputed", "",
names( PerDatasetRanksums_Missings ) ) %in% poisoned_imputation_methods] ) )
zABCvalues <- calculate_zABC_values( meanRanks = PerDatasetRanksums_Missings,
nVar = ncol( RMSEMX[[1]] ),
nMethods = length( PerDatasetRanksums_Missings ),
nIter = nIter )
ABCRanksums <-
ABCanalysis( as.vector( zABCvalues ) )
BestRanksumsGrandMean_Missings_ABC_A <-
names( PerDatasetRanksums_Missings )[ABCRanksums$Aind]
zABCvalues
# Function to identity the optimal imputation method from the comparative evaluations
# Function to rank matrices
rank_MEs <-
function( rankMx ) {
Mx <- lapply( rankMx, function( y ) apply( y, 2, function( x ) rank( x, na.last = TRUE ) ) )
return( Mx )
}
# Function to z-transform the ABC values
rename_df_columns_in_nested_list <- function( df ) {
lapply( seq_along( df ), function( i ) {
y <- df[[i]]
colnames( y ) <- gsub( 'RMSE_', 'MeanRank_', colnames( y ) )
return( y )
} )
}
# Function to z-transform the ABC values
calculate_zABC_values <- function( meanRanks, nVar, nMethods, nIter ) {
d <- nVar * nIter
M <- nMethods
m <- ( M + 1 ) / 2
s <- ( 1 / sqrt( 12 ) ) * ( M / sqrt( d ) )
ZmeanRanksPerAlg <- ( meanRanks - m ) / s
ZmeanRanksPerAlg[ZmeanRanksPerAlg > 0] <- 0
ABCvalue <- ZmeanRanksPerAlg^2
return( ABCvalue )
}
# Function to calculate combined metrics
calculate_combined_metrics <-
function( RMSEMX, MEMx, rBiasMx, nIter ) {
RRMSEMX <- rank_MEs( RMSEMX )
RMEMx <- rank_MEs( MEMx )
RrBiasMx <- rank_MEs( rBiasMx )
rankErrorsMissings <- mapply( function( r1, r2, r3 ) { ( r1 + r2 + r3 ) / 3 }, RRMSEMX, RMEMx, RrBiasMx, SIMPLIFY = FALSE )
rankErrorsMissings <- rename_df_columns_in_nested_list( df = rankErrorsMissings )
ranksumsErrorsMissings <- lapply( rankErrorsMissings, function( x ) apply( x, 1, median ) )
grandMeanrankErrorsMissings <- median_imputations( rankErrorsMissings )
# grandMeanrankErrorsMissings <- Reduce( "+", rankErrorsMissings ) / length( rankErrorsMissings )
median_imputations_2d <- function( x ) {
all.matrix <- array( unlist( x ), dim = c( dim( x[[1]] )[1], dim( x[[1]] )[2], length( x ) ) )
avg <- data.frame( apply( all.matrix, c( 1, 2 ), function( x ) median( x, na.rm = TRUE ) ) )
return( avg )
}
all.matrix <- data.frame( array( unlist( ranksumsErrorsMissings ), dim = c( length( ranksumsErrorsMissings[[1]] ), length( ranksumsErrorsMissings ) ) ) )
rownames( all.matrix ) <- names( ranksumsErrorsMissings[[1]] )
PerDatasetRanksums_Missings <- apply( all.matrix, c( 1 ), function( x ) median( x, na.rm = TRUE ) )
BestPerDatasetRanksums_Missings <- names( which.min( PerDatasetRanksums_Missings ) )
BestUnivariatePerDatasetRanksums_Missings <- names( which.min( PerDatasetRanksums_Missings[gsub( " imputed", "",
names( PerDatasetRanksums_Missings ) ) %in% univariate_imputation_methods] ) )
BestMultivariatePerDatasetRanksums_Missings <- names( which.min( PerDatasetRanksums_Missings[gsub( " imputed", "",
names( PerDatasetRanksums_Missings ) ) %in% multivariate_imputation_methods] ) )
BestUniMultivariatePerDatasetRanksums_Missings <- names( which.min( PerDatasetRanksums_Missings[gsub( " imputed", "",
names( PerDatasetRanksums_Missings ) ) %in% c( univariate_imputation_methods, multivariate_imputation_methods )] ) )
BestPoisonedPerDatasetRanksums_Missings <- names( which.min( PerDatasetRanksums_Missings[gsub( " imputed", "",
names( PerDatasetRanksums_Missings ) ) %in% poisoned_imputation_methods] ) )
zABCvalues <- calculate_zABC_values( meanRanks = PerDatasetRanksums_Missings,
nVar = ncol( RMSEMX[[1]] ),
nMethods = length( PerDatasetRanksums_Missings ),
nIter = nIter )
ABCRanksums <-
ABCanalysis( as.vector( zABCvalues ) )
BestRanksumsGrandMean_Missings_ABC_A <-
names( PerDatasetRanksums_Missings )[ABCRanksums$Aind]
return( list(
rankErrorsMissings = rankErrorsMissings,
ranksumsErrorsMissings = ranksumsErrorsMissings,
grandMeanrankErrorsMissings = grandMeanrankErrorsMissings,
PerDatasetRanksums_Missings = PerDatasetRanksums_Missings,
BestPerDatasetRanksums_Missings = BestPerDatasetRanksums_Missings,
BestUnivariatePerDatasetRanksums_Missings = BestUnivariatePerDatasetRanksums_Missings,
BestMultivariatePerDatasetRanksums_Missings = BestMultivariatePerDatasetRanksums_Missings,
BestUniMultivariatePerDatasetRanksums_Missings = BestUniMultivariatePerDatasetRanksums_Missings,
BestPoisonedPerDatasetRanksums_Missings = BestPoisonedPerDatasetRanksums_Missings,
zABCvalues = zABCvalues,
ABCRanksums = ABCRanksums,
BestRanksumsGrandMean_Missings_ABC_A = BestRanksumsGrandMean_Missings_ABC_A,
RRMSEMX = RRMSEMX,
RMEMx = RMEMx,
RrBiasMx = RrBiasMx
) )
}
# Find best imputation
find_best_method <- function( RepeatedSampleImputations, pfctMtdsInABC, nIter ) {
# Inserted diagnostic missings
RMSEinsertedMissings <- lapply( RepeatedSampleImputations, function( x ) {
x[["ImputationRMSEInsertedMissings"]]
} )
MEinsertedMissings <- lapply( RepeatedSampleImputations, function( x ) {
x[["ImputationMEInsertedMissings"]]
} )
rBiasinsertedMissings <- lapply( RepeatedSampleImputations, function( x ) {
x[["ImputationrBiasInsertedMissings"]]
} )
if ( pfctMtdsInABC == FALSE ) {
RMSEinsertedMissings <- lapply( RMSEinsertedMissings, function( x ) x[!gsub( " imputed", "", rownames( x ) ) %in% calibrating_imputation_methods,] )
MEinsertedMissings <- lapply( MEinsertedMissings, function( x ) x[!gsub( " imputed", "", rownames( x ) ) %in% calibrating_imputation_methods,] )
rBiasinsertedMissings <- lapply( rBiasinsertedMissings, function( x ) x[!gsub( " imputed", "", rownames( x ) ) %in% calibrating_imputation_methods,] )
}
CombinedMetricsInsertedMissings <-
calculate_combined_metrics( RMSEMX = RMSEinsertedMissings,
MEMx = MEinsertedMissings,
rBiasMx = rBiasinsertedMissings,
nIter = nIter )
# Return results
return( list(
BestPerDatasetRanksums_insertedMissings = CombinedMetricsInsertedMissings[["BestPerDatasetRanksums_Missings"]],
BestUnivariatePerDatasetRanksums_insertedMissings = CombinedMetricsInsertedMissings[["BestUnivariatePerDatasetRanksums_Missings"]],
BestMultivariatePerDatasetRanksums_insertedMissings = CombinedMetricsInsertedMissings[["BestMultivariatePerDatasetRanksums_Missings"]],
BestUniMultivariatePerDatasetRanksums_insertedMissings = CombinedMetricsInsertedMissings[["BestUniMultivariatePerDatasetRanksums_Missings"]],
BestPoisonedPerDatasetRanksums_insertedMissings = CombinedMetricsInsertedMissings[["BestPoisonedPerDatasetRanksums_Missings"]],
BestPerDatasetRanksums_insertedMissings = CombinedMetricsInsertedMissings[["BestPerDatasetRanksums_Missings"]],
BestPerDatasetRanksums_insertedMissings = CombinedMetricsInsertedMissings[["BestPerDatasetRanksums_Missings"]],
BestRanksumsGrandMean_insertedMissings_ABC_A = CombinedMetricsInsertedMissings[["BestRanksumsGrandMean_Missings_ABC_A"]],
ranksumsErrorsInsertedMissings = CombinedMetricsInsertedMissings[["ranksumsErrorsMissings"]],
grandMeanrankErrorsInsertedMissings = CombinedMetricsInsertedMissings[["grandMeanrankErrorsMissings"]],
RMSEinsertedMissings = RMSEinsertedMissings,
MEinsertedMissings = MEinsertedMissings,
rBiasinsertedMissings = rBiasinsertedMissings,
ranksRMSEinsertedMissings = CombinedMetricsInsertedMissings[["RRMSEMX"]],
ranksMEinsertedMissings = CombinedMetricsInsertedMissings[["RMEMx"]],
ranksrBiasinsertedMissings = CombinedMetricsInsertedMissings[["RrBiasMx"]],
PerDatasetRanksums_insertedMissings = CombinedMetricsInsertedMissings[["PerDatasetRanksums_Missings"]],
zABCvalues_insertedMissings = CombinedMetricsInsertedMissings[["zABCvalues"]]
) )
}
ranksumsErrorsMissings
grandMeanrankErrorsMissings <- median_imputations( rankErrorsMissings )
grandMeanrankErrorsMissings
grandMeanrankErrorsMissings <- Reduce( "+", rankErrorsMissings ) / length( rankErrorsMissings )
grandMeanrankErrorsMissings
rankErrorsMissings
rankErrorsMissings <- mapply( function( r1, r2, r3 ) { ( r1 + r2 + r3 ) / 3 }, RRMSEMX, RMEMx, RrBiasMx, SIMPLIFY = FALSE )
rankErrorsMissings
rename_df_columns_in_nested_list( df = rankErrorsMissings )
rankErrorsMissings <- mapply( function( r1, r2, r3 ) { ( r1 + r2 + r3 ) / 3 }, RRMSEMX, RMEMx, RrBiasMx, SIMPLIFY = FALSE )
rankErrorsMissings
tryCatch(median_imputations(iImputedData), error = function(e) NULL)
library(opImputation)
TestImputation <- opImputationAnalyze(Data = iris[,1:4],
ImputationMethods =  c("rf_missForest", "median", "plus" ) )
library(opImputation)
TestImputation <- opImputationAnalyze(Data = iris[,1:4],
ImputationMethods =  c("rf_missForest", "median", "plus" ) )
library(opImputation)
HeptaPaper <- cbind.data.frame(Cls = FCPS::Hepta$Cls, FCPS::Hepta$Data)
write.csv(HeptaPaper, "HeptaPaper.csv")
HeptaPaper
PDERawzDeltasBest
dfParetoAll
library(opImputation)
nProc
nProc = nProc <- round( ( parallel::detectCores( ) )  ) - 2
TestImputationIriscalibrating <- opImputationAnalyze(Data = iris[,1:4],
ImputationMethods =  all_imputation_methods, nProc = nProc)
TestImputationIriscalibrating
all_imputation_methods
univariate_imputation_methods <- c( "median", "mean", "mode", "rSample" )
poisoned_imputation_methods <- c( "plus", "plusminus", "factor" )
calibrating_imputation_methods <- c("tinyNoise_0.000001", "tinyNoise_0.00001", "tinyNoise_0.0001", "tinyNoise_0.001", "tinyNoise_0.01",
"tinyNoise_0.05", "tinyNoise_0.1", "tinyNoise_0.2", "tinyNoise_0.5", "tinyNoise_1")
multivariate_imputation_methods <- c( "bag", "bag_repeated",
"rf_mice", "rf_mice_repeated", "rf_missForest", "rf_missForest_repeated", "miceRanger", "miceRanger_repeated",
"cart", "cart_repeated",
"linear",
"pmm", "pmm_repeated",
"knn3", "knn5", "knn7", "knn9", "knn10",
"ameliaImp", "ameliaImp_repeated",
"miImp"
)
all_imputation_methods <- c( univariate_imputation_methods,
poisoned_imputation_methods,
calibrating_imputation_methods,
multivariate_imputation_methods
)
TestImputationIriscalibrating <- opImputationAnalyze(Data = iris[,1:4],
ImputationMethods =  all_imputation_methods, nProc = nProc)
TestImputationIriscalibrating$Fig_zDeltaDistributions_bestMethods
Prob = 0.1
mnarity = 0
mnarshape = 1
lowOnly = FALSE
x
x = c(1,2,3,4,3,2,3,4,5,6,7,8,9,7,6)
xm <- as.matrix( x )
if ( is.null( seed ) ) {
seed <- .Random.seed[1]
}
seed
seed = 21
list.of.seeds <- seq_len( ncol( xm ) ) + seed - 1
list.of.seeds
set.seed( list.of.seeds[i] )
i = 1
set.seed( list.of.seeds[i] )
x_actual <- xm[, i]
x_actual_copy <- ifelse( is.na( x_actual ), 0, x_actual )
probabilitiesLarge <- abs( x_actual_copy ) / sum( abs( x_actual_copy ) )
probabilitiesLarge
probabilitiesSmall <- 1 - abs( x_actual_copy ) / sum( abs( x_actual_copy ) )
probabilitiesSmall
probabilitiesNAR <- apply( cbind.data.frame( probabilitiesLarge, probabilitiesSmall ), 1, max ) * mnarity
probabilitiesNAR
# https://stackoverflow.com/questions/55560983/randomly-generate-points-within-specific-sphere-coordinates-in-r
library("scatterplot3d")
Xcenters <- cbind(
X1 = c(0,3,-3,0,0,0,0),
X2 =c(0,0,0,3,-3,0,0),
X3 =  c(0,0,0,0,0,3,-3)
)
# rsphere <- function(n, r = 1.0, surface_only = FALSE, center=cbind(0.0, 0.0, 0.0)) {
#   phi       <- runif(n, 0.0, 2.0 * pi)
#   cos_theta <- runif(n, -1.0, 1.0)
#   sin_theta <- sqrt((1.0-cos_theta)*(1.0+cos_theta))
#   radius <- r
#   if (surface_only == FALSE) {
#     radius <- r * runif(n, 0.0, 1.0)^(1.0/3.0)
#   }
#
#   x <- radius * sin_theta * cos(phi)
#   y <- radius * sin_theta * sin(phi)
#   z <- radius * cos_theta
#
#   # if radius is fixed, we could check it
#   # rr = sqrt(x^2+y^2+z^2)
#   # print(rr)
#
#   ma <- cbind(x+center[1], y+center[2], z+center[3])
#   colnames(ma) <- paste0("X",1:3)
#   return(ma)
# }
# set.seed(42)
# mHepta <- rsphere(n = 32, r = 0.1, center = Xcenters[1,])
# for (k in 2:7) {
#   mHepta <- rbind(mHepta, rsphere(n = 30, r = 1, center = Xcenters[k,]))
# }
rsphere <- function(n, r = 1, center = c(0, 0, 0)) {
phi <- runif(n, 0, 2 * pi)
cos_theta <- runif(n, -1, 1)
sin_theta <- sqrt((1 - cos_theta) * (1 + cos_theta))
radius <- r * runif(n)^(1/3)
ma <- cbind(
radius * sin_theta * cos(phi),
radius * sin_theta * sin(phi),
radius * cos_theta
) + matrix(center, n, 3, byrow = TRUE)
colnames(ma) <- paste0("X", 1:3)
return(ma)
}
set.seed(42)
mHepta <- do.call(rbind, lapply(1:7, function(k) rsphere(n = ifelse(k == 1, 32, 30), r = ifelse(k == 1, 0.1, 1), center = Xcenters[k,])))
par(mfrow=c(2,2))
scatterplot3d(mHepta)
scatterplot3d(FCPS::Hepta$Data)
par(mfrow=c(1,1))
rsphere <- function(n, r = 1, center = c(0, 0, 0)) {
phi <- runif(n, 0, 2 * pi)
cos_theta <- runif(n, -1, 1)
sin_theta <- sqrt((1 - cos_theta) * (1 + cos_theta))
radius <- r * runif(n)^(1/3)
ma <- cbind(
radius * sin_theta * cos(phi),
radius * sin_theta * sin(phi),
radius * cos_theta
) + matrix(center, n, 3, byrow = TRUE)
colnames(ma) <- paste0("X", 1:3)
return(ma)
}
set.seed(42)
Hepta <- do.call(rbind, lapply(1:7, function(k) rsphere(n = ifelse(k == 1, 32, 30), r = ifelse(k == 1, 0.1, 1), center = Xcenters[k,])))
par(mfrow=c(2,2))
scatterplot3d(Hepta)
scatterplot3d(FCPS::Hepta$Data)
par(mfrow=c(1,1))
# https://stackoverflow.com/questions/55560983/randomly-generate-points-within-specific-sphere-coordinates-in-r
library( "scatterplot3d" )
Xcenters <- cbind(
X1 = c( 0, 3, -3, 0, 0, 0, 0 ),
X2 = c( 0, 0, 0, 3, -3, 0, 0 ),
X3 = c( 0, 0, 0, 0, 0, 3, -3 )
)
# rsphere <- function(n, r = 1.0, surface_only = FALSE, center=cbind(0.0, 0.0, 0.0)) {
#   phi       <- runif(n, 0.0, 2.0 * pi)
#   cos_theta <- runif(n, -1.0, 1.0)
#   sin_theta <- sqrt((1.0-cos_theta)*(1.0+cos_theta))
#   radius <- r
#   if (surface_only == FALSE) {
#     radius <- r * runif(n, 0.0, 1.0)^(1.0/3.0)
#   }
#
#   x <- radius * sin_theta * cos(phi)
#   y <- radius * sin_theta * sin(phi)
#   z <- radius * cos_theta
#
#   # if radius is fixed, we could check it
#   # rr = sqrt(x^2+y^2+z^2)
#   # print(rr)
#
#   ma <- cbind(x+center[1], y+center[2], z+center[3])
#   colnames(ma) <- paste0("X",1:3)
#   return(ma)
# }
# set.seed(42)
# mHepta <- rsphere(n = 32, r = 0.1, center = Xcenters[1,])
# for (k in 2:7) {
#   mHepta <- rbind(mHepta, rsphere(n = 30, r = 1, center = Xcenters[k,]))
# }
rsphere <- function( n, r = 1, center = c( 0, 0, 0 ) ) {
phi <- runif( n, 0, 2 * pi )
cos_theta <- runif( n, -1, 1 )
sin_theta <- sqrt( ( 1 - cos_theta ) * ( 1 + cos_theta ) )
radius <- r * runif( n )^( 1 / 3 )
ma <- cbind(
radius * sin_theta * cos( phi ),
radius * sin_theta * sin( phi ),
radius * cos_theta
) + matrix( center, n, 3, byrow = TRUE )
colnames( ma ) <- paste0( "X", 1:3 )
return( ma )
}
set.seed( 42 )
Hepta <-
do.call( rbind, lapply( 1:7,
function( k ) rsphere( n = ifelse( k == 1, 32, 30 ),
r = ifelse( k == 1, 0.1, 1 ),
center = Xcenters[k,] ) ) )
par( mfrow = c( 2, 2 ) )
scatterplot3d( Hepta )
scatterplot3d( FCPS::Hepta$Data )
par( mfrow = c( 1, 1 ) )
