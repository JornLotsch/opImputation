source( paste0( pfad_o, pfad_r, "eval_with_timeout.R" ) )
source( paste0( pfad_o, pfad_r, "makeAndMeasureRepeatedImputations.R" ) )
# source( paste0( pfad_o, pfad_r, "plotVariablesPDE.R" ) )
source( paste0( pfad_o, pfad_r, "calculateMetrics.R" ) )
ImputationMEInsertedMissings <- makeMetricsMatrix(
OrigData = dfXmatrix,
Missings_Which = dfXmatrixInsertedMissings_Which,
ImputedData = dfImputedDataAll,
Metric = "MEImputedUnivar"
)
names(ImputationMEInsertedMissings) <- paste0("ME_", names(dfXmatrix))
ImputationMEInsertedMissings
ImputationCorrelationInsertedMissings <- makeMetricsMatrix(
OrigData = dfXmatrix,
Missings_Which = dfXmatrixInsertedMissings_Which,
ImputedData = dfImputedDataAll,
Metric = "rBiasImputedUnivar"
)
names(ImputationCorrelationInsertedMissings) <- paste0("rBias_", names(dfXmatrix))
ImputationCorrelationInsertedMissings
ImputationrBiasInsertedMissings <- makeMetricsMatrix(
OrigData = dfXmatrix,
Missings_Which = dfXmatrixInsertedMissings_Which,
ImputedData = dfImputedDataAll,
Metric = "rBiasImputedUnivar"
)
names(ImputationrBiasInsertedMissings) <- paste0("rBias_", names(dfXmatrix))
ImputationrBiasInsertedMissings
ImputationZDeltaInsertedMissings <- makeMetricsMatrix(
OrigData = dfXmatrix,
Missings_Which = dfXmatrixInsertedMissings_Which,
ImputedData = dfImputedDataAll,
Metric = "ZDelta",
OrigDataMiss = dfXmatrixInsertedMissings
)
names(ImputationZDeltaInsertedMissings) <- paste0("ZDelta_", names(dfXmatrix))
ImputationZDeltaInsertedMissings
source( paste0( pfad_o, pfad_r, "createMissings.R" ) )
source( paste0( pfad_o, pfad_r, "imputeMissings.R" ) )
source( paste0( pfad_o, pfad_r, "eval_with_timeout.R" ) )
source( paste0( pfad_o, pfad_r, "makeAndMeasureRepeatedImputations.R" ) )
# source( paste0( pfad_o, pfad_r, "plotVariablesPDE.R" ) )
source( paste0( pfad_o, pfad_r, "calculateMetrics.R" ) )
# Function to impute data matrices with missing values
imputeData <- function( dfMtx, dfMtxorig ) {
parallel::mclapply( ImputationMethods, function( method ) {
dfXmatriximputed <- cbind.data.frame( Data = paste0( method, " imputed" ), makeBadImputations( dfMtx ) )
dfXmatriximputed_list <- data.frame( imputeMissings( x = dfMtx, method = method, imputationRepetitions = imputationRepetitions, seed = seed, x_orig = dfMtxorig ) )
if ( identical( dim( dfXmatriximputed_list ), dim( dfMtx ) ) ) {
dfXmatriximputed <- cbind.data.frame( Data = paste0( method, " imputed" ), dfXmatriximputed_list )
}
return( dfXmatriximputed )
}, mc.cores = nProc )
}
# Function to calculate metrics for the imputations
makeMetricsMatrix <- function( OrigData, Missings_Which, ImputedData, Metric, OrigDataMiss = NULL ) {
data.frame( do.call(
cbind,
lapply( seq_along( Missings_Which ), function( i ) {
by( ImputedData, list( ImputedData$Data ), function( y ) {
OrigDataMiss_i <- if ( !is.null( OrigDataMiss ) ) OrigDataMiss[, i]
calculateMetrics(
OrigData = OrigData[, i],
Missings_Which = Missings_Which[[i]],
ImputedData = within( y, rm( Data ) )[, i],
Metric = Metric,
OrigDataMiss = OrigDataMiss_i
)
} )
} )
) )
}
# Function to insert diagnostic missing values and to perform the imputations
makeAndMeasureRepeatedImputations <- function( Data, seeds, probMissing ) {
rImputations <- pbmcapply::pbmclapply( seeds, function( seed ) {
dfXmatrix <- Data
dfXmatrixInitialMissings_Which <- lapply( seq_along( Data ), function( i ) which( is.na( Data[, i] ) ) )
seedMissings <- seed
dfXmatrixInsertedMissings_WhichAndData <- createMissings( x = dfXmatrix, Prob = probMissing, seed = seedMissings, mnarity = 0, lowOnly = F, mnarshape = 1 )
iNA <- 1
MaxNAs <- max( apply( dfXmatrixInsertedMissings_WhichAndData$missData, 1, function( x ) sum( is.na( x ) ) ) )
while ( MaxNAs == ncol( dfXmatrixInsertedMissings_WhichAndData$missData ) ) {
dfXmatrixInsertedMissings_WhichAndData <- createMissings( x = dfXmatrixInitialMissings, Prob = probMissing, seed = seedMissings + 1000000 * iNA, mnarity = 0, lowOnly = F, mnarshape = 1 )
MaxNAs <- max( apply( dfXmatrixInsertedMissings_WhichAndData$missData, 1, function( x ) sum( is.na( x ) ) ) )
iNA <- iNA + 1
}
dfXmatrixInsertedMissings <- dfXmatrixInsertedMissings_WhichAndData$missData
dfXmatrixInsertedMissings_Which <- lapply( seq_along( dfXmatrixInsertedMissings_WhichAndData$toDelete ), function( i ) setdiff( dfXmatrixInsertedMissings_WhichAndData$toDelete[[i]], dfXmatrixInitialMissings_Which[[i]] ) )
# Impute data set
ImputedDataAll <- imputeData( dfMtx = dfXmatrixInsertedMissings, dfMtxorig = dfXmatrix )
names( ImputedDataAll ) <- ImputationMethods
# Combine imputed data set
dfImputedDataAll <- data.frame( do.call( rbind, ImputedDataAll ) )
dfXmatrixall <- rbind.data.frame(
cbind.data.frame( Data = "All data", dfXmatrix ),
cbind.data.frame( Data = "Missings", dfXmatrixInsertedMissings ),
dfImputedDataAll
)
# Calculate metrics
ImputationRMSEInsertedMissings <- makeMetricsMatrix(
OrigData = dfXmatrix,
Missings_Which = dfXmatrixInsertedMissings_Which,
ImputedData = dfImputedDataAll,
Metric = "RMSEImputedUnivar"
)
names( ImputationRMSEInsertedMissings ) <- paste0( "RMSE_", names( dfXmatrix ) )
ImputationMEInsertedMissings <- makeMetricsMatrix(
OrigData = dfXmatrix,
Missings_Which = dfXmatrixInsertedMissings_Which,
ImputedData = dfImputedDataAll,
Metric = "MEImputedUnivar"
)
names( ImputationMEInsertedMissings ) <- paste0( "ME_", names( dfXmatrix ) )
ImputationrBiasInsertedMissings <- makeMetricsMatrix(
OrigData = dfXmatrix,
Missings_Which = dfXmatrixInsertedMissings_Which,
ImputedData = dfImputedDataAll,
Metric = "rBiasImputedUnivar"
)
names( ImputationrBiasInsertedMissings ) <- paste0( "rBias_", names( dfXmatrix ) )
ImputationZDeltaInsertedMissings <- makeMetricsMatrix(
OrigData = dfXmatrix,
Missings_Which = dfXmatrixInsertedMissings_Which,
ImputedData = dfImputedDataAll,
Metric = "ZDelta",
OrigDataMiss = dfXmatrixInsertedMissings
)
names( ImputationZDeltaInsertedMissings ) <- paste0( "ZDelta_", names( dfXmatrix ) )
return( list(
dfXmatrixall = dfXmatrixall,
dfXmatrixInsertedMissings_Which = dfXmatrixInsertedMissings_Which,
ImputationRMSEInsertedMissings = ImputationRMSEInsertedMissings,
ImputationMEInsertedMissings = ImputationMEInsertedMissings,
ImputationrBiasInsertedMissings = ImputationrBiasInsertedMissings,
ImputationZDeltaInsertedMissings = ImputationZDeltaInsertedMissings
) )
return( SampleImputations = SampleImputations )
}, mc.cores = nProc )
return( rImputations )
}
RepeatedSampleImputations <-
makeAndMeasureRepeatedImputations( Data = Datasets$UniformRandom3VarIndependent$dfXmatrixInitialMissings,
seeds = list.of.seeds,
probMissing = probMissing )
RepeatedSampleImputations
rImputations <- pbmcapply::pbmclapply( seeds, function( seed ) {
dfXmatrix <- Data
dfXmatrixInitialMissings_Which <- lapply( seq_along( Data ), function( i ) which( is.na( Data[, i] ) ) )
seedMissings <- seed
dfXmatrixInsertedMissings_WhichAndData <- createMissings( x = dfXmatrix, Prob = probMissing, seed = seedMissings, mnarity = 0, lowOnly = F, mnarshape = 1 )
iNA <- 1
MaxNAs <- max( apply( dfXmatrixInsertedMissings_WhichAndData$missData, 1, function( x ) sum( is.na( x ) ) ) )
while ( MaxNAs == ncol( dfXmatrixInsertedMissings_WhichAndData$missData ) ) {
dfXmatrixInsertedMissings_WhichAndData <- createMissings( x = dfXmatrixInitialMissings, Prob = probMissing, seed = seedMissings + 1000000 * iNA, mnarity = 0, lowOnly = F, mnarshape = 1 )
MaxNAs <- max( apply( dfXmatrixInsertedMissings_WhichAndData$missData, 1, function( x ) sum( is.na( x ) ) ) )
iNA <- iNA + 1
}
dfXmatrixInsertedMissings <- dfXmatrixInsertedMissings_WhichAndData$missData
dfXmatrixInsertedMissings_Which <- lapply( seq_along( dfXmatrixInsertedMissings_WhichAndData$toDelete ), function( i ) setdiff( dfXmatrixInsertedMissings_WhichAndData$toDelete[[i]], dfXmatrixInitialMissings_Which[[i]] ) )
# Impute data set
ImputedDataAll <- imputeData( dfMtx = dfXmatrixInsertedMissings, dfMtxorig = dfXmatrix )
names( ImputedDataAll ) <- ImputationMethods
# Combine imputed data set
dfImputedDataAll <- data.frame( do.call( rbind, ImputedDataAll ) )
dfXmatrixall <- rbind.data.frame(
cbind.data.frame( Data = "All data", dfXmatrix ),
cbind.data.frame( Data = "Missings", dfXmatrixInsertedMissings ),
dfImputedDataAll
)
# Calculate metrics
ImputationRMSEInsertedMissings <- makeMetricsMatrix(
OrigData = dfXmatrix,
Missings_Which = dfXmatrixInsertedMissings_Which,
ImputedData = dfImputedDataAll,
Metric = "RMSEImputedUnivar"
)
names( ImputationRMSEInsertedMissings ) <- paste0( "RMSE_", names( dfXmatrix ) )
ImputationMEInsertedMissings <- makeMetricsMatrix(
OrigData = dfXmatrix,
Missings_Which = dfXmatrixInsertedMissings_Which,
ImputedData = dfImputedDataAll,
Metric = "MEImputedUnivar"
)
names( ImputationMEInsertedMissings ) <- paste0( "ME_", names( dfXmatrix ) )
ImputationrBiasInsertedMissings <- makeMetricsMatrix(
OrigData = dfXmatrix,
Missings_Which = dfXmatrixInsertedMissings_Which,
ImputedData = dfImputedDataAll,
Metric = "rBiasImputedUnivar"
)
names( ImputationrBiasInsertedMissings ) <- paste0( "rBias_", names( dfXmatrix ) )
ImputationZDeltaInsertedMissings <- makeMetricsMatrix(
OrigData = dfXmatrix,
Missings_Which = dfXmatrixInsertedMissings_Which,
ImputedData = dfImputedDataAll,
Metric = "ZDelta",
OrigDataMiss = dfXmatrixInsertedMissings
)
names( ImputationZDeltaInsertedMissings ) <- paste0( "ZDelta_", names( dfXmatrix ) )
source( paste0( pfad_o, pfad_r, "makeAndMeasureRepeatedImputations.R" ) )
)))
source( paste0( pfad_o, pfad_r, "makeAndMeasureRepeatedImputations.R" ) )
RepeatedSampleImputations <-
makeAndMeasureRepeatedImputations( Data = Datasets$UniformRandom3VarIndependent$dfXmatrixInitialMissings,
seeds = list.of.seeds,
probMissing = probMissing )
RepeatedSampleImputations
source( paste0( pfad_o, pfad_r, "makeAndMeasureRepeatedImputations.R" ) )
RepeatedSampleImputations <-
makeAndMeasureRepeatedImputations( Data = Datasets$UniformRandom3VarIndependent$dfXmatrixInitialMissings,
seeds = list.of.seeds,
probMissing = probMissing )
RepeatedSampleImputations
seeds
list.of.seeds
seed <- 100
nIter <- 20
list.of.seeds <- 1:nIter + seed - 1
PercentMissingInitial <- 10
PercentMissing <- 10
probMissing <- PercentMissing / 100
################## Functions #######################################
# Groeneveld, Meeden
skewnessGMG <- function( x ) {
x <- na.omit( x )
n <- length( x )
meanX <- mean( x, na.rm = TRUE )
medianX <- median( x, na.rm = TRUE )
Erw <- sum( abs( x - medianX ) ) / n
GM = abs( meanX - medianX ) / Erw
return( GM )
}
# Used metrics defined from here
################## Create data set #######################################
DatasetNames <- c( "UniformRandom3VarDependent",
"UniformRandom3VarIndependent" )
source( paste0( pfad_o, pfad_r2, "create_prepaire_Datasets.R" ) )
################## Imputation methods #######################################
ImputationMethods <- c( "plus", "rf2", "median")
# ImputationMethods <- all_imputation_methods
################## Make missings in each variable #######################################
Datasets <-
pbmcapply::pbmclapply( DatasetNames, function( ActualDataset ) {
dfXmatrix <- DatasetsInitial[[ActualDataset]]
dfXmatrixInitialMissings_WhichAnddata <-
createMissings( x = dfXmatrix, Prob = PercentMissingInitial / 100, seed = seed^2, mnarity = 0, lowOnly = F, mnarshape = 1 )
dfXmatrixInitialMissings <- dfXmatrixInitialMissings_WhichAnddata$missData
dfXmatrixInitialMissings_Which <- dfXmatrixInitialMissings_WhichAnddata$toDelete
return( list(
dfXmatrix = dfXmatrix,
dfXmatrixInitialMissings = dfXmatrixInitialMissings,
dfXmatrixInitialMissings_Which = dfXmatrixInitialMissings_Which
) )
}, mc.cores = nProc )
names( Datasets ) <- DatasetNames
# lapply( DatasetNames, function( ActualDataset ) {
#   dfXmatrix <- DatasetsInitial[[ActualDataset]]
#   write.csv(x = dfXmatrix, file = paste0(pfad_o, pfad_r, ActualDataset, ".csv"))
# }
# )
# plot(DatasetsInitial[[3]][,2] ~ DatasetsInitial[[3]][,1], col ="blue")
# points(DatasetsInitial[[3]][,3] ~ DatasetsInitial[[3]][,1], col ="green")
################## Impute data sets #######################################
RepeatedSampleImputations <-
makeAndMeasureRepeatedImputations( Data = Datasets$UniformRandom3VarIndependent$dfXmatrixInitialMissings,
seeds = list.of.seeds,
probMissing = probMissing )
RepeatedSampleImputations
source( paste0( pfad_o, pfad_r, "findBestImputation2.R" ) )
# Function to rank matrices
rankMEs <-
function( rankMx, inverted = FALSE ) {
if ( !inverted ) {
Mx <- lapply( rankMx, function( y ) apply( y, 2, function( x ) rank( x, na.last = TRUE ) ) )
} else {
Mx <- lapply( rankMx, function( y ) apply( y, 2, function( x ) rank( -x, na.last = FALSE ) ) )
}
return( Mx )
}
# Function to calculate random rank scores
calculateRandomRankScores <-
function( rankMx, totalPerm = 200 ) {
rankMxPerm <- rep( rankMx, round( totalPerm / length( rankMx ) ) )
rankMxPerm2 <- lapply( seq_along( rankMxPerm ), function( i ) {
set.seed( i )
rankMxPerm1 <- data.frame( apply( rankMxPerm[[i]], 2, function( x ) sample( x ) ) )
rownames( rankMxPerm1 ) <- rownames( rankMxPerm[[i]] )
return( rankMxPerm1 )
} )
return( rankMxPerm2 )
}
# Function to z-transform the ABC values
renameDfcolumnsInNestedList <- function( df ) {
lapply( seq_along( df ), function( i ) {
y <- df[[i]]
colnames( y ) <- gsub( 'RMSE_', 'MeanRank_', colnames( y ) )
return( y )
} )
}
# Function to z-transform the ABC values
calculateZABCvalues <- function( data, meanRanks ) {
nVar <- ncol( data[[1]] )
nMethods <- nrow( data[[1]] )
nTests <- length( data )
d <- nVar * nTests
M <- nMethods
m <- ( M + 1 ) / 2
s <- (1 / sqrt(12)) * ( M / sqrt(d) )
ZmeanRanksPerAlg <- ( meanRanks - m ) / s
ZmeanRanksPerAlg[ZmeanRanksPerAlg > 0] <- 0
ABCvalue <- ZmeanRanksPerAlg^2
return( ABCvalue )
}
RepeatedSampleImputations
RMSEinsertedMissings <- lapply( RepeatedSampleImputations, function( x ) {
x[[ActualDataset]][["ImputationRMSEInsertedMissings"]]
} )
RepeatedSampleImputations
RMSEinsertedMissings <- lapply( RepeatedSampleImputations, function( x ) {
x[["ImputationRMSEInsertedMissings"]]
} )
RMSEinsertedMissings
RMSEinsertedMissings <- lapply( RepeatedSampleImputations, function( x ) {
x[["ImputationRMSEInsertedMissings"]]
} )
MEinsertedMissings <- lapply( RepeatedSampleImputations, function( x ) {
x[["ImputationMEInsertedMissings"]]
} )
CorrinsertedMissings <- lapply( RepeatedSampleImputations, function( x ) {
x[["ImputationCorrelationInsertedMissings"]]
} )
RMSEinsertedMissings
MEinsertedMissings
CorrinsertedMissings
View(ImputationCorrelationInsertedMissings)
rBiasInsertedMissings <- lapply( RepeatedSampleImputations, function( x ) {
x[["ImputationrBiasInsertedMissings"]]
} )
rBiasInsertedMissings
CombinedMetricsInsertedMissings <-
calculateCombinedMetrics( RMSEMX = RMSEinsertedMissings, MEMx = MEinsertedMissings, rBiasMx = rBiasInsertedMissings )
RMSEMX = RMSEinsertedMissings
source("~/.Datenplatte/Joerns Dateien/Aktuell/opImputation/12RLibrary/opImputation/R/findBestImputation.R", echo=TRUE)
MEinsertedMissings
MEMx = MEinsertedMissings
RMSEMX = RMSEinsertedMissings
rBiasMx = rBiasInsertedMissings
RRMSEMX <- rankMEs( RMSEMX )
RMEMx <- rankMEs( MEMx )
RRMSEMX <- rankMEs( RMSEMX )
RMEMx <- rankMEs( MEMx )
RrBiasMx <- rankMEs( rBiasMx )
RRMSEMX
RMEMx
RrBiasMx
rankErrorsMissings <- mapply( function( r1, r2, r3 ) {
( r1 + r2 + r3 ) / 3 }  },
rankErrorsMissings <- mapply( function( r1, r2, r3 ) {
( r1 + r2 + r3 ) / 3 }  ,
mapply( function( a, b ) a * b, RRMSEMX, RSMEWeight, SIMPLIFY = FALSE ),
mapply( function( a, b ) a * b, RMEMx, MEWeight, SIMPLIFY = FALSE ),
mapply( function( a, b ) a * b, RrBiasMx, CorrelationWeight, SIMPLIFY = FALSE ),
SIMPLIFY = FALSE )
rankErrorsMissings <- mapply( function( r1, r2, r3 ) {
( r1 + r2 + r3 ) / 3 }  , RRMSEMX,  RMEMx,  RrBiasMx)
rankErrorsMissings <- renameDfcolumnsInNestedList( df = rankErrorsMissings )
rankErrorsMissings <- mapply( function( r1, r2, r3 ) {
( r1 + r2 + r3 ) / 3 }  , RRMSEMX,  RMEMx,  RrBiasMx)
rankErrorsMissings
rankErrorsMissings <- mapply( function( r1, r2, r3 ) {
( r1 + r2 + r3 ) / 3 }  ,
mapply( function( a, b ) a * b, RRMSEMX, 1, SIMPLIFY = FALSE ),
mapply( function( a, b ) a * b, RMEMx, 1, SIMPLIFY = FALSE ),
mapply( function( a, b ) a * b, RrBiasMx, 1, SIMPLIFY = FALSE ),
SIMPLIFY = FALSE )
rankErrorsMissings
rankErrorsMissings <- mapply( function( r1, r2, r3 ) {
( r1 + r2 + r3 ) / 3 }  ,
mapply( function( a, b ) a * b, RRMSEMX, 1, SIMPLIFY = FALSE ),
mapply( function( a, b ) a * b, RMEMx, 1, SIMPLIFY = FALSE ),
mapply( function( a, b ) a * b, RrBiasMx, 1, SIMPLIFY = FALSE ),
SIMPLIFY = FALSE )
rankErrorsMissings <- renameDfcolumnsInNestedList( df = rankErrorsMissings )
rankErrorsMissings
mapply( function( a, b ) a * b, RRMSEMX, 1, SIMPLIFY = FALSE )
RRMSEMX
rankErrorsMissings <- mapply( function( r1, r2, r3 ) {
( r1 + r2 + r3 ) / 3 }  , RRMSEMX,  RMEMx, RrBiasMx, SIMPLIFY = FALSE )
rankErrorsMissings
rankErrorsMissings <- renameDfcolumnsInNestedList( df = rankErrorsMissings )
rankErrorsMissings
RRMSEMX <- rankMEs( RMSEMX )
RMEMx <- rankMEs( MEMx )
RrBiasMx <- rankMEs( rBiasMx )
rankErrorsMissings <- mapply( function( r1, r2, r3 ) {
( r1 + r2 + r3 ) / 3 }  , RRMSEMX,  RMEMx, RrBiasMx, SIMPLIFY = FALSE )
rankErrorsMissings <- renameDfcolumnsInNestedList( df = rankErrorsMissings )
ranksumsErrorsMissings <- lapply( rankErrorsMissings, function( x ) apply( x, 1, mean ) )
a <- do.call( abind::abind, c( rankErrorsMissings, list( along = 3 ) ) )
grandMeanrankErrorsMissings <- apply( a, 1:2, median )
MajorityVoteRanksErrorsMissings <- lapply( ranksumsErrorsMissings, function( x ) names( which.min( x ) ) )
PerDatasetRanksums_Missings <- Reduce( "+", ranksumsErrorsMissings ) / length( ranksumsErrorsMissings )
BestPerDatasetRanksums_Missings <- which.min( PerDatasetRanksums_Missings )
BestPerVariableRanksums_Missings <-
apply( grandMeanrankErrorsMissings, 2, function( y ) rownames( as.data.frame( grandMeanrankErrorsMissings ) )[which.min( y )] )
zABCvalues <- calculateZABCvalues( data = RRMSEMX, meanRanks = PerDatasetRanksums_Missings )
ABCRanksums <-
ABCanalysis( zABCvalues )
BestRanksumsGrandMean_Missings_ABC_A <-
names( PerDatasetRanksums_Missings )[ABCRanksums$Aind]
#################################### Libraries ########################################################################
library( abind )
#################################### Functions ########################################################################
# Function to rank matrices
rankMEs <-
function( rankMx, inverted = FALSE ) {
if ( !inverted ) {
Mx <- lapply( rankMx, function( y ) apply( y, 2, function( x ) rank( x, na.last = TRUE ) ) )
} else {
Mx <- lapply( rankMx, function( y ) apply( y, 2, function( x ) rank( -x, na.last = FALSE ) ) )
}
return( Mx )
}
# Function to calculate random rank scores
calculateRandomRankScores <-
function( rankMx, totalPerm = 200 ) {
rankMxPerm <- rep( rankMx, round( totalPerm / length( rankMx ) ) )
rankMxPerm2 <- lapply( seq_along( rankMxPerm ), function( i ) {
set.seed( i )
rankMxPerm1 <- data.frame( apply( rankMxPerm[[i]], 2, function( x ) sample( x ) ) )
rownames( rankMxPerm1 ) <- rownames( rankMxPerm[[i]] )
return( rankMxPerm1 )
} )
return( rankMxPerm2 )
}
# Function to z-transform the ABC values
renameDfcolumnsInNestedList <- function( df ) {
lapply( seq_along( df ), function( i ) {
y <- df[[i]]
colnames( y ) <- gsub( 'RMSE_', 'MeanRank_', colnames( y ) )
return( y )
} )
}
# Function to z-transform the ABC values
calculateZABCvalues <- function( data, meanRanks ) {
nVar <- ncol( data[[1]] )
nMethods <- nrow( data[[1]] )
nTests <- length( data )
d <- nVar * nTests
M <- nMethods
m <- ( M + 1 ) / 2
s <- (1 / sqrt(12)) * ( M / sqrt(d) )
ZmeanRanksPerAlg <- ( meanRanks - m ) / s
ZmeanRanksPerAlg[ZmeanRanksPerAlg > 0] <- 0
ABCvalue <- ZmeanRanksPerAlg^2
return( ABCvalue )
}
# Function to calculate combined metrics
calculateCombinedMetrics <-
function( RMSEMX, MEMx, rBiasMx ) {
RRMSEMX <- rankMEs( RMSEMX )
RMEMx <- rankMEs( MEMx )
RrBiasMx <- rankMEs( rBiasMx )
rankErrorsMissings <- mapply( function( r1, r2, r3 ) {
( r1 + r2 + r3 ) / 3 }  , RRMSEMX,  RMEMx, RrBiasMx, SIMPLIFY = FALSE )
rankErrorsMissings <- renameDfcolumnsInNestedList( df = rankErrorsMissings )
ranksumsErrorsMissings <- lapply( rankErrorsMissings, function( x ) apply( x, 1, mean ) )
a <- do.call( abind::abind, c( rankErrorsMissings, list( along = 3 ) ) )
grandMeanrankErrorsMissings <- apply( a, 1:2, median )
MajorityVoteRanksErrorsMissings <- lapply( ranksumsErrorsMissings, function( x ) names( which.min( x ) ) )
PerDatasetRanksums_Missings <- Reduce( "+", ranksumsErrorsMissings ) / length( ranksumsErrorsMissings )
BestPerDatasetRanksums_Missings <- which.min( PerDatasetRanksums_Missings )
zABCvalues <- calculateZABCvalues( data = RRMSEMX, meanRanks = PerDatasetRanksums_Missings )
ABCRanksums <-
ABCanalysis( zABCvalues )
BestRanksumsGrandMean_Missings_ABC_A <-
names( PerDatasetRanksums_Missings )[ABCRanksums$Aind]
return( list(
rankErrorsMissings = rankErrorsMissings,
ranksumsErrorsMissings = ranksumsErrorsMissings,
MajorityVoteRanksErrorsMissings = MajorityVoteRanksErrorsMissings,
grandMeanrankErrorsMissings = grandMeanrankErrorsMissings,
PerDatasetRanksums_Missings = PerDatasetRanksums_Missings,
BestPerDatasetRanksums_Missings = BestPerDatasetRanksums_Missings,
zABCvalues = zABCvalues,
ABCRanksums = ABCRanksums,
BestRanksumsGrandMean_Missings_ABC_A = BestRanksumsGrandMean_Missings_ABC_A,
RRMSEMX = RRMSEMX,
RMEMx = RMEMx,
RrBiasMx = RrBiasMx
) )
}
RMSEinsertedMissings <- lapply( RepeatedSampleImputations, function( x ) {
x[["ImputationRMSEInsertedMissings"]]
} )
MEinsertedMissings <- lapply( RepeatedSampleImputations, function( x ) {
x[["ImputationMEInsertedMissings"]]
} )
rBiasInsertedMissings <- lapply( RepeatedSampleImputations, function( x ) {
x[["ImputationrBiasInsertedMissings"]]
} )
CombinedMetricsInsertedMissings <-
calculateCombinedMetrics( RMSEMX = RMSEinsertedMissings, MEMx = MEinsertedMissings, rBiasMx = rBiasInsertedMissings )
source( paste0( pfad_o, pfad_r, "findBestImputation2.R" ) )
source( paste0( pfad_o, pfad_r, "findBestImputation.R" ) )
RepeatedSampleImputations
BestMethod
source( paste0( pfad_o, pfad_r, "findBestImputation.R" ) )
print( "BestMethodPerDataset" )
BestMethodPerDataset <- lapply( BestMethod, "[[", "BestPerDatasetRanksumsN_insertedMissings" )
print( BestMethodPerDataset )
BestMethod
