dfXmatrix <- DatasetsInitial[[ActualDataset]]
save(dfXmatrix, file = paste0(ActualDataset, ".rda"))
}
)
library( pbmcapply )
#################################### Paths ########################################################################
pfad_o <- "/home/joern/Aktuell/opImputation/"
pfad_u1 <- "09Originale/"
pfad_r <- "12RLibrary/opImputation/R/"
pfad_r2 <- "08AnalyseProgramme/R/"
#################################### Libraries ########################################################################
source( paste0( pfad_o, pfad_r, "create_prepaire_Datasets.R" ) )
source( paste0( pfad_o, pfad_r, "createMissings.R" ) )
source( paste0( pfad_o, pfad_r, "imputeMissings.R" ) )
source( paste0( pfad_o, pfad_r, "eval_with_timeout.R" ) )
source( paste0( pfad_o, pfad_r, "makeAndMeasureRepeatedImputations.R" ) )
source( paste0( pfad_o, pfad_r, "calculateMetrics.R" ) )
source( paste0( pfad_o, pfad_r, "findBestImputation.R" ) )
source( paste0( pfad_o, pfad_r, "makeABCanaylsis.R" ) )
source( paste0( pfad_o, pfad_r, "retrieveZdeltas.R" ) )
source( paste0( pfad_o, pfad_r, "retrieveImputedData.R" ) )
nProc <- max( round( ( parallel::detectCores( ) ) / 10 ), 4 )
# nProc <- 5
################## Switches #######################################
seed <- 100
nIter <- 20
list.of.seeds <- 1:nIter + seed - 1
PercentMissingInitial <- 10
PercentMissing <- 10
probMissing <- PercentMissing / 100
################## Functions #######################################
################## Create data set #######################################
DatasetNames <- c( "UniformRandom3VarDependent",
"UniformRandom3VarIndependent" )
DatasetNames <- c( "CodeinLogMetabolitesUrine",
"LipidsPsychiatricPat",
"QSTpainEJPtransf")
DatasetsInitial <- create_prepaire_Datasets(DatasetNames)
source( paste0( pfad_o, pfad_r, "create_prepaire_Datasets.R" ) )
DatasetsInitial <- create_prepaire_Datasets(DatasetNames)
DatasetsInitial
create_prepaire_Datasets(DatasetNames)
DatasetNames
DatasetsInitial <-
lapply( DatasetNames, function( ActualDataset ) {
switch( ActualDataset,
"Two linear xy data sets forming an X" = {
set.seed( seed )
x <- jitter( seq( from = 0, to = 10, length.out = totalNr ), amount = jitterAmount )
set.seed( seed + 1 )
y1 <- jitter( 1 * x, amount = jitterAmount )
set.seed( seed + 2 )
y2 <- jitter( -1 * x + 10, amount = jitterAmount )
dfXmatrix <- cbind.data.frame( Var1 = x, Var2 = y1, Var3 = y2 )
},
"Two V shaped xy data sets" = {
set.seed( seed )
x <- jitter( seq( from = 0, to = 10, length.out = totalNr ), amount = jitterAmount )
set.seed( seed + 1 )
y1 <- jitter( 1 * abs( x - median( x ) ) + median( x ), amount = jitterAmount )
set.seed( seed + 2 )
y2 <- jitter( max( y1 ) - y1, amount = jitterAmount )
dfXmatrix <- cbind.data.frame( Var1 = x, Var2 = y1, Var3 = y2 )
},
"Two xy data sets, X and circle shaped" = {
set.seed( seed )
theta <- runif( totalNr, min = 0, max = 2 * pi )
set.seed( seed + 1 )
x <- jitter( radius * cos( theta ) + 5, amount = jitterAmount )
set.seed( seed + 2 )
y1 <- jitter( radius * sin( theta ) + 5, amount = jitterAmount )
set.seed( seed + 3 )
y2 <- ifelse( seq_along( x ) %% 2 == 0, jitter( 10 - x, amount = jitterAmount ), jitter( x, amount = jitterAmount ) )
dfXmatrix <- cbind.data.frame( Var1 = x, Var2 = y1, Var3 = y2 )
},
"UniformRandom3VarIndependent" = {
set.seed( seed )
x <- runif( totalNr, min = 0, max = 10 )
set.seed( seed + 1 )
y1 <- runif( totalNr, min = 0, max = 10 )
set.seed( seed + 2 )
y2 <- runif( totalNr, min = 0, max = 10 )
dfXmatrix <- cbind.data.frame( Var1 = x, Var2 = y1, Var3 = y2 )
},
"UniformRandom3VarDependent" = {
set.seed( seed )
x <- runif( totalNr, min = 0, max = 10 )
set.seed( seed )
y1 <- runif( totalNr, min = 0, max = 10 )
set.seed( seed )
y2 <- runif( totalNr, min = 0, max = 10 )
dfXmatrix <- cbind.data.frame( Var1 = x, Var2 = y1, Var3 = y2 )
},
# "CodeinLogMetabolitesUrine" = {
#   CodeinMetabolitesUrine <-
#     data.frame( readxl::read_excel( "/home/joern/Dokumente/DataCleaningDataScience/09Originale/Codein Analytik Urin und Plasma_150206.xlsx" ) )
#   rownames( CodeinMetabolitesUrine ) <- CodeinMetabolitesUrine$`Poly-Id.`
#   CodeinMetabolitesUrine <- CodeinMetabolitesUrine[, c( "MOR", "M3G", "M6G", "COD", "C6G" )]
#   dfXmatrix <- data.frame( CodeinMetabolitesUrine, row.names = NULL )
#   names( dfXmatrix ) <- make.names( colnames(dfXmatrix) )
#   dfXmatrix <- data.frame( apply( dfXmatrix, 2, function( x ) x = log( x ) ) )
# },
# "LipidsPsychiatricPat" = {
#   BiomarkerPsy <-
#     data.frame( readxl::read_excel( "/home/joern/Dokumente/BiomarkerPsychiatrie/09Originale/Daten Biomarkeridentifikation Depression-BipolareStÃ¶rung-ADHS-Demenz.xlsx", sheet = "Zeitpunkt 1 ng mL-1" ) )
#   rownames( BiomarkerPsy ) <- BiomarkerPsy$SecuTrialCode
#   Lipide8 <- c( "S1P", "C16Sphinganin", "C16Cer", "C20Cer", "C24Cer", "C24_1Cer", "C16GluCer", "C16LacCer" )
#   LipidsPsychiatricPat <- subset( BiomarkerPsy, select = Lipide8 )
#   dfXmatrix <- data.frame( LipidsPsychiatricPat, row.names = NULL )
#   names( dfXmatrix ) <- make.names( colnames(dfXmatrix) )
#   dfXmatrix <- data.frame( apply( dfXmatrix, 2, function( x ) x = log( x ) ) )
# },
# "QSTpainEJPtransf" = {
#   QSTSchmerzmodelle <-
#     data.frame( readxl::read_excel( "/home/joern/Dokumente/QSTSchmerzmodelle/09Originale/Daten_Exp_pain_QST.xlsx", sheet = "DatenAnalysiert" ) )
#   QSTSchmerzmodelleOrig <- QSTSchmerzmodelle
#   PainTestsToInvert <- c( "TSACold", "CO2VAS", "LaserVAS", "CDT", "CPT", "MPS", "WUR", "VDT", "DMA" )
#   NewtonTokPa <- c( "PressureThr", "PressureTol" )
#
#   QSTSchmerzmodelle[, names( QSTSchmerzmodelle ) %in% PainTestsToInvert] <-
#     lapply( QSTSchmerzmodelle[, names( QSTSchmerzmodelle ) %in% PainTestsToInvert], function( x ) { -x } )
#   QSTSchmerzmodelle[, names( QSTSchmerzmodelle ) %in% NewtonTokPa] <-
#     lapply( QSTSchmerzmodelle[, names( QSTSchmerzmodelle ) %in% NewtonTokPa], function( x ) { 10 * x } )
#
#   PainTestsNames <- c( "PressureThr", "PressureTol", "TSACold", "ElectricThr", "ElectricTol",
#                        "Co2Thr", "CO2VAS", "LaserThr", "LaserVAS",
#                        "CDT", "WDT", "TSL", "CPT", "HPT", "PPT", "MPT", "MPS", "WUR", "MDT" )
#   PainTests <- subset( QSTSchmerzmodelleOrig, select = PainTestsNames )
#   PainTeststoLogNames <- PainTestsNames
#   PainTestsLog <- PainTests
#   PainTestsLog[, names( PainTestsLog ) %in% PainTeststoLogNames] <-
#     lapply( PainTestsLog[, names( PainTestsLog ) %in% PainTeststoLogNames], function( x, mi = min( x, na.rm = T ) ) { log10( x - mi + 1 ) } )
#
#   PainTests_complete <- na.omit( PainTestsLog )
#   dfXmatrix <- data.frame( PainTests_complete , row.names = NULL)
#   names( dfXmatrix ) <- make.names( colnames(dfXmatrix) )
# },
"FCPSHepta" = {
dfXmatrix <-
data.frame( FCPS::Hepta$Data )
names( dfXmatrix ) <- make.names( colnames( dfXmatrix ) )
}
)
return( dfXmatrix = dfXmatrix )
} )
names( DatasetsInitial ) <- DatasetNames
DatasetsInitial
DatasetNames
source( paste0( pfad_o, pfad_r, "create_prepaire_Datasets.R" ) )
DatasetsInitial <- create_prepaire_Datasets(DatasetNames)
DatasetsInitial
dim(DatasetsInitial$CodeinLogMetabolitesUrine)
names(dim(DatasetsInitial$CodeinLogMetabolitesUrine))
names(DatasetsInitial$CodeinLogMetabolitesUrine)
DatasetsInitial$CodeinLogMetabolitesUrine["MOR"]
dim(DatasetsInitial$LipidsPsychiatricPat)
names(DatasetsInitial$LipidsPsychiatricPat)
dim(DatasetsInitial$QSTpainEJPtransf)
names(DatasetsInitial$QSTpainEJPtransf)
data(CodeinLogMetabolitesUrine)
xx <- data(CodeinLogMetabolitesUrine)
xx
xx[1]
xx[[1]]
xx
xx
xx
xx
xx
xx
load("/home/joern/Aktuell/opImputation/12RLibrary/opImputation/data/CodeinLogMetabolitesUrine.rda")
load("/home/joern/Aktuell/opImputation/12RLibrary/opImputation/data/LipidsPsychiatricPat.rda")
str(xx)
xx <- load(CodeinLogMetabolitesUrine)
CodeinLogMetabolitesUrine
DatasetsInitial
lapply( DatasetNames, function( ActualDataset ) {
dfXmatrix <- DatasetsInitial[[ActualDataset]]
save(dfXmatrix, file = paste0(ActualDataset, ".rda"))
}
)
dfXmatrix
ActualDataset
DatasetsInitial
CodeinLogMetabolitesUrine <- DatasetsInitial$CodeinLogMetabolitesUrine
save(CodeinLogMetabolitesUrine, file = "CodeinLogMetabolitesUrine.rda")
LipidsPsychiatricPat <- DatasetsInitial$LipidsPsychiatricPat
save(LipidsPsychiatricPat, file = "LipidsPsychiatricPat.rda")
QSTpainEJPtransf <- DatasetsInitial$QSTpainEJPtransf
save(QSTpainEJPtransf, file = "QSTpainEJPtransf.rda")
xx <- data(CodeinLogMetabolitesUrine)
xx
str(xx)
data(CodeinLogMetabolitesUrine)
CodeinLogMetabolitesUrine
rm(CodeinLogMetabolitesUrine)
data(CodeinLogMetabolitesUrine)
str(CodeinLogMetabolitesUrine)
CodeinLogMetabolitesUrine
data(CodeinLogMetabolitesUrine)
CodeinLogMetabolitesUrine <- load(file = CodeinLogMetabolitesUrine.rda)
CodeinLogMetabolitesUrine <- load(file = "CodeinLogMetabolitesUrine.rda")
str(CodeinLogMetabolitesUrine)
CodeinLogMetabolitesUrine <- DatasetsInitial$CodeinLogMetabolitesUrine
save(CodeinLogMetabolitesUrine, file = "CodeinLogMetabolitesUrine.rda")
LipidsPsychiatricPat <- DatasetsInitial$LipidsPsychiatricPat
save(LipidsPsychiatricPat, file = "LipidsPsychiatricPat.rda")
QSTpainEJPtransf <- DatasetsInitial$QSTpainEJPtransf
save(QSTpainEJPtransf, file = "QSTpainEJPtransf.rda")
#
# dim(DatasetsInitial$QSTpainEJPtransf)
# names(DatasetsInitial$QSTpainEJPtransf)
#
# DatasetsInitial$QSTpainEJPtransf["MOR"]
################## Imputation methods #######################################
CodeinLogMetabolitesUrine <- load(file = "CodeinLogMetabolitesUrine.rda")
str(CodeinLogMetabolitesUrine)
CodeinLogMetabolitesUrine
CodeinLogMetabolitesUrine
CodeinLogMetabolitesUrine <- DatasetsInitial$CodeinLogMetabolitesUrine
CodeinLogMetabolitesUrine
CodeinLogMetabolitesUrineX <- load(file = "CodeinLogMetabolitesUrine.rda")
str(CodeinLogMetabolitesUrineX)
CodeinLogMetabolitesUrineX
CodeinLogMetabolitesUrine <- DatasetsInitial$CodeinLogMetabolitesUrine
save(CodeinLogMetabolitesUrine, file = "CodeinLogMetabolitesUrine.rda")
rm(CodeinLogMetabolitesUrine)
load(file = "CodeinLogMetabolitesUrine.rda")
View(CodeinLogMetabolitesUrine)
rm(CodeinLogMetabolitesUrine)
data(CodeinLogMetabolitesUrine)
load("/home/joern/Aktuell/opImputation/12RLibrary/opImputation/data/CodeinLogMetabolitesUrine.rda")
# Switches
scalar_imputation_methods <- c("median", "mean", "mode", "rSample")
nonsense_imputation_methods <- c("plus", "plusminus", "factor")
all_imputation_methods <- c("bag", "bag_repeated",
"rf", "rf_repeated", "rf2", "rf2_repeated", "miceRanger", "miceRanger_repeated",
"cart", "cart_repeated",
"linear",
"rSample",
"pmm", "pmm_repeated",
"knn3", "knn5", "knn7", "knn9", "knn10",
"ameliaImp", "ameliaImp_repeated",
"miImp",
scalar_imputation_methods,
nonsense_imputation_methods
)
# Functions
opImputation <- function(Data, seed = 100, nIter = 20, probMissing = 0.1,
ImputationMethods = all_imputation_methods, mnarity = 0,
lowOnly = FALSE, mnarshape = 1, AddSkewnessGM = TRUE) {
list.of.seeds <- 1:nIter + seed - 1
# Impute data sets
RepeatedSampleImputations <- makeAndMeasureRepeatedImputations(
Data = Datasets$UniformRandom3VarIndependent$dfXmatrixInitialMissings,
seeds = list.of.seeds,
probMissing = probMissing
)
# Look at bad imputations
Zdeltas <- retrieveZdeltas(RepeatedSampleImputations = RepeatedSampleImputations)
pZdeltasPlotAvgerage <- createBarplotMeanZDeltas(
rowmeanImputationZDeltaInsertedMissings = Zdeltas$rowmeanImputationZDeltaInsertedMissings,
nonsense_imputation_methods = nonsense_imputation_methods,
scalar_imputation_methods = scalar_imputation_methods
)
pZdeltasPDEraw <- createPDERawZDeltas(
multivarZDeltas = Zdeltas$ImputationZDeltaInsertedMissingsMultivarV,
univarZDeltas = Zdeltas$ImputationZDeltaInsertedMissingsUnivarV,
nonsenseZDeltas = Zdeltas$ImputationZDeltaInsertedMissingsNonsenseV, AddSkewnessGM = TRUE
)
FigZdelta <- cowplot::plot_grid(
pZdeltasPlotAvgerage,
pZdeltasPDEraw,
align = "v", axis = "lr",
labels = LETTERS[1:22],
nrow = 2, rel_heights = c(1, 1)
)
# Find best imputation
MethodsResults <- BestMethod(RepeatedSampleImputations = RepeatedSampleImputations)
print("BestMethodPerDataset")
BestMethodPerDataset <- names(MethodsResults$BestPerDatasetRanksums_insertedMissings)
print(BestMethodPerDataset)
# Retrieve imputed data
ImputedData <- retrieveAveragedImputedData(
Data = Datasets$UniformRandom3VarIndependent$dfXmatrixInitialMissings,
RepeatedSampleImputations = RepeatedSampleImputations
)
# Create ABC plots
ABCres <- makeABCanaylsis(
zABCvalues = MethodsResults$zABCvalues_insertedMissings,
zDelta = Zdeltas$meanImputationZDeltaInsertedMissings
)
FigABC <- cowplot::plot_grid(
ABCres$ABCplot,
ABCres$ZDeltaPerVarPlot,
align = "v", axis = "lr",
labels = LETTERS[1:22],
nrow = 2, rel_heights = c(2, 1)
)
# Return results
return(
list(
RepeatedSampleImputations = RepeatedSampleImputations,
Zdeltas = Zdeltas,
FigZdelta = FigZdelta,
MethodsResults = MethodsResults,
BestMethodPerDataset = BestMethodPerDataset,
ImputedData = ImputedData,
ABCres = ABCres,
FigABC = FigABC
)
)
}
Data = Datasets$
UniformRandom3VarIndependent$
dfXmatrixInitialMissings
Data
# Switches
scalar_imputation_methods <- c("median", "mean", "mode", "rSample")
nonsense_imputation_methods <- c("plus", "plusminus", "factor")
all_imputation_methods <- c("bag", "bag_repeated",
"rf", "rf_repeated", "rf2", "rf2_repeated", "miceRanger", "miceRanger_repeated",
"cart", "cart_repeated",
"linear",
"rSample",
"pmm", "pmm_repeated",
"knn3", "knn5", "knn7", "knn9", "knn10",
"ameliaImp", "ameliaImp_repeated",
"miImp",
scalar_imputation_methods,
nonsense_imputation_methods
)
# Functions
opImputation <- function(Data, seed = 100, nIter = 20, probMissing = 0.1,
ImputationMethods = all_imputation_methods, mnarity = 0,
lowOnly = FALSE, mnarshape = 1, AddSkewnessGM = TRUE) {
list.of.seeds <- 1:nIter + seed - 1
# Impute data sets
RepeatedSampleImputations <- makeAndMeasureRepeatedImputations(
Data = Data,
seeds = list.of.seeds,
probMissing = probMissing
)
# Look at bad imputations
Zdeltas <- retrieveZdeltas(RepeatedSampleImputations = RepeatedSampleImputations)
pZdeltasPlotAvgerage <- createBarplotMeanZDeltas(
rowmeanImputationZDeltaInsertedMissings = Zdeltas$rowmeanImputationZDeltaInsertedMissings,
nonsense_imputation_methods = nonsense_imputation_methods,
scalar_imputation_methods = scalar_imputation_methods
)
pZdeltasPDEraw <- createPDERawZDeltas(
multivarZDeltas = Zdeltas$ImputationZDeltaInsertedMissingsMultivarV,
univarZDeltas = Zdeltas$ImputationZDeltaInsertedMissingsUnivarV,
nonsenseZDeltas = Zdeltas$ImputationZDeltaInsertedMissingsNonsenseV, AddSkewnessGM = TRUE
)
FigZdelta <- cowplot::plot_grid(
pZdeltasPlotAvgerage,
pZdeltasPDEraw,
align = "v", axis = "lr",
labels = LETTERS[1:22],
nrow = 2, rel_heights = c(1, 1)
)
# Find best imputation
MethodsResults <- BestMethod(RepeatedSampleImputations = RepeatedSampleImputations)
print("BestMethodPerDataset")
BestMethodPerDataset <- names(MethodsResults$BestPerDatasetRanksums_insertedMissings)
print(BestMethodPerDataset)
# Retrieve imputed data
ImputedData <- retrieveAveragedImputedData(
Data = Datasets$UniformRandom3VarIndependent$dfXmatrixInitialMissings,
RepeatedSampleImputations = RepeatedSampleImputations
)
# Create ABC plots
ABCres <- makeABCanaylsis(
zABCvalues = MethodsResults$zABCvalues_insertedMissings,
zDelta = Zdeltas$meanImputationZDeltaInsertedMissings
)
FigABC <- cowplot::plot_grid(
ABCres$ABCplot,
ABCres$ZDeltaPerVarPlot,
align = "v", axis = "lr",
labels = LETTERS[1:22],
nrow = 2, rel_heights = c(2, 1)
)
# Return results
return(
list(
RepeatedSampleImputations = RepeatedSampleImputations,
Zdeltas = Zdeltas,
FigZdelta = FigZdelta,
MethodsResults = MethodsResults,
BestMethodPerDataset = BestMethodPerDataset,
ImputedData = ImputedData,
ABCres = ABCres,
FigABC = FigABC
)
)
}
# Switches
scalar_imputation_methods <- c("median", "mean", "mode", "rSample")
nonsense_imputation_methods <- c("plus", "plusminus", "factor")
all_imputation_methods <- c("bag", "bag_repeated",
"rf", "rf_repeated", "rf2", "rf2_repeated", "miceRanger", "miceRanger_repeated",
"cart", "cart_repeated",
"linear",
"rSample",
"pmm", "pmm_repeated",
"knn3", "knn5", "knn7", "knn9", "knn10",
"ameliaImp", "ameliaImp_repeated",
"miImp",
scalar_imputation_methods,
nonsense_imputation_methods
)
# Functions
opImputation <- function(Data, ImputationMethods = all_imputation_methods, seed = 100, nIter = 20,
probMissing = 0.1, mnarity = 0, lowOnly = FALSE, mnarshape = 1, AddSkewnessGM = TRUE) {
list.of.seeds <- 1:nIter + seed - 1
# Impute data sets
RepeatedSampleImputations <- makeAndMeasureRepeatedImputations(
Data = Data,
seeds = list.of.seeds,
probMissing = probMissing
)
# Look at bad imputations
Zdeltas <- retrieveZdeltas(RepeatedSampleImputations = RepeatedSampleImputations)
pZdeltasPlotAvgerage <- createBarplotMeanZDeltas(
rowmeanImputationZDeltaInsertedMissings = Zdeltas$rowmeanImputationZDeltaInsertedMissings,
nonsense_imputation_methods = nonsense_imputation_methods,
scalar_imputation_methods = scalar_imputation_methods
)
pZdeltasPDEraw <- createPDERawZDeltas(
multivarZDeltas = Zdeltas$ImputationZDeltaInsertedMissingsMultivarV,
univarZDeltas = Zdeltas$ImputationZDeltaInsertedMissingsUnivarV,
nonsenseZDeltas = Zdeltas$ImputationZDeltaInsertedMissingsNonsenseV, AddSkewnessGM = TRUE
)
FigZdelta <- cowplot::plot_grid(
pZdeltasPlotAvgerage,
pZdeltasPDEraw,
align = "v", axis = "lr",
labels = LETTERS[1:22],
nrow = 2, rel_heights = c(1, 1)
)
# Find best imputation
MethodsResults <- BestMethod(RepeatedSampleImputations = RepeatedSampleImputations)
print("BestMethodPerDataset")
BestMethodPerDataset <- names(MethodsResults$BestPerDatasetRanksums_insertedMissings)
print(BestMethodPerDataset)
# Retrieve imputed data
ImputedData <- retrieveAveragedImputedData(
Data = Datasets$UniformRandom3VarIndependent$dfXmatrixInitialMissings,
RepeatedSampleImputations = RepeatedSampleImputations
)
# Create ABC plots
ABCres <- makeABCanaylsis(
zABCvalues = MethodsResults$zABCvalues_insertedMissings,
zDelta = Zdeltas$meanImputationZDeltaInsertedMissings
)
FigABC <- cowplot::plot_grid(
ABCres$ABCplot,
ABCres$ZDeltaPerVarPlot,
align = "v", axis = "lr",
labels = LETTERS[1:22],
nrow = 2, rel_heights = c(2, 1)
)
# Return results
return(
list(
RepeatedSampleImputations = RepeatedSampleImputations,
Zdeltas = Zdeltas,
FigZdelta = FigZdelta,
MethodsResults = MethodsResults,
BestMethodPerDataset = BestMethodPerDataset,
ImputedData = ImputedData,
ABCres = ABCres,
FigABC = FigABC
)
)
}
TestImputaion <- opImputation(Data = Datasets$UniformRandom3VarIndependent$dfXmatrixInitialMissings,
ImputationMethods =  c( "plus", "rf2", "median" ))
TestImputaion
MethodsResults
TestImputation2X <- opImputation(Data = create_prepaire_Datasets("Two linear xy data sets forming an X"),
ImputationMethods =  c("rf2", "median", "mean", "mode" ))
TestImputation2X
create_prepaire_Datasets("Two linear xy data sets forming an X")
#################################### Paths ########################################################################
pfad_o <- "/home/joern/Aktuell/opImputation/"
pfad_u1 <- "09Originale/"
pfad_r <- "12RLibrary/opImputation/R/"
pfad_r2 <- "08AnalyseProgramme/R/"
#################################### Libraries ########################################################################
source( paste0( pfad_o, pfad_r, "create_prepaire_Datasets.R" ) )
source( paste0( pfad_o, pfad_r, "createMissings.R" ) )
source( paste0( pfad_o, pfad_r, "imputeMissings.R" ) )
source( paste0( pfad_o, pfad_r, "eval_with_timeout.R" ) )
source( paste0( pfad_o, pfad_r, "makeAndMeasureRepeatedImputations.R" ) )
source( paste0( pfad_o, pfad_r, "calculateMetrics.R" ) )
source( paste0( pfad_o, pfad_r, "findBestImputation.R" ) )
source( paste0( pfad_o, pfad_r, "makeABCanaylsis.R" ) )
source( paste0( pfad_o, pfad_r, "retrieveZdeltas.R" ) )
source( paste0( pfad_o, pfad_r, "retrieveImputedData.R" ) )
TestImputation2X <- opImputation(Data = create_prepaire_Datasets("Two linear xy data sets forming an X"),
ImputationMethods =  c("rf2", "median", "mean", "mode" ))
create_prepaire_Datasets("Two linear xy data sets forming an X")
create_prepaire_Datasets("Two linear xy data sets forming an X")[[1]]
TestImputation2X <- opImputation(Data = create_prepaire_Datasets("Two linear xy data sets forming an X")[[1]],
ImputationMethods =  c("rf2", "median", "mean", "mode" ))
TestImputation2X <- opImputation(Data = create_prepaire_Datasets("Two linear xy data sets forming an X")[[1]],
ImputationMethods =  c("rf2", "median", "mean", "mode" ))
TestImputation2X
list.of.seeds
