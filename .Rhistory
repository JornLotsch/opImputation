# Average imputed data
ImputedDataXAverage <- Reduce( "+", ImputedDataXWithoutData ) / length( ImputedDataXWithoutData )
# Repeat original data to match the dimensions
DataRepeated <- do.call( "rbind.data.frame", replicate( ( dim( ImputedDataXAverage )[1] / nrow( Data ) ), Data, simplify = FALSE ) )
# Replace non-missing values in ImputedDataXAverage with corresponding values from DataRepeated
ImputedDataAverageOrigRestored <- mapply( replaceNonmissingsWithOriginal, ImputedDataXAverage, DataRepeated )
# Combine original 'Data' column with the imputed data
ImputedDataAverage <- cbind.data.frame( Data = ImputedDataX[[1]]$Data, ImputedDataAverageOrigRestored )
return( ImputedDataAverage )
}
# Look at imputation accuracies
Zdeltas <- retrieveZdeltas( RepeatedSampleImputations = RepeatedSampleImputations,
all_imputation_methods = all_imputation_methods,
univariate_imputation_methods = univariate_imputation_methods,
poisened_imputation_methods = poisened_imputation_methods )
# Create ZDalta plots
pZdeltasPlotAvgerage <- createBarplotMeanZDeltas(
ImputationZDeltaInsertedMissingsRaw = Zdeltas$ImputationZDeltaInsertedMissings,
poisened_imputation_methods = poisened_imputation_methods,
univariate_imputation_methods = univariate_imputation_methods,
perfect_imputation_methods = perfect_imputation_methods
)
pGMCPlotAvgerage <- createBarplotMeanGMCs(
ImputationZDeltaInsertedMissingsRaw = Zdeltas$ImputationZDeltaInsertedMissings,
poisened_imputation_methods = poisened_imputation_methods,
univariate_imputation_methods = univariate_imputation_methods,
perfect_imputation_methods = perfect_imputation_methods
)
pZdeltasPDEraw <- createPDERawZDeltas(
multivarZDeltas = Zdeltas$ImputationZDeltaInsertedMissingsMultivarV,
univarZDeltas = Zdeltas$ImputationZDeltaInsertedMissingsUnivarV,
poisenedZDeltas = Zdeltas$ImputationZDeltaInsertedMissingsPoisenedV,
perfectZDeltas = Zdeltas$ImputationZDeltaInsertedMissingsPerfectV
)
pZdeltasPerVar <- createZDeltasPerVarPlot(
meanImputationZDeltaInsertedMissings = Zdeltas$meanImputationZDeltaInsertedMissings
)
# Find best imputation
MethodsResults <- findBestMethod( RepeatedSampleImputations = RepeatedSampleImputations )
BestMethodPerDataset <- gsub(" imputed|Imp", "", names( MethodsResults$BestPerDatasetRanksums_insertedMissings ))
# Retrieve imputed data
ImputedData <- retrieveAveragedImputedData(
Data = Data,
RepeatedSampleImputations = RepeatedSampleImputations
)
# Create ABC plots
pABC <- makeABCanaylsis(
zABCvalues = MethodsResults$zABCvalues_insertedMissings,
poisened_imputation_methods = poisened_imputation_methods
)
# Function to plot the ABC analysis results of the ranking of the impuation methods
makeABCanaylsis <- function( zABCvalues, zDelta = NULL, HighlightPoisenedMethods = TRUE, poisened_imputation_methods, MethodsOrder ) {
ABCsetmembership <- function( x = NULL, ABCres = NULL, num = TRUE ) {
if ( is.null( ABCres ) ) {
ABCres <- ABCanalysis( x )
Ind <- seq_along( x )
} else {
Ind <- sort( c( ABCres$Aind, ABCres$Bind, ABCres$Cind ) )
}
Ind[ABCres$Aind] <- 1
Ind[ABCres$Bind] <- 2
Ind[ABCres$Cind] <- 3
if ( num == FALSE ) {
Ind <- LETTERS[Ind]
}
return( Ind )
}
ABCanalysisWrapper <- function( data ) {
ABCanalysis( data, PlotIt = FALSE )
}
ABCRanksumsInserted <- ABCanalysisWrapper( zABCvalues )
ABCprepareResultsDF <- function( data, ABCres ) {
dfABC <- cbind.data.frame(
rSum = data,
Category = "C",
Method = names( data ),
xloc = 0:( length( data ) - 1 ) / ( length( data ) - 1 )
)
dfABC$Method <- gsub( ' imputed|Imp', '', dfABC$Method )
dfABC$Category <- ABCsetmembership( ABCres = ABCres, num = FALSE )
dfABC <- dfABC[with( dfABC, order( -rSum, Method ) ),]
dfABC$xloc <- sort( dfABC$xloc )
dfABC$Method <- factor( dfABC$Method, levels = dfABC$Method )
return( dfABC )
}
dfABCcat <- ABCprepareResultsDF( data = zABCvalues, ABCres = ABCRanksumsInserted )
dfABCcat$Category1 <- dfABCcat$Category
dfABCcat$Category2 <- dfABCcat$Category
if ( HighlightPoisenedMethods ) {
dfABCcat$Category2[dfABCcat$Method %in% poisened_imputation_methods] <- "poisenedImputation"
}
rep_str <- c(
"A" = myColorsABC[1],
"B" = myColorsABC[2],
"C" = myColorsABC[3],
"poisenedImputation" = myColorsABC[4]
)
dfABCcat$Category1 <- stringr::str_replace_all( dfABCcat$Category1, rep_str )
dfABCcat$Category2 <- stringr::str_replace_all( dfABCcat$Category2, rep_str )
dfABCcat$poisened <- ifelse( dfABCcat$Category2 == myColorsABC[4], myColorsABC[4], NA )
createABCxy <- function( ABCres ) {
ABCx <- ABCres$p
ABCy <- ABCres$ABC
return( data.frame(
ABCx = ABCx,
ABCy = ABCy
) )
}
createABCsetLimits <- function( ABCres ) {
return( data.frame(
x1 = ABCres$B[["Effort"]],
y1 = ABCres$B[["Yield"]],
x2 = ABCres$C[["Effort"]],
y2 = ABCres$C[["Yield"]]
) )
}
dfABCxy <- createABCxy( ABCRanksumsInserted )
dfABCsetLimits <- createABCsetLimits( ABCRanksumsInserted )
ABCplot <- ggplot( ) +
geom_bar( data = dfABCcat,
aes( x = xloc, y = rSum / max( dfABCcat$rSum ), fill = dfABCcat$Category1 ),
stat = "identity",
position = "dodge",
alpha = 0.5
) +
geom_line( data = dfABCxy, aes( x = ABCx, y = ABCy ), linewidth = 1 ) +
scale_x_continuous( breaks = unique( dfABCcat$xloc ), labels = levels( dfABCcat$Method ) ) +
geom_segment( data = dfABCsetLimits, aes( x = x1, y = -.01, xend = x1, yend = y1 ), linetype = "dashed", color = "grey33" ) +
geom_segment( data = dfABCsetLimits, aes( x = -.02, y = y1, xend = x1, yend = y1 ), linetype = "dashed", color = "grey33" ) +
theme_light( ) +
theme( axis.text.x = element_text( angle = 90, vjust = 0.5, hjust = 0 ),
legend.position = c( 0.9, 0.6 ),
legend.background = element_rect( fill = alpha( "white", 0.5 ) ) ) +
scale_y_continuous(
name = "Fraction of sum of largest rank means",
sec.axis = sec_axis( trans = ~. * max( dfABCcat$rSum ), name = "Rank mean" )
) +
scale_x_continuous( position = "top", expand = c( 0, 0 ) ) +
scale_x_continuous(
name = "Fraction of rank means", expand = c( 0, 0 ),
sec.axis = sec_axis( trans = ~. * 1, name = "Imputation method",
breaks = unique( dfABCcat$xloc ),
labels = unique( dfABCcat$Method ) )
) +
scale_fill_identity( name = "Category",
labels = c( "A", "B", "C" ),
breaks = myColorsABC[1:3],
guide = "legend" ) +
labs( title = "ABC analysis of mean methods' ranks", x = "Fraction of rank sums", y = "Type of missing" )
return( ABCplot = ABCplot )
}
# Create ABC plots
pABC <- makeABCanaylsis(
zABCvalues = MethodsResults$zABCvalues_insertedMissings,
poisened_imputation_methods = poisened_imputation_methods
)
pZdeltasMultivarUnivar <-
create_pde_and_qq_plots(allZDeltas = Zdeltas, BestMethodPerDataset,  univariate_imputation_methods, multivariate_imputation_methods)
# Function to find the best univariate mean ZDelta
find_best_mean_z_delta <- function(allZDeltas, imputation_methods) {
which_best_rowmean_z_delta_inserted_missings <-
names(which.min(allZDeltas$rowmeanImputationZDeltaInsertedMissings[gsub(" imputed|Imp", "", names(allZDeltas$rowmeanImputationZDeltaInsertedMissings)) %in% imputation_methods]))
best_z_deltas <- unlist(lapply(allZDeltas$ImputationZDeltaInsertedMissings, function(x) x[row.names(x) == which_best_rowmean_z_delta_inserted_missings,]))
return(list(
which_best_rowmean_z_delta_inserted_missings = which_best_rowmean_z_delta_inserted_missings,
best_z_deltas = best_z_deltas)
)
}
# Function to create a PDE plot and QQ plot of Zdelta values
create_pde_and_qq_plots <- function(allZDeltas, BestMethodPerDataset, univariate_imputation_methods, multivariate_imputation_methods) {
if (BestMethodPerDataset %in% univariate_imputation_methods) {
best_univariate_z_deltas <-
unlist(lapply(allZDeltas$ImputationZDeltaInsertedMissings, function(x) x[gsub(" imputed|Imp", "", rownames(x)) %in% BestMethodPerDataset,]))
} else {
best_univariate_z_deltas <- find_best_mean_z_delta(allZDeltas, imputation_methods = univariate_imputation_methods)
}
if (BestMethodPerDataset %in% multivariate_imputation_methods) {
best_multivariate_z_deltas <-
unlist(lapply(allZDeltas$ImputationZDeltaInsertedMissings, function(x) x[gsub(" imputed|Imp", "", rownames(x)) %in% BestMethodPerDataset,]))
} else {
best_multivariate_z_deltas <- find_best_mean_z_delta(allZDeltas, imputation_methods = multivariate_imputation_methods)
}
# multivariate_z_deltas <- unlist(lapply(allZDeltas$ImputationZDeltaInsertedMissings, function(x) x[gsub(" imputed|Imp", "", rownames(x)) %in% multivariate_imputation_methods,]))
stat.deltas <- ks.test(best_univariate_z_deltas$best_z_deltas, best_multivariate_z_deltas$best_z_deltas)
df.stat.deltas <-rbind.data.frame(
cbind.data.frame(y = 1, x =  best_univariate_z_deltas$best_z_deltas),
cbind.data.frame(y = 2, x =  best_multivariate_z_deltas$best_z_deltas)
)
stat.deltas <- wilcox.test( df.stat.deltas$x ~ df.stat.deltas$y)
pde_univariate_z_deltas <- ParetoDensityEstimation(best_univariate_z_deltas)
pde_multivariate_z_deltas <- ParetoDensityEstimation(best_multivariate_z_deltas)
ImputationVarNamesUnivariate <- ifelse(BestMethodPerDataset %in% univariate_imputation_methods, "Best method", "Best univariate")
ImputationVarNamesMultivariate <- ifelse(BestMethodPerDataset %in% multivariate_imputation_methods, "Best method", "Best multivariate")
df_pde_z_deltas <- rbind.data.frame(
cbind.data.frame(Imputation = ImputationVarNamesUnivariate, x = pde_univariate_z_deltas$kernels, PDE = pde_univariate_z_deltas$paretoDensity),
cbind.data.frame(Imputation = ImputationVarNamesMultivariate, x = pde_multivariate_z_deltas$kernels, PDE = pde_multivariate_z_deltas$paretoDensity)
)
# PDE plots
p_pde_z_deltas <-
ggplot(data = df_pde_z_deltas, aes(x = x, y = PDE, color = Imputation)) +
geom_line() +
theme_light() +
theme(
legend.position = c(0.5, 0.95),
legend.direction = "horizontal",
legend.background = element_rect(colour = "transparent", fill = ggplot2::alpha("white", 0.4))
) +
labs(title = "PDE of raw Zdelta values (multivariate vs. best univariate imputation)", x = "Data", y = "PDE") +
scale_color_manual(values = myColorsZDelta) +
annotate(geom = "text", x = 0.5, y = 0.95 * max(df_pde_z_deltas$PDE),
label = paste0("Significance: p = ", formatC(stat.deltas$p.value, format = "e", digits = 4)))
# QQ plots
df_quantiles <- cbind.data.frame(
BestUnivariate = quantile(univariate_z_deltas, quantiles, na.rm = TRUE),
Multivariate = quantile(multivariate_z_deltas, quantiles, na.rm = TRUE)
)
p_qq <-
ggplot(data = df_quantiles, aes(x = BestUnivariate, y = Multivariate)) +
geom_point(color = "dodgerblue", alpha = 0.6) +
geom_abline(aes(slope = 1, intercept = 0), linetype = 2, color = "salmon") +
theme_light() +
theme(legend.position = c(0.1, 0.9), strip.background = element_rect(fill = "cornsilk"), strip.text = element_text(colour = "black")) +
labs(title = "QQ plot raw Zdelta values (multivariate vs. best univariate imputation)") +
xlim(0, 1) +
ylim(0, 1)
return(list(
p_pde_z_deltas = p_pde_z_deltas,
p_qq = p_qq
))
}
# Compare ZDelate values between multivariate and univariate methods
pZdeltasMultivarUnivar <-
create_pde_and_qq_plots(allZDeltas = Zdeltas,
BestMethodPerDataset = BestMethodPerDataset,
univariate_imputation_methods = univariate_imputation_methods,
multivariate_imputation_methods = multivariate_imputation_methods)
allZDeltas = Zdeltas
BestMethodPerDataset = BestMethodPerDataset
if (BestMethodPerDataset %in% univariate_imputation_methods) {
best_univariate_z_deltas <-
unlist(lapply(allZDeltas$ImputationZDeltaInsertedMissings, function(x) x[gsub(" imputed|Imp", "", rownames(x)) %in% BestMethodPerDataset,]))
} else {
best_univariate_z_deltas <- find_best_mean_z_delta(allZDeltas, imputation_methods = univariate_imputation_methods)
}
best_univariate_z_deltas
if (BestMethodPerDataset %in% multivariate_imputation_methods) {
best_multivariate_z_deltas <-
unlist(lapply(allZDeltas$ImputationZDeltaInsertedMissings, function(x) x[gsub(" imputed|Imp", "", rownames(x)) %in% BestMethodPerDataset,]))
} else {
best_multivariate_z_deltas <- find_best_mean_z_delta(allZDeltas, imputation_methods = multivariate_imputation_methods)
}
best_multivariate_z_deltas
# Function to find the best univariate mean ZDelta
find_best_mean_z_delta <- function(allZDeltas, imputation_methods) {
which_best_rowmean_z_delta_inserted_missings <-
names(which.min(allZDeltas$rowmeanImputationZDeltaInsertedMissings[gsub(" imputed|Imp", "", names(allZDeltas$rowmeanImputationZDeltaInsertedMissings)) %in% imputation_methods]))
best_z_deltas <- unlist(lapply(allZDeltas$ImputationZDeltaInsertedMissings, function(x) x[row.names(x) == which_best_rowmean_z_delta_inserted_missings,]))
return(list(
which_best_rowmean_z_delta_inserted_missings = which_best_rowmean_z_delta_inserted_missings,
best_z_deltas = best_z_deltas)
)
}
# Function to create a PDE plot and QQ plot of Zdelta values
create_pde_and_qq_plots <- function(allZDeltas, BestMethodPerDataset, univariate_imputation_methods, multivariate_imputation_methods) {
if (BestMethodPerDataset %in% univariate_imputation_methods) {
best_univariate_z_deltas <-
unlist(lapply(allZDeltas$ImputationZDeltaInsertedMissings, function(x) x[gsub(" imputed|Imp", "", rownames(x)) %in% BestMethodPerDataset,]))
} else {
best_univariate_z_deltas <- find_best_mean_z_delta(allZDeltas, imputation_methods = univariate_imputation_methods)
}
if (BestMethodPerDataset %in% multivariate_imputation_methods) {
best_multivariate_z_deltas <-
unlist(lapply(allZDeltas$ImputationZDeltaInsertedMissings, function(x) x[gsub(" imputed|Imp", "", rownames(x)) %in% BestMethodPerDataset,]))
} else {
best_multivariate_z_deltas <- find_best_mean_z_delta(allZDeltas, imputation_methods = multivariate_imputation_methods)
}
# multivariate_z_deltas <- unlist(lapply(allZDeltas$ImputationZDeltaInsertedMissings, function(x) x[gsub(" imputed|Imp", "", rownames(x)) %in% multivariate_imputation_methods,]))
stat.deltas <- ks.test(best_univariate_z_deltas$best_z_deltas, best_multivariate_z_deltas$best_z_deltas)
df.stat.deltas <-rbind.data.frame(
cbind.data.frame(y = 1, x =  best_univariate_z_deltas$best_z_deltas),
cbind.data.frame(y = 2, x =  best_multivariate_z_deltas$best_z_deltas)
)
stat.deltas <- wilcox.test( df.stat.deltas$x ~ df.stat.deltas$y)
pde_univariate_z_deltas <- ParetoDensityEstimation(best_univariate_z_deltas$best_z_deltas)
pde_multivariate_z_deltas <- ParetoDensityEstimation(best_multivariate_z_deltas$best_z_deltas)
ImputationVarNamesUnivariate <- ifelse(BestMethodPerDataset %in% univariate_imputation_methods, "Best method", "Best univariate")
ImputationVarNamesMultivariate <- ifelse(BestMethodPerDataset %in% multivariate_imputation_methods, "Best method", "Best multivariate")
df_pde_z_deltas <- rbind.data.frame(
cbind.data.frame(Imputation = ImputationVarNamesUnivariate, x = pde_univariate_z_deltas$kernels, PDE = pde_univariate_z_deltas$paretoDensity),
cbind.data.frame(Imputation = ImputationVarNamesMultivariate, x = pde_multivariate_z_deltas$kernels, PDE = pde_multivariate_z_deltas$paretoDensity)
)
# PDE plots
p_pde_z_deltas <-
ggplot(data = df_pde_z_deltas, aes(x = x, y = PDE, color = Imputation)) +
geom_line() +
theme_light() +
theme(
legend.position = c(0.5, 0.95),
legend.direction = "horizontal",
legend.background = element_rect(colour = "transparent", fill = ggplot2::alpha("white", 0.4))
) +
labs(title = "PDE of raw Zdelta values (multivariate vs. best univariate imputation)", x = "Data", y = "PDE") +
scale_color_manual(values = myColorsZDelta) +
annotate(geom = "text", x = 0.5, y = 0.95 * max(df_pde_z_deltas$PDE),
label = paste0("Significance: p = ", formatC(stat.deltas$p.value, format = "e", digits = 4)))
# QQ plots
df_quantiles <- cbind.data.frame(
BestUnivariate = quantile(univariate_z_deltas, quantiles, na.rm = TRUE),
Multivariate = quantile(multivariate_z_deltas, quantiles, na.rm = TRUE)
)
p_qq <-
ggplot(data = df_quantiles, aes(x = BestUnivariate, y = Multivariate)) +
geom_point(color = "dodgerblue", alpha = 0.6) +
geom_abline(aes(slope = 1, intercept = 0), linetype = 2, color = "salmon") +
theme_light() +
theme(legend.position = c(0.1, 0.9), strip.background = element_rect(fill = "cornsilk"), strip.text = element_text(colour = "black")) +
labs(title = "QQ plot raw Zdelta values (multivariate vs. best univariate imputation)") +
xlim(0, 1) +
ylim(0, 1)
return(list(
p_pde_z_deltas = p_pde_z_deltas,
p_qq = p_qq
))
}
# Compare ZDelate values between multivariate and univariate methods
pZdeltasMultivarUnivar <-
create_pde_and_qq_plots(allZDeltas = Zdeltas,
BestMethodPerDataset = BestMethodPerDataset,
univariate_imputation_methods = univariate_imputation_methods,
multivariate_imputation_methods = multivariate_imputation_methods)
if (BestMethodPerDataset %in% univariate_imputation_methods) {
best_univariate_z_deltas <-
unlist(lapply(allZDeltas$ImputationZDeltaInsertedMissings, function(x) x[gsub(" imputed|Imp", "", rownames(x)) %in% BestMethodPerDataset,]))
} else {
best_univariate_z_deltas <- find_best_mean_z_delta(allZDeltas, imputation_methods = univariate_imputation_methods)
}
if (BestMethodPerDataset %in% multivariate_imputation_methods) {
best_multivariate_z_deltas <-
unlist(lapply(allZDeltas$ImputationZDeltaInsertedMissings, function(x) x[gsub(" imputed|Imp", "", rownames(x)) %in% BestMethodPerDataset,]))
} else {
best_multivariate_z_deltas <- find_best_mean_z_delta(allZDeltas, imputation_methods = multivariate_imputation_methods)
}
# multivariate_z_deltas <- unlist(lapply(allZDeltas$ImputationZDeltaInsertedMissings, function(x) x[gsub(" imputed|Imp", "", rownames(x)) %in% multivariate_imputation_methods,]))
stat.deltas <- ks.test(best_univariate_z_deltas$best_z_deltas, best_multivariate_z_deltas$best_z_deltas)
df.stat.deltas <-rbind.data.frame(
cbind.data.frame(y = 1, x =  best_univariate_z_deltas$best_z_deltas),
cbind.data.frame(y = 2, x =  best_multivariate_z_deltas$best_z_deltas)
)
best_univariate_z_deltas$best_z_deltas
best_multivariate_z_deltas$best_z_deltas
# Function to find the best univariate mean ZDelta
find_best_mean_z_delta <- function(allZDeltas, imputation_methods) {
which_best_rowmean_z_delta_inserted_missings <-
names(which.min(allZDeltas$rowmeanImputationZDeltaInsertedMissings[gsub(" imputed|Imp", "", names(allZDeltas$rowmeanImputationZDeltaInsertedMissings)) %in% imputation_methods]))
best_z_deltas <- unlist(lapply(allZDeltas$ImputationZDeltaInsertedMissings, function(x) x[row.names(x) == which_best_rowmean_z_delta_inserted_missings,]))
return(best_z_deltas = best_z_deltas)
}
if (BestMethodPerDataset %in% univariate_imputation_methods) {
best_univariate_z_deltas <-
unlist(lapply(allZDeltas$ImputationZDeltaInsertedMissings, function(x) x[gsub(" imputed|Imp", "", rownames(x)) %in% BestMethodPerDataset,]))
} else {
best_univariate_z_deltas <- find_best_mean_z_delta(allZDeltas, imputation_methods = univariate_imputation_methods)
}
if (BestMethodPerDataset %in% multivariate_imputation_methods) {
best_multivariate_z_deltas <-
unlist(lapply(allZDeltas$ImputationZDeltaInsertedMissings, function(x) x[gsub(" imputed|Imp", "", rownames(x)) %in% BestMethodPerDataset,]))
} else {
best_multivariate_z_deltas <- find_best_mean_z_delta(allZDeltas, imputation_methods = multivariate_imputation_methods)
}
if (BestMethodPerDataset %in% univariate_imputation_methods) {
best_univariate_z_deltas <-
unlist(lapply(allZDeltas$ImputationZDeltaInsertedMissings, function(x) x[gsub(" imputed|Imp", "", rownames(x)) %in% BestMethodPerDataset,]))
} else {
best_univariate_z_deltas <- find_best_mean_z_delta(allZDeltas, imputation_methods = univariate_imputation_methods)
}
if (BestMethodPerDataset %in% multivariate_imputation_methods) {
best_multivariate_z_deltas <-
unlist(lapply(allZDeltas$ImputationZDeltaInsertedMissings, function(x) x[gsub(" imputed|Imp", "", rownames(x)) %in% BestMethodPerDataset,]))
} else {
best_multivariate_z_deltas <- find_best_mean_z_delta(allZDeltas, imputation_methods = multivariate_imputation_methods)
}
# multivariate_z_deltas <- unlist(lapply(allZDeltas$ImputationZDeltaInsertedMissings, function(x) x[gsub(" imputed|Imp", "", rownames(x)) %in% multivariate_imputation_methods,]))
stat.deltas <- ks.test(best_univariate_z_deltas, best_multivariate_z_deltas)
df.stat.deltas <-rbind.data.frame(
cbind.data.frame(y = 1, x =  best_univariate_z_deltas),
cbind.data.frame(y = 2, x =  best_multivariate_z_deltas)
)
stat.deltas <- wilcox.test( df.stat.deltas$x ~ df.stat.deltas$y)
# Function to find the best univariate mean ZDelta
find_best_mean_z_delta <- function(allZDeltas, imputation_methods) {
which_best_rowmean_z_delta_inserted_missings <-
names(which.min(allZDeltas$rowmeanImputationZDeltaInsertedMissings[gsub(" imputed|Imp", "", names(allZDeltas$rowmeanImputationZDeltaInsertedMissings)) %in% imputation_methods]))
best_z_deltas <- unlist(lapply(allZDeltas$ImputationZDeltaInsertedMissings, function(x) x[row.names(x) == which_best_rowmean_z_delta_inserted_missings,]))
return(best_z_deltas = best_z_deltas)
}
# Function to create a PDE plot and QQ plot of Zdelta values
create_pde_and_qq_plots <- function(allZDeltas, BestMethodPerDataset, univariate_imputation_methods, multivariate_imputation_methods) {
if (BestMethodPerDataset %in% univariate_imputation_methods) {
best_univariate_z_deltas <-
unlist(lapply(allZDeltas$ImputationZDeltaInsertedMissings, function(x) x[gsub(" imputed|Imp", "", rownames(x)) %in% BestMethodPerDataset,]))
} else {
best_univariate_z_deltas <- find_best_mean_z_delta(allZDeltas, imputation_methods = univariate_imputation_methods)
}
if (BestMethodPerDataset %in% multivariate_imputation_methods) {
best_multivariate_z_deltas <-
unlist(lapply(allZDeltas$ImputationZDeltaInsertedMissings, function(x) x[gsub(" imputed|Imp", "", rownames(x)) %in% BestMethodPerDataset,]))
} else {
best_multivariate_z_deltas <- find_best_mean_z_delta(allZDeltas, imputation_methods = multivariate_imputation_methods)
}
# multivariate_z_deltas <- unlist(lapply(allZDeltas$ImputationZDeltaInsertedMissings, function(x) x[gsub(" imputed|Imp", "", rownames(x)) %in% multivariate_imputation_methods,]))
stat.deltas <- ks.test(best_univariate_z_deltas, best_multivariate_z_deltas)
df.stat.deltas <-rbind.data.frame(
cbind.data.frame(y = 1, x =  best_univariate_z_deltas),
cbind.data.frame(y = 2, x =  best_multivariate_z_deltas)
)
stat.deltas <- wilcox.test( df.stat.deltas$x ~ df.stat.deltas$y)
pde_univariate_z_deltas <- ParetoDensityEstimation(best_univariate_z_deltas)
pde_multivariate_z_deltas <- ParetoDensityEstimation(best_multivariate_z_deltas)
ImputationVarNamesUnivariate <- ifelse(BestMethodPerDataset %in% univariate_imputation_methods, "Best method", "Best univariate")
ImputationVarNamesMultivariate <- ifelse(BestMethodPerDataset %in% multivariate_imputation_methods, "Best method", "Best multivariate")
df_pde_z_deltas <- rbind.data.frame(
cbind.data.frame(Imputation = ImputationVarNamesUnivariate, x = pde_univariate_z_deltas$kernels, PDE = pde_univariate_z_deltas$paretoDensity),
cbind.data.frame(Imputation = ImputationVarNamesMultivariate, x = pde_multivariate_z_deltas$kernels, PDE = pde_multivariate_z_deltas$paretoDensity)
)
# PDE plots
p_pde_z_deltas <-
ggplot(data = df_pde_z_deltas, aes(x = x, y = PDE, color = Imputation)) +
geom_line() +
theme_light() +
theme(
legend.position = c(0.5, 0.95),
legend.direction = "horizontal",
legend.background = element_rect(colour = "transparent", fill = ggplot2::alpha("white", 0.4))
) +
labs(title = "PDE of raw Zdelta values (multivariate vs. best univariate imputation)", x = "Data", y = "PDE") +
scale_color_manual(values = myColorsZDelta) +
annotate(geom = "text", x = 0.5, y = 0.95 * max(df_pde_z_deltas$PDE),
label = paste0("Significance: p = ", formatC(stat.deltas$p.value, format = "e", digits = 4)))
# QQ plots
df_quantiles <- cbind.data.frame(
BestUnivariate = quantile(univariate_z_deltas, quantiles, na.rm = TRUE),
Multivariate = quantile(multivariate_z_deltas, quantiles, na.rm = TRUE)
)
p_qq <-
ggplot(data = df_quantiles, aes(x = BestUnivariate, y = Multivariate)) +
geom_point(color = "dodgerblue", alpha = 0.6) +
geom_abline(aes(slope = 1, intercept = 0), linetype = 2, color = "salmon") +
theme_light() +
theme(legend.position = c(0.1, 0.9), strip.background = element_rect(fill = "cornsilk"), strip.text = element_text(colour = "black")) +
labs(title = "QQ plot raw Zdelta values (multivariate vs. best univariate imputation)") +
xlim(0, 1) +
ylim(0, 1)
return(list(
p_pde_z_deltas = p_pde_z_deltas,
p_qq = p_qq
))
}
# Compare ZDelate values between multivariate and univariate methods
pZdeltasMultivarUnivar <-
create_pde_and_qq_plots(allZDeltas = Zdeltas,
BestMethodPerDataset = BestMethodPerDataset,
univariate_imputation_methods = univariate_imputation_methods,
multivariate_imputation_methods = multivariate_imputation_methods)
pZdeltasMultivarUnivar
library(opImputation)
TestImputationIris <- opImputation(Data = iris[,1:4], nProc = 20)
library(opImputation)
TestImputationIris <- opImputation(Data = iris[,1:4], nProc = 20)
TestImputationHepta <- opImputation(Data = data.frame(FCPS::Hepta$Data),
ImputationMethods =  all_imputation_methods, nProc = 20)
8.279
8.279*10^(-2)
TestImputationRandomDependent <- opImputation(Data = dfXmatrixDependent,
ImputationMethods =  all_imputation_methods, nProc = 20)
ImputationMethods
all_imputation_methods
# Switches
univariate_imputation_methods <- c( "median", "mean", "mode", "rSample" )
poisened_imputation_methods <- c( "plus", "plusminus", "factor" )
perfect_imputation_methods <- "tinyNoise"
multivariate_imputation_methods <- c( "bag", "bag_repeated",
"rf_mice", "rf_mice_repeated", "rf_missForest", "rf_missForest_repeated", "miceRanger", "miceRanger_repeated",
"cart", "cart_repeated",
"linear",
"pmm", "pmm_repeated",
"knn3", "knn5", "knn7", "knn9", "knn10",
"ameliaImp", "ameliaImp_repeated",
"miImp"
)
all_imputation_methods <- c( univariate_imputation_methods,
poisened_imputation_methods,
# perfect_imputation_methods,
multivariate_imputation_methods
)
library(opImputation)
TestImputationRandomDependent <- opImputation(Data = dfXmatrixDependent,
ImputationMethods =  all_imputation_methods, nProc = 20)
TestImputationRandomIndependent <- opImputation(Data = dfXmatrixIndependent,
ImputationMethods =  all_imputation_methods, nProc = 20)
TestImputationHepta <- opImputation(Data = data.frame(FCPS::Hepta$Data),
ImputationMethods =  all_imputation_methods, nProc = 20)
library(opImputation)
TestImputationHepta <- opImputation(Data = data.frame(FCPS::Hepta$Data),
ImputationMethods =  all_imputation_methods, nProc = 20)
best_univariate_z_deltas
TestImputation <- opImputation(Data = iris[,1:4],
ImputationMethods =  c("rf_missForest", "median", "plus" ) )
TestImputationIris <- opImputation(Data = iris[,1:4], nProc = 20)
df_pde_z_deltas
df_pde_z_deltas
TestImputationIris <- opImputation(Data = iris[,1:4], nProc = 20)
library(opImputation)
