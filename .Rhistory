BestMethodPerDataset, BestUnivariateMethodPerDataset,
BestMultivariateMethodPerDataset, BestPoisonedMethodPerDataset) {
# Extract zDeltas for the best methods
multivarzDeltas <- unlist(lapply(zDeltas$ImputationzDeltaInsertedMissings, function(x)
x[gsub(" imputed|Imp", "", rownames(x)) %in% BestMultivariateMethodPerDataset, ]))
univarzDeltas <- unlist(lapply(zDeltas$ImputationzDeltaInsertedMissings, function(x)
x[gsub(" imputed|Imp", "", rownames(x)) %in% BestUnivariateMethodPerDataset, ]))
# Extract zDeltas for the best poisoned method, if applicable
if (BestMethodPerDataset %in% poisoned_imputation_methods) {
poisonedzDeltas <- unlist(lapply(zDeltas$ImputationzDeltaInsertedMissings, function(x)
x[gsub(" imputed|Imp", "", rownames(x)) %in% BestPoisonedMethodPerDataset, ]))
} else {
poisonedzDeltas <- NULL
}
return(list(multivarzDeltas = multivarzDeltas,
univarzDeltas = univarzDeltas,
poisonedzDeltas = poisonedzDeltas))
}
# Function to create a PDE plot of zDelta values for best methods
create_z_deltas_multivar_univar_PDE_plot <- function(zDeltas,
BestMethodPerDataset, BestUnivariateMethodPerDataset,
BestMultivariateMethodPerDataset, BestPoisonedMethodPerDataset,
plot_title = "PDE of raw zDelta (best uni/multivariate)",
x_label = "PDE (univariate, multivariate)",
y_label = "PDE (poisoned / calibrating)",
colors = c("#0072B2", "#009E73", "#D55E00", "#F0E442")) {
# Retrieve zDeltas for best method per category
BestzDeltas <- retrieve_z_deltas_for_best_method_per_category(zDeltas,
BestMethodPerDataset, BestUnivariateMethodPerDataset,
BestMultivariateMethodPerDataset, BestPoisonedMethodPerDataset)
multivarzDeltas <- BestzDeltas$multivarzDeltas
univarzDeltas <- BestzDeltas$univarzDeltas
poisonedzDeltas <- BestzDeltas$poisonedzDeltas
# Create PDE plot
dfParetoAll <- generate_PDE_plot_df(multivarzDeltas = multivarzDeltas,
univarzDeltas = univarzDeltas,
poisonedzDeltas = poisonedzDeltas,
calibratingzDeltas = NULL)
PDERawzDeltasBest <- create_z_delta_PDE_plot(dfParetoAll = dfParetoAll)
# Add plot title and axis labels
PDERawzDeltasBest <- PDERawzDeltasBest +
labs(title = plot_title,
x = x_label,
y = y_label)
# Perform statistical tests and add results to the plot
df.stat.deltas <- rbind.data.frame(
cbind.data.frame(y = 1, x = univarzDeltas),
cbind.data.frame(y = 2, x = multivarzDeltas)
)
stat.deltas.W <- suppressMessages(wilcox.test(df.stat.deltas$x ~ df.stat.deltas$y)$p.value)
stat.deltas.CDF <- suppressMessages(twosamples::dts_test(univarzDeltas, multivarzDeltas)["P-Value"])
stat.deltas <- fisher_method(p_values = c(stat.deltas.W, stat.deltas.CDF))
dfStats <- data.frame(
Test = c("Wilcoxon test", "DTS test", "Combination of tests"),
pValue = c(stat.deltas.W, stat.deltas.CDF, stat.deltas),
x = 0.5 * max(dfParetoAll$x),
y = 1
)
dfStats$label <- paste0(dfStats$Test, ": ", formatC(dfStats$pValue, format = "e", digits = 4))
if (BestMethodPerDataset %in% poisoned_imputation_methods) {
dfStats <- rbind.data.frame(
dfStats,
data.frame(Test = NA, pValue = NA, x = 0.5 * max(dfParetoAll$x), y = NA,
label = "A poisoned method is best!")
)
PDERawzDeltasBest <- PDERawzDeltasBest +
geom_line(data = dfParetoAll[dfParetoAll$Category %in% c("Calibrating", "Poisoned"), ],
aes(x = x,
y = PDE / max(dfParetoAll$PDE[dfParetoAll$Category %in% c("Calibrating", "Poisoned")]) *
max(dfParetoAll$PDE[dfParetoAll$Category %in% c("Multivariate", "Univariate")]), color = Category)) +
scale_y_continuous(
name = x_label,
sec.axis = sec_axis(trans = ~. * max(dfParetoAll$PDE[dfParetoAll$Category %in% c("Calibrating", "Poisoned")]) /
max(dfParetoAll$PDE[dfParetoAll$Category %in% c("Multivariate", "Univariate")]), name = y_label)
)
}
dfStats$y <- seq(from = 0.95, by = -0.05, length.out = nrow(dfStats)) *
max(dfParetoAll$PDE[dfParetoAll$Category %in% c("Multivariate", "Univariate")])
PDERawzDeltasBest <- PDERawzDeltasBest +
geom_text(data = dfStats, aes(label = label, x = x, y = y), inherit.aes = FALSE)
return(PDERawzDeltasBest)
}
# Function to create a QQ plot of zDelta values for best methods
create_d_deltas_multivar_univar_QQ_plot <- function(zDeltas,
BestMethodPerDataset,
BestUnivariateMethodPerDataset,
BestMultivariateMethodPerDataset,
BestPoisonedMethodPerDataset,
plot_title = "QQ plot raw zDelta (best methods)") {
# Retrieve zDeltas for best method per category
BestzDeltas <- retrieve_z_deltas_for_best_method_per_category(zDeltas,
BestMethodPerDataset,
BestUnivariateMethodPerDataset,
BestMultivariateMethodPerDataset,
BestPoisonedMethodPerDataset)
multivarzDeltas <- BestzDeltas$multivarzDeltas
univarzDeltas <- BestzDeltas$univarzDeltas
# Create QQ plot
quantiles <- seq(0, 1, 0.01)
df_quantiles <- cbind.data.frame(
BestUnivariate = quantile(univarzDeltas, quantiles, na.rm = TRUE),
Multivariate = quantile(multivarzDeltas, quantiles, na.rm = TRUE)
)
p_qq <- ggplot(data = df_quantiles, aes(x = BestUnivariate, y = Multivariate)) +
geom_point(color = "dodgerblue", alpha = 0.6) +
geom_abline(aes(slope = 1, intercept = 0), linetype = 2, color = "salmon") +
theme_light() +
theme(legend.position = c(0.1, 0.9),
strip.background = element_rect(fill = "cornsilk"),
strip.text = element_text(colour = "black")) +
labs(title = plot_title) +
xlim(0, 1) +
ylim(0, 1)
return(p_qq)
}
if (sum(ImputationMethods %in% univariate_imputation_methods) > 0 &
sum(ImputationMethods %in% multivariate_imputation_methods) > 0) {
pzDeltasMultivarUnivarPDE <- create_z_deltas_multivar_univar_PDE_plot(
zDeltas = zDeltas,
BestMethodPerDataset = BestMethodPerDataset,
BestUnivariateMethodPerDataset = BestUnivariateMethodPerDataset,
BestMultivariateMethodPerDataset = BestMultivariateMethodPerDataset,
BestPoisonedMethodPerDataset = BestPoisonedMethodPerDataset
)
pzDeltasMultivarUnivarQQ <- create_d_deltas_multivar_univar_QQ_plot(
zDeltas = zDeltas,
BestMethodPerDataset = BestMethodPerDataset,
BestUnivariateMethodPerDataset = BestUnivariateMethodPerDataset,
BestMultivariateMethodPerDataset = BestMultivariateMethodPerDataset,
BestPoisonedMethodPerDataset = BestPoisonedMethodPerDataset
)
Fig_zDeltaDistributions_bestMethods <- cowplot::plot_grid(
pzDeltasMultivarUnivarPDE,
pzDeltasMultivarUnivarQQ,
labels = LETTERS[1:2],
nrow = 1,
align = "h",
axis = "tb"
)
}
Fig_opImputationAnalyze <- cowplot::plot_grid(
pABC,
pzDeltasPlotAvgerage,
pzDeltasPerVar,
labels = LETTERS[1:3],
ncol = 1
)
seed = 100
nIter = 20
nProc = nProc <- round( ( parallel::detectCores( ) )  ) - 2
probMissing = 0.1
PValueThresholdForMetrics = 0.1
ImputationRepetitions = 20
Data = iris[,1:4]
PlotIt = TRUE
pfctMtdsInABC = FALSE
overallBestzDelta = FALSE
univariate_imputation_methods <- c( "median", "mean", "mode", "rSample" )
poisoned_imputation_methods <- c( "plus", "plusminus", "factor" )
calibrating_imputation_methods <- c("tinyNoise_0.000001", "tinyNoise_0.00001", "tinyNoise_0.0001", "tinyNoise_0.001", "tinyNoise_0.01",
"tinyNoise_0.05", "tinyNoise_0.1", "tinyNoise_0.2", "tinyNoise_0.5", "tinyNoise_1")
multivariate_imputation_methods <- c( "bag", "bag_repeated",
"rf_mice", "rf_mice_repeated", "rf_missForest", "rf_missForest_repeated", "miceRanger", "miceRanger_repeated",
"cart", "cart_repeated",
"linear",
"pmm", "pmm_repeated",
"knn3", "knn5", "knn7", "knn9", "knn10",
"ameliaImp", "ameliaImp_repeated",
"miImp"
)
all_imputation_methods <- c( univariate_imputation_methods,
poisoned_imputation_methods,
calibrating_imputation_methods,
multivariate_imputation_methods
)
ImputationMethods =all_imputation_methods
radius <- 5
totalNr <- 100
nVars <- 3
dfXmatrix <- NULL
jitterAmount <- 0.3
library(opImputation)
seed = 100
nIter = 20
nProc = nProc <- round( ( parallel::detectCores( ) )  ) - 2
probMissing = 0.1
PValueThresholdForMetrics = 0.1
ImputationRepetitions = 20
Data = iris[,1:4]
PlotIt = TRUE
pfctMtdsInABC = FALSE
overallBestzDelta = FALSE
univariate_imputation_methods <- c( "median", "mean", "mode", "rSample" )
poisoned_imputation_methods <- c( "plus", "plusminus", "factor" )
calibrating_imputation_methods <- c("tinyNoise_0.000001", "tinyNoise_0.00001", "tinyNoise_0.0001", "tinyNoise_0.001", "tinyNoise_0.01",
"tinyNoise_0.05", "tinyNoise_0.1", "tinyNoise_0.2", "tinyNoise_0.5", "tinyNoise_1")
multivariate_imputation_methods <- c( "bag", "bag_repeated",
"rf_mice", "rf_mice_repeated", "rf_missForest", "rf_missForest_repeated", "miceRanger", "miceRanger_repeated",
"cart", "cart_repeated",
"linear",
"pmm", "pmm_repeated",
"knn3", "knn5", "knn7", "knn9", "knn10",
"ameliaImp", "ameliaImp_repeated",
"miImp"
)
all_imputation_methods <- c( univariate_imputation_methods,
poisoned_imputation_methods,
calibrating_imputation_methods,
multivariate_imputation_methods
)
ImputationMethods =all_imputation_methods
radius <- 5
totalNr <- 100
nVars <- 3
dfXmatrix <- NULL
jitterAmount <- 0.3
opImputationAnalyze(Data = iris[,1:4],
ImputationMethods =  c("factor", "median", "plus" ), nProc = nProc)
opImputationAnalyze(Data = iris[,1:4], nProc = nProc)
seed
Missings_Which
dfXmatrixInitialMissings_Which
seq_along(Data)
Data
dfXmatrixInitialMissings_Which
dfXmatrixInitialMissings_Which <- lapply(seq_along(Data), function(i) which(is.na(Data[, i])))
dfXmatrixInitialMissings_Which
Seed = 100
nIter = 20
nProc = nProc <- round( ( parallel::detectCores( ) )  ) - 2
probMissing = 0.1
PValueThresholdForMetrics = 0.1
ImputationRepetitions = 20
Data = iris[,1:4]
PlotIt = TRUE
pfctMtdsInABC = FALSE
overallBestzDelta = FALSE
univariate_imputation_methods <- c( "median", "mean", "mode", "rSample" )
poisoned_imputation_methods <- c( "plus", "plusminus", "factor" )
calibrating_imputation_methods <- c("tinyNoise_0.000001", "tinyNoise_0.00001", "tinyNoise_0.0001", "tinyNoise_0.001", "tinyNoise_0.01",
"tinyNoise_0.05", "tinyNoise_0.1", "tinyNoise_0.2", "tinyNoise_0.5", "tinyNoise_1")
multivariate_imputation_methods <- c( "bag", "bag_repeated",
"rf_mice", "rf_mice_repeated", "rf_missForest", "rf_missForest_repeated", "miceRanger", "miceRanger_repeated",
"cart", "cart_repeated",
"linear",
"pmm", "pmm_repeated",
"knn3", "knn5", "knn7", "knn9", "knn10",
"ameliaImp", "ameliaImp_repeated",
"miImp"
)
all_imputation_methods <- c( univariate_imputation_methods,
poisoned_imputation_methods,
calibrating_imputation_methods,
multivariate_imputation_methods
)
ImputationMethods =all_imputation_methods
radius <- 5
totalNr <- 100
nVars <- 3
dfXmatrix <- NULL
jitterAmount <- 0.3
Seed = 100
nIter = 20
nProc = nProc <- round( ( parallel::detectCores( ) )  ) - 2
probMissing = 0.1
PValueThresholdForMetrics = 0.1
ImputationRepetitions = 20
Data = iris[,1:4]
PlotIt = TRUE
pfctMtdsInABC = FALSE
overallBestzDelta = FALSE
univariate_imputation_methods <- c( "median", "mean", "mode", "rSample" )
poisoned_imputation_methods <- c( "plus", "plusminus", "factor" )
calibrating_imputation_methods <- c("tinyNoise_0.000001", "tinyNoise_0.00001", "tinyNoise_0.0001", "tinyNoise_0.001", "tinyNoise_0.01",
"tinyNoise_0.05", "tinyNoise_0.1", "tinyNoise_0.2", "tinyNoise_0.5", "tinyNoise_1")
multivariate_imputation_methods <- c( "bag", "bag_repeated",
"rf_mice", "rf_mice_repeated", "rf_missForest", "rf_missForest_repeated", "miceRanger", "miceRanger_repeated",
"cart", "cart_repeated",
"linear",
"pmm", "pmm_repeated",
"knn3", "knn5", "knn7", "knn9", "knn10",
"ameliaImp", "ameliaImp_repeated",
"miImp"
)
all_imputation_methods <- c( univariate_imputation_methods,
poisoned_imputation_methods,
calibrating_imputation_methods,
multivariate_imputation_methods
)
ImputationMethods =all_imputation_methods
radius <- 5
totalNr <- 100
nVars <- 3
dfXmatrix <- NULL
jitterAmount <- 0.3
# "Two linear xy data sets forming an X" =
set.seed( seed )
x <- jitter( seq( from = 0, to = 10, length.out = totalNr ), amount = jitterAmount )
set.seed( seed + 1 )
y1 <- jitter( 1 * x, amount = jitterAmount )
set.seed( seed + 2 )
y2 <- jitter( -1 * x + 10, amount = jitterAmount )
dfXmatrixTwolinearXY <- cbind.data.frame( Var1 = x, Var2 = y1, Var3 = y2 )
# "UniformRandom3VarIndependent"
set.seed( seed )
x <- runif( totalNr, min = 0, max = 10 )
set.seed( seed + 1 )
y1 <- runif( totalNr, min = 0, max = 10 )
set.seed( seed + 2 )
y2 <- runif( totalNr, min = 0, max = 10 )
dfXmatrixIndependent <- cbind.data.frame( Var1 = x, Var2 = y1, Var3 = y2 )
# "UniformRandom3VarDependent" = {
set.seed( seed )
x <- runif( totalNr, min = 0, max = 10 )
set.seed( seed )
y1 <- runif( totalNr, min = 0, max = 10 )
set.seed( seed )
y2 <- runif( totalNr, min = 0, max = 10 )
dfXmatrixDependent <- cbind.data.frame( Var1 = x, Var2 = y1, Var3 = y2 )
# "AlmostIdenticalValues" = {
set.seed( seed )
x <- jitter(rep(1, totalNr), amount = 0.0001 * 1)
set.seed( seed + 1 )
y1 <- jitter(rep(1, totalNr), amount = 0.0001 * 1)
set.seed( seed +2 )
y2 <- jitter(rep(1, totalNr), amount = 0.0001 * 1)
dfXmatrixIdent <- cbind.data.frame( Var1 = x, Var2 = y1, Var3 = y2 )
# # Functions
#
# makeBadImputations <- function( x ) {
#   x[!is.na( x )] <- NA
#   return( data.frame( x ) )
# }
#
# # Calculate Groeneveld - Meeden skewness
# skewnessGM <- function( x ) {
#   x <- na.omit( x )
#   n <- length( x )
#   meanX <- mean( x, na.rm = TRUE )
#   medianX <- median( x, na.rm = TRUE )
#   Erw <- sum( abs( x - medianX ) ) / n
#   GM <- ( meanX - medianX ) / Erw
#   return( GM )
# }
#
# list.of.seeds <- 1:nIter + seed - 1
Data = iris[,1:4]
# Selecting imputation methods for missing values
#' @import(parallel)
#' @import(foreach)
#' @import(ggplot2)
#' @import(pbmcapply)
#' @import(methods)
#' @import(cowplot)
#' @importFrom(stats  na.omit   IQR  coef  median  predict  runif  wilcox.test, quantile, pchisq)
#' @importFrom(utils  sessionInfo)
#' @importFrom(caret  preProcess)
#' @importFrom(mice   mice)
#' @importFrom(missForest  missForest)
#' @importFrom(miceRanger  miceRanger  impute)
#' @importFrom(multiUS  KNNimp)
#' @importFrom(Amelia  amelia  amelia.default)
#' @importFrom(mi  mi)
#' @importFrom(reshape2  melt)
#' @importFrom(DataVisualizations  ParetoDensityEstimation)
#' @importFrom(ABCanalysis  ABCanalysis)
#' @importFrom(Rfit rfit)
#' @importFrom(twosamples dts_test)
#' @importFrom(ggh4x facet_grid2)
#' @importFrom(ggrepel geom_text_repel)
#' @importFrom doParallel registerDoParallel stopImplicitCluster
#' @importFrom(tools pskill)
#' @export
# Check if at least two imputation methods are provided
if (length(ImputationMethods) < 2) {
stop(paste0("opImputation: This is a comparative analysis. The number of 'ImputationMethods' must be > 1. Select at least two from: ",
paste(sort(all_imputation_methods), collapse = ", "),
" and enter them as a comma separated list. Execution stopped."))
}
# Check if the input data is numeric
Data <- data.frame(Data)
if (!is.numeric(as.matrix(na.omit(Data)))) {
stop("opImputation: Only numeric data allowed. Execution stopped.")
}
if (missing(Seed)) {
seed <- as.integer(get_seed()[1])
} else {
seed <- Seed
}
list.of.seeds <- 1:nIter + seed - 1
list.of.seeds
RepeatedSampleImputations <- make_and_measure_repeated_imputations(
Data = Data,
seeds = list.of.seeds,
nProc = nProc,
probMissing = probMissing,
ImputationMethods = ImputationMethods,
ImputationRepetitions = ImputationRepetitions,
mnarity = mnarity,
lowOnly = lowOnly,
mnarshape = mnarshape,
PValueThresholdForMetrics = PValueThresholdForMetrics
)
make_and_measure_repeated_imputations <- function(Data, seeds, probMissing, nProc, ImputationMethods, ImputationRepetitions,
PValueThresholdForMetrics = PValueThresholdForMetrics,
mnarity = mnarity, lowOnly = lowOnly, mnarshape = mnarshape) {
# Function to impute data matrices with missing values
imputeData <- function(dfMtx, dfMtxorig, ImputationMethods, ImputationRepetitions, seed) {
lapply(ImputationMethods, function(method) {
dfXmatriximputed <- cbind.data.frame(Data = paste0(method, " imputed"), makeBadImputations(dfMtx))
dfXmatriximputed_list <- data.frame(imputeMissings(x = dfMtx, method = method,
ImputationRepetitions = ImputationRepetitions,
seed = seed,
x_orig = dfMtxorig))
if (identical(dim(dfXmatriximputed_list), dim(dfMtx))) {
dfXmatriximputed <- cbind.data.frame(Data = paste0(method, " imputed"), dfXmatriximputed_list)
}
return(dfXmatriximputed)
})
}
dfXmatrix <- Data
dfXmatrixInitialMissings_Which <- lapply(seq_along(Data), function(i) which(is.na(Data[, i])))
dfXmatrix <- Data
dfXmatrixInitialMissings_Which <- lapply(seq_along(Data), function(i) which(is.na(Data[, i])))
)))
dfXmatrix <- Data
dfXmatrixInitialMissings_Which <- lapply(seq_along(Data), function(i) which(is.na(Data[, i])))
dfXmatrixInsertedMissings_WhichAndData <- create_missings(x = dfXmatrix, Prob = probMissing, seed = seed, mnarity = 0, lowOnly = FALSE, mnarshape = 1)
iNA <- 1
dfXmatrixInsertedMissings_WhichAndData
dfXmatrixInitialMissings_Which
dfXmatrixInsertedMissings_WhichAndData
create_missings
dfXmatrixInsertedMissings_WhichAndData
dfXmatrix <- Data
dfXmatrixInitialMissings_Which <- lapply(seq_along(Data), function(i) which(is.na(Data[, i])))
dfXmatrixInsertedMissings_WhichAndData <- create_missings(x = dfXmatrix, Prob = probMissing, seed = seed, mnarity = 0, lowOnly = FALSE, mnarshape = 1)
iNA <- 1
repeat {
MaxNAs <- max(apply(dfXmatrixInsertedMissings_WhichAndData$missData, 1, function(x) sum(is.na(x))))
if (MaxNAs < ncol(dfXmatrixInsertedMissings_WhichAndData$missData)) break
dfXmatrixInsertedMissings_WhichAndData <- create_missings(x = dfXmatrix, Prob = probMissing, seed = seed + 1000000 * iNA,
mnarity = mnarity, lowOnly = lowOnly, mnarshape = mnarshape)
iNA <- iNA + 1
}
dfXmatrixInsertedMissings <- dfXmatrixInsertedMissings_WhichAndData$missData
dfXmatrixInsertedMissings
dfXmatrixInsertedMissings_Which
dfXmatrixInsertedMissings_Which <- lapply(seq_along(dfXmatrixInsertedMissings_WhichAndData$toDelete),
function(i) setdiff(dfXmatrixInsertedMissings_WhichAndData$toDelete[[i]],
dfXmatrixInitialMissings_Which[[i]]))
dfXmatrixInsertedMissings_Which
dfXmatrixInsertedMissings_Which
dfXmatrixInsertedMissings
dfXmatrixInitialMissings_WhichVariable <- dfXmatrixInitialMissings_Which[length(dfXmatrixInitialMissings_Which) > 0]
dfXmatrixInitialMissings_WhichVariable
length(dfXmatrixInitialMissings_Which) > 0
dfXmatrixInitialMissings_Which
dfXmatrixInitialMissings_WhichVariable
dfXmatrixInsertedMissings_WhichAndData
Data
dfXmatrix
which(lapply(Data,2,function(x) sum(is.na(x))) > 0)
which(apply(Data,2,function(x) sum(is.na(x))) > 0)
apply(Data,2,function(x) sum(is.na(x)))
names(dfXmatrixInitialMissings_Which)
names(dfXmatrixInitialMissings_Which) <- names(Data)
names(dfXmatrixInitialMissings_Which)
dfXmatrixInitialMissings_Which
which(apply(Data,2,function(x) sum(is.na(x))) > 0)
Data
complete_variables <- names(Data)[which(apply(Data,2,function(x) sum(is.na(x))) == 0)]
complete_variables
dfXmatrixInsertedMissings_WhichAndData$toDelete
names(dfXmatrixInitialMissings_Which) <- names(Data)
names(dfXmatrixInsertedMissings_WhichAndData$toDelete) <- names(Data)
complete_variables <- names(Data)[which(apply(Data,2,function(x) sum(is.na(x))) == 0)]
dfXmatrixInsertedMissings_WhichAndData$toDelete[[complete_variables]]
dfXmatrixInsertedMissings_WhichAndData$toDelete[complete_variables]
dfXmatrixInitialMissings_Which
dfXmatrixInsertedMissings_WhichAndData$toDelete[complete_variables] <- integer(0)
dfXmatrixInsertedMissings_WhichAndData$toDelete[complete_variables] <- 1
dfXmatrixInsertedMissings_WhichAndData$toDelete
dfXmatrixInsertedMissings_WhichAndData$toDelete[complete_variables] <- NA
dfXmatrixInsertedMissings_WhichAndData$toDelete
dfXmatrixInitialMissings_Which
str(dfXmatrixInitialMissings_Which)
dfXmatrixInsertedMissings_WhichAndData$toDelete[complete_variables] <- dfXmatrixInitialMissings_Which[complete_variables]
dfXmatrixInsertedMissings_WhichAndData$toDelete
dfXmatrix <- Data
dfXmatrixInitialMissings_Which <- lapply(seq_along(Data), function(i) which(is.na(Data[, i])))
dfXmatrixInsertedMissings_WhichAndData <- create_missings(x = dfXmatrix, Prob = probMissing, seed = seed, mnarity = 0, lowOnly = FALSE, mnarshape = 1)
names(dfXmatrixInitialMissings_Which) <- names(Data)
names(dfXmatrixInsertedMissings_WhichAndData$toDelete) <- names(Data)
complete_variables <- names(Data)[which(apply(Data,2,function(x) sum(is.na(x))) == 0)]
dfXmatrixInsertedMissings_WhichAndData$toDelete[complete_variables] <- dfXmatrixInitialMissings_Which[complete_variables]
dfXmatrixInsertedMissings_WhichAndData$missData[complete_variables] <- Data[complete_variables]
iNA <- 1
repeat {
MaxNAs <- max(apply(dfXmatrixInsertedMissings_WhichAndData$missData, 1, function(x) sum(is.na(x))))
if (MaxNAs < ncol(dfXmatrixInsertedMissings_WhichAndData$missData)) break
dfXmatrixInsertedMissings_WhichAndData <- create_missings(x = dfXmatrix, Prob = probMissing, seed = seed + 1000000 * iNA,
mnarity = mnarity, lowOnly = lowOnly, mnarshape = mnarshape)
iNA <- iNA + 1
}
dfXmatrixInsertedMissings <- dfXmatrixInsertedMissings_WhichAndData$missData
dfXmatrixInsertedMissings_Which <- lapply(seq_along(dfXmatrixInsertedMissings_WhichAndData$toDelete),
function(i) setdiff(dfXmatrixInsertedMissings_WhichAndData$toDelete[[i]],
dfXmatrixInitialMissings_Which[[i]]))
dfXmatrixInsertedMissings
dfXmatrixInsertedMissings_Which
test_only_varibales_with_missings = FALSE
