annotate_methods, overallBestzDelta) {
# Create the base data frame
df <- data.frame(suppressWarnings(reshape2::melt(data)))
df$Method <- gsub(" imputed|Imp", "", rownames(df))
# Order the methods based on the values
MethodsOrder <- df$Method[order(df$value)]
df$Method <- factor(df$Method, levels = MethodsOrder)
# Indicate failed imputations
df$Failed <- ifelse(is.na(df$value), 0.01, NA)
# Assign colors based on method categories
df$color <- "Multivariate"
df$color[df$Method %in% gsub(" imputed", "", poisoned_imputation_methods)] <- "Poisoned"
df$color[df$Method %in% gsub(" imputed", "", univariate_imputation_methods)] <- "Univariate"
df$color[df$Method %in% gsub(" imputed", "", calibrating_imputation_methods)] <- "Calibrating"
df$color <- factor(df$color, levels = c("Multivariate", "Calibrating", "Poisoned", "Univariate"))
names(myColorszDelta) <- levels(df$color)
# Indicate if the method is a calibrating method
df$calibratingMtd <- ifelse(df$color == "Calibrating", "Calibrating methods", "Methods")
df$calibratingMtd <- factor(df$calibratingMtd, levels = c("Calibrating methods", "Methods"))
# Determine the minimum values for the annotation
minmaxPoisoned <- min(df$value[df$color %in% "Poisoned"], na.rm = TRUE)
minmaxUnivariate <- min(df$value[df$color %in% "Univariate"], na.rm = TRUE)
if (overallBestzDelta == FALSE) {
minBest <- df$value[df$Method == BestUniMultivariateMethodPerDataset]
} else {
minBest <- min(df$value[df$Method %in% c(univariate_imputation_methods, multivariate_imputation_methods)], na.rm = TRUE)
annotate_methods[3] <- "Best non-poisoned"
}
# Create the annotation data frame
dfAnnotate <- data.frame(
Methods = annotate_methods,
y = c(minmaxPoisoned, minmaxUnivariate, minBest),
x = c(3, 3, ifelse(length(df$Method %in% c(univariate_imputation_methods, multivariate_imputation_methods)) > 7, 7, 2)),
color = c("salmon", "orange", "darkgreen")
)
return(list(
dfBars = df,
dfAnnotate = dfAnnotate,
myColorszDelta = myColorszDelta
))
}
# Helper function for data frame creation for PDE plot
generate_PDE_plot_df <- function(multivarzDeltas, univarzDeltas, poisonedzDeltas, calibratingzDeltas) {
# Combine all the zDelta values
vzDeltas <- c(multivarzDeltas, univarzDeltas, poisonedzDeltas, calibratingzDeltas)
namesvzDeltas <- c(rep("Multivariate", length(multivarzDeltas)),
rep("Univariate", length(univarzDeltas)),
rep("Poisoned", length(poisonedzDeltas)),
rep("Calibrating", length(calibratingzDeltas)))
df4plot_long <- cbind.data.frame(Category = namesvzDeltas, zDelta = vzDeltas)
df4plot_long <- na.omit(df4plot_long)
# Calculate PDE xy
ParetoDistributions <- lapply(unique(df4plot_long$Category), function(Category) {
Pareto <- DataVisualizations::ParetoDensityEstimation(Data = df4plot_long$zDelta[df4plot_long$Category == Category],
PlotIt = FALSE)
dfPareto <- data.frame(Category = Category, x = Pareto$kernels, PDE = Pareto$paretoDensity)
return(dfPareto)
})
dfParetoAll <- do.call(rbind.data.frame, ParetoDistributions)
dfParetoAll$Category <- factor(dfParetoAll$Category, levels = c("Multivariate", "Calibrating", "Poisoned", "Univariate"))
return(dfParetoAll)
}
# Function to create a bare ZDealta bar plot
create_barplot <- function(data, BestUniMultivariateMethodPerDataset,
title, ylab, annotate_methods,
overallBestzDelta = overallBestzDelta) {
# Data frame creation
df <- generate_barplot_df(
data = data,
BestUniMultivariateMethodPerDataset = BestUniMultivariateMethodPerDataset,
annotate_methods = annotate_methods,
overallBestzDelta = overallBestzDelta
)
df4plot_long <- df$dfBars
dfAnnotate <- df$dfAnnotate
myColorszDelta <- df$myColorszDelta
# Plotting
BarplotMeans <- ggplot(data = df4plot_long, aes(x = Method, y = value)) +
geom_bar(aes(fill = color), stat = "identity", position = "dodge", alpha = 0.5) +
ggh4x::facet_grid2(. ~ calibratingMtd, scales = "free", space = "free_x", independent = "y") +
theme_light() +
theme(
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
legend.position = c(0.9, 0.7),
legend.background = element_rect(fill = alpha("white", 0.5))
) +
labs(title = title, y = ylab, x = NULL, fill = "Imputation") +
scale_fill_manual(values = myColorszDelta) +
geom_hline(yintercept = dfAnnotate$y[1], color = "salmon", linetype = "dashed") +
geom_hline(yintercept = dfAnnotate$y[2], color = "orange", linetype = "dotdash") +
geom_hline(yintercept = dfAnnotate$y[3], color = "darkgreen") +
ggrepel::geom_text_repel(data = dfAnnotate,
aes(label = Methods, x = x, y = y, color = color), inherit.aes = FALSE) +
scale_color_manual(values = myColorszDelta)
if (!sum(is.na(df4plot_long$Failed)) == nrow(df4plot_long)) {
BarplotMeans <- BarplotMeans + geom_point(aes(x = Method, y = Failed), pch = 4)
}
return(BarplotMeans)
}
# Function to create a bare zDelta PDE plot
create_z_delta_PDE_plot <- function(dfParetoAll) {
PDERawzDeltas <- ggplot() +
geom_line(data = dfParetoAll[dfParetoAll$Category %in% c("Multivariate", "Univariate"), ],
aes(x = x, y = PDE, color = Category)) +
theme_light() +
theme(
legend.position = "bottom",
legend.direction = "horizontal",
legend.background = element_rect(colour = "transparent", fill = ggplot2::alpha("white", 0.4))
) +
labs(title = "PDE of raw zDelta values", x = "zDelta", y = "PDE") +
scale_color_manual(values = myColorszDelta)
return(PDERawzDeltas)
}
# Main functions
# Function to create a bar plot of mean zDelta values from iterations
create_barplot_mean_z_deltas <- function(medianImputationzDeltaInsertedMissings, BestUniMultivariateMethodPerDataset, overallBestzDelta) {
rowmedianImputationzDeltaInsertedMissings <- apply(medianImputationzDeltaInsertedMissings, 1, function(x) stats::median(x, na.rm = TRUE))
BarplotMeanzDeltas <- create_barplot(
data = rowmedianImputationzDeltaInsertedMissings,
BestUniMultivariateMethodPerDataset = BestUniMultivariateMethodPerDataset,
title = "1 - zDelta",
ylab = "1 - zDelta",
annotate_methods = c("Best poisoned", "Best univariate", "Best"),
overallBestzDelta = overallBestzDelta
) +
scale_y_continuous(trans = "log10")
return(BarplotMeanzDeltas)
}
# Function to create a sina plot of raw zDelta values
create_z_deltas_per_var_plot <- function(medianImputationzDeltaInsertedMissings) {
rowmedianImputationzDeltaInsertedMissings <- apply(medianImputationzDeltaInsertedMissings, 1, function(x) stats::median(x, na.rm = TRUE))
df <- data.frame(suppressWarnings(reshape2::melt(rowmedianImputationzDeltaInsertedMissings)))
df$Method <- gsub(" imputed|Imp", "", rownames(df))
MethodsOrder <- df$Method[order(df$value)]
zDeltaP <- data.frame(medianImputationzDeltaInsertedMissings)
zDeltaP$Method <- gsub(' imputed|Imp', '', rownames(zDeltaP))
zDeltaP$Method <- factor(zDeltaP$Method, levels = MethodsOrder)
zDeltaP$calibratingMtd <- ifelse(zDeltaP$Method %in% calibrating_imputation_methods, "Calibrating methods", "Methods")
zDeltaP$calibratingMtd <- factor(zDeltaP$calibratingMtd, levels = c("Calibrating methods", "Methods"))
zDelta_long <- suppressWarnings(reshape2::melt(zDeltaP))
zDelta_long$variable <- gsub("zDelta_", "", zDelta_long$variable)
zDelta_long$Failed <- ifelse(is.na(zDelta_long$value), 0.01, NA)
zDeltaPerVarPlot <- ggplot(data = zDelta_long, aes(x = Method, y = value, color = variable)) +
geom_violin() +
geom_jitter(width = 0.05) +
ggh4x::facet_grid2(. ~ calibratingMtd, scales = "free", space = "free_x", independent = "y") +
theme_light() +
theme(
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
legend.position = "top", legend.direction = "horizontal",
legend.background = element_rect(fill = alpha("white", 0.5))
) +
labs(title = "zDelta per variable", x = NULL, y = "Normalized error", color = "Variable") +
guides(colour = guide_legend(nrow = 1)) +
scale_y_continuous(trans = "log10")
if (!sum(is.na(zDelta_long$Failed)) == nrow(zDelta_long)) {
zDeltaPerVarPlot <- zDeltaPerVarPlot + geom_point(aes(x = Method, y = Failed), pch = 4, color = "black")
}
return(zDeltaPerVarPlot)
}
# Create the plots
pzDeltasPlotAvgerage <- create_barplot_mean_z_deltas(
medianImputationzDeltaInsertedMissings = zDeltas$meanImputationzDeltaInsertedMissings,
BestUniMultivariateMethodPerDataset = BestUniMultivariateMethodPerDataset,
overallBestzDelta = overallBestzDelta
)
zDeltas$meanImputationzDeltaInsertedMissings
# Create the plots
pzDeltasPlotAvgerage <- create_barplot_mean_z_deltas(
medianImputationzDeltaInsertedMissings = zDeltas$medianImputationzDeltaInsertedMissings,
BestUniMultivariateMethodPerDataset = BestUniMultivariateMethodPerDataset,
overallBestzDelta = overallBestzDelta
)
pzDeltasPlotAvgerage
pzDeltasPerVar <- create_z_deltas_per_var_plot(
medianImputationzDeltaInsertedMissings = zDeltas$medianImputationzDeltaInsertedMissings
)
pABC <- make_ABC_anaylsis(
zABCvalues = MethodsResults$zABCvalues_insertedMissings
)
# Function to plot the ABC analysis results of the ranking of the imputation methods
make_ABC_anaylsis <- function(zABCvalues, HighlightPoisonedMethods = TRUE) {
# Function to mark the ABC set membership of the items
ABC_set_membership <- function(x = NULL, ABCres = NULL, num = TRUE) {
if (is.null(ABCres)) {
ABCres <- ABCanalysis(x)
Ind <- seq_along(x)
} else {
Ind <- sort(c(ABCres$Aind, ABCres$Bind, ABCres$Cind))
}
Ind[ABCres$Aind] <- 1
Ind[ABCres$Bind] <- 2
Ind[ABCres$Cind] <- 3
if (num == FALSE) {
Ind <- LETTERS[Ind]
}
return(Ind)
}
# Function to prepare the data frame for the bar plot of the item ABC zDelta values
ABC_prepare_results_df <- function(data, ABCres) {
dfABC <- cbind.data.frame(
rSum = data,
Category = "C",
Method = names(data),
xloc = 0:(length(data) - 1) / (length(data) - 1)
)
dfABC$Method <- gsub(' imputed|Imp', '', dfABC$Method)
dfABC$Category <- ABC_set_membership(ABCres = ABCres, num = FALSE)
dfABC <- dfABC[with(dfABC, order(-rSum, Method)), ]
dfABC$xloc <- sort(dfABC$xloc)
dfABC$Method <- factor(dfABC$Method, levels = dfABC$Method)
return(dfABC)
}
# Simple string replacement function
replaceString <- function(x, replaceList) {
where <- match(x, replaceList$old)
new <- replaceList$new[where]
return(new)
}
# Perform ABC analysis
ABCRanksumsInserted <- ABCanalysis(zABCvalues, PlotIt = FALSE)
# Make the data frames for the bar plot
dfABCcat <- ABC_prepare_results_df(data = zABCvalues, ABCres = ABCRanksumsInserted)
dfABCcat$Category1 <- dfABCcat$Category
if (HighlightPoisonedMethods) {
dfABCcat$Category1[dfABCcat$Method %in% poisoned_imputation_methods] <- "poisonedImputation"
}
rep_list <- list(old = c("A", "B", "C", "poisonedImputation"),
new = myColorsABC[1:4])
names(myColorsABC) <- rep_list$old
dfABCcat$Category1 <- replaceString(dfABCcat$Category1, rep_list)
dfABCcat$poisoned <- ifelse(dfABCcat$Category1 == myColorsABC[4], myColorsABC[4], NA)
# Make the ABC plot
ABCplot <- ggplot() +
geom_bar(data = dfABCcat,
aes(x = xloc, y = rSum / max(rSum),
fill = Category,
color = poisoned),
stat = "identity",
position = "dodge",
alpha = 0.5) +
scale_x_continuous(breaks = unique(dfABCcat$xloc), labels = levels(dfABCcat$Method), expand = c(0, 0)) +
theme_light() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
legend.position = c(0.9, 0.6),
legend.background = element_rect(fill = alpha("white", 0.5))) +
scale_fill_manual(values = myColorsABC) +
scale_color_manual(values = c("red", NA), labels = c("Poisoned method", "True method")) +
labs(title = "ABC analysis of mean methods' ranks", x = NULL, y = "Fraction of sum of zR values",
fill = "Category", color = "Method type")
# Return the plot
return(ABCplot = ABCplot)
}
pABC <- make_ABC_anaylsis(
zABCvalues = MethodsResults$zABCvalues_insertedMissings
)
if (sum(ImputationMethods %in% univariate_imputation_methods) > 0 &
sum(ImputationMethods %in% multivariate_imputation_methods) > 0) {
pzDeltasMultivarUnivarPDE <- create_z_deltas_multivar_univar_PDE_plot(
zDeltas = zDeltas,
BestMethodPerDataset = BestMethodPerDataset,
BestUnivariateMethodPerDataset = BestUnivariateMethodPerDataset,
BestMultivariateMethodPerDataset = BestMultivariateMethodPerDataset,
BestPoisonedMethodPerDataset = BestPoisonedMethodPerDataset
)
pzDeltasMultivarUnivarQQ <- create_d_deltas_multivar_univar_QQ_plot(
zDeltas = zDeltas,
BestMethodPerDataset = BestMethodPerDataset,
BestUnivariateMethodPerDataset = BestUnivariateMethodPerDataset,
BestMultivariateMethodPerDataset = BestMultivariateMethodPerDataset,
BestPoisonedMethodPerDataset = BestPoisonedMethodPerDataset
)
Fig_zDeltaDistributions_bestMethods <- cowplot::plot_grid(
pzDeltasMultivarUnivarPDE,
pzDeltasMultivarUnivarQQ,
labels = LETTERS[1:2],
nrow = 1,
align = "h",
axis = "tb"
)
}
# Function to combine p-values
fisher_method <- function(p_values) {
p_values <- pmax(pmin(p_values, 1), 0)
chi_squared_statistic <- -2 * sum(log(p_values))
degrees_of_freedom <- 2 * length(p_values)
combined_p_value <- 1 - pchisq(chi_squared_statistic, df = degrees_of_freedom)
return(combined_p_value)
}
# Function to find best method per category
retrieve_z_deltas_for_best_method_per_category <- function(zDeltas,
BestMethodPerDataset, BestUnivariateMethodPerDataset,
BestMultivariateMethodPerDataset, BestPoisonedMethodPerDataset) {
# Extract zDeltas for the best methods
multivarzDeltas <- unlist(lapply(zDeltas$ImputationzDeltaInsertedMissings, function(x)
x[gsub(" imputed|Imp", "", rownames(x)) %in% BestMultivariateMethodPerDataset, ]))
univarzDeltas <- unlist(lapply(zDeltas$ImputationzDeltaInsertedMissings, function(x)
x[gsub(" imputed|Imp", "", rownames(x)) %in% BestUnivariateMethodPerDataset, ]))
# Extract zDeltas for the best poisoned method, if applicable
if (BestMethodPerDataset %in% poisoned_imputation_methods) {
poisonedzDeltas <- unlist(lapply(zDeltas$ImputationzDeltaInsertedMissings, function(x)
x[gsub(" imputed|Imp", "", rownames(x)) %in% BestPoisonedMethodPerDataset, ]))
} else {
poisonedzDeltas <- NULL
}
return(list(multivarzDeltas = multivarzDeltas,
univarzDeltas = univarzDeltas,
poisonedzDeltas = poisonedzDeltas))
}
# Function to create a PDE plot of zDelta values for best methods
create_z_deltas_multivar_univar_PDE_plot <- function(zDeltas,
BestMethodPerDataset, BestUnivariateMethodPerDataset,
BestMultivariateMethodPerDataset, BestPoisonedMethodPerDataset,
plot_title = "PDE of raw zDelta (best uni/multivariate)",
x_label = "PDE (univariate, multivariate)",
y_label = "PDE (poisoned / calibrating)",
colors = c("#0072B2", "#009E73", "#D55E00", "#F0E442")) {
# Retrieve zDeltas for best method per category
BestzDeltas <- retrieve_z_deltas_for_best_method_per_category(zDeltas,
BestMethodPerDataset, BestUnivariateMethodPerDataset,
BestMultivariateMethodPerDataset, BestPoisonedMethodPerDataset)
multivarzDeltas <- BestzDeltas$multivarzDeltas
univarzDeltas <- BestzDeltas$univarzDeltas
poisonedzDeltas <- BestzDeltas$poisonedzDeltas
# Create PDE plot
dfParetoAll <- generate_PDE_plot_df(multivarzDeltas = multivarzDeltas,
univarzDeltas = univarzDeltas,
poisonedzDeltas = poisonedzDeltas,
calibratingzDeltas = NULL)
PDERawzDeltasBest <- create_z_delta_PDE_plot(dfParetoAll = dfParetoAll)
# Add plot title and axis labels
PDERawzDeltasBest <- PDERawzDeltasBest +
labs(title = plot_title,
x = x_label,
y = y_label)
# Perform statistical tests and add results to the plot
df.stat.deltas <- rbind.data.frame(
cbind.data.frame(y = 1, x = univarzDeltas),
cbind.data.frame(y = 2, x = multivarzDeltas)
)
stat.deltas.W <- suppressMessages(wilcox.test(df.stat.deltas$x ~ df.stat.deltas$y)$p.value)
stat.deltas.CDF <- suppressMessages(twosamples::dts_test(univarzDeltas, multivarzDeltas)["P-Value"])
stat.deltas <- fisher_method(p_values = c(stat.deltas.W, stat.deltas.CDF))
dfStats <- data.frame(
Test = c("Wilcoxon test", "DTS test", "Combination of tests"),
pValue = c(stat.deltas.W, stat.deltas.CDF, stat.deltas),
x = 0.5 * max(dfParetoAll$x),
y = 1
)
dfStats$label <- paste0(dfStats$Test, ": ", formatC(dfStats$pValue, format = "e", digits = 4))
if (BestMethodPerDataset %in% poisoned_imputation_methods) {
dfStats <- rbind.data.frame(
dfStats,
data.frame(Test = NA, pValue = NA, x = 0.5 * max(dfParetoAll$x), y = NA,
label = "A poisoned method is best!")
)
PDERawzDeltasBest <- PDERawzDeltasBest +
geom_line(data = dfParetoAll[dfParetoAll$Category %in% c("Calibrating", "Poisoned"), ],
aes(x = x,
y = PDE / max(dfParetoAll$PDE[dfParetoAll$Category %in% c("Calibrating", "Poisoned")]) *
max(dfParetoAll$PDE[dfParetoAll$Category %in% c("Multivariate", "Univariate")]), color = Category)) +
scale_y_continuous(
name = x_label,
sec.axis = sec_axis(trans = ~. * max(dfParetoAll$PDE[dfParetoAll$Category %in% c("Calibrating", "Poisoned")]) /
max(dfParetoAll$PDE[dfParetoAll$Category %in% c("Multivariate", "Univariate")]), name = y_label)
)
}
dfStats$y <- seq(from = 0.95, by = -0.05, length.out = nrow(dfStats)) *
max(dfParetoAll$PDE[dfParetoAll$Category %in% c("Multivariate", "Univariate")])
PDERawzDeltasBest <- PDERawzDeltasBest +
geom_text(data = dfStats, aes(label = label, x = x, y = y), inherit.aes = FALSE)
return(PDERawzDeltasBest)
}
# Function to create a QQ plot of zDelta values for best methods
create_d_deltas_multivar_univar_QQ_plot <- function(zDeltas,
BestMethodPerDataset,
BestUnivariateMethodPerDataset,
BestMultivariateMethodPerDataset,
BestPoisonedMethodPerDataset,
plot_title = "QQ plot raw zDelta (best methods)") {
# Retrieve zDeltas for best method per category
BestzDeltas <- retrieve_z_deltas_for_best_method_per_category(zDeltas,
BestMethodPerDataset,
BestUnivariateMethodPerDataset,
BestMultivariateMethodPerDataset,
BestPoisonedMethodPerDataset)
multivarzDeltas <- BestzDeltas$multivarzDeltas
univarzDeltas <- BestzDeltas$univarzDeltas
# Create QQ plot
quantiles <- seq(0, 1, 0.01)
df_quantiles <- cbind.data.frame(
BestUnivariate = quantile(univarzDeltas, quantiles, na.rm = TRUE),
Multivariate = quantile(multivarzDeltas, quantiles, na.rm = TRUE)
)
p_qq <- ggplot(data = df_quantiles, aes(x = BestUnivariate, y = Multivariate)) +
geom_point(color = "dodgerblue", alpha = 0.6) +
geom_abline(aes(slope = 1, intercept = 0), linetype = 2, color = "salmon") +
theme_light() +
theme(legend.position = c(0.1, 0.9),
strip.background = element_rect(fill = "cornsilk"),
strip.text = element_text(colour = "black")) +
labs(title = plot_title) +
xlim(0, 1) +
ylim(0, 1)
return(p_qq)
}
if (sum(ImputationMethods %in% univariate_imputation_methods) > 0 &
sum(ImputationMethods %in% multivariate_imputation_methods) > 0) {
pzDeltasMultivarUnivarPDE <- create_z_deltas_multivar_univar_PDE_plot(
zDeltas = zDeltas,
BestMethodPerDataset = BestMethodPerDataset,
BestUnivariateMethodPerDataset = BestUnivariateMethodPerDataset,
BestMultivariateMethodPerDataset = BestMultivariateMethodPerDataset,
BestPoisonedMethodPerDataset = BestPoisonedMethodPerDataset
)
pzDeltasMultivarUnivarQQ <- create_d_deltas_multivar_univar_QQ_plot(
zDeltas = zDeltas,
BestMethodPerDataset = BestMethodPerDataset,
BestUnivariateMethodPerDataset = BestUnivariateMethodPerDataset,
BestMultivariateMethodPerDataset = BestMultivariateMethodPerDataset,
BestPoisonedMethodPerDataset = BestPoisonedMethodPerDataset
)
Fig_zDeltaDistributions_bestMethods <- cowplot::plot_grid(
pzDeltasMultivarUnivarPDE,
pzDeltasMultivarUnivarQQ,
labels = LETTERS[1:2],
nrow = 1,
align = "h",
axis = "tb"
)
}
Fig_opImputationAnalyze <- cowplot::plot_grid(
pABC,
pzDeltasPlotAvgerage,
pzDeltasPerVar,
labels = LETTERS[1:3],
ncol = 1
)
seed = 100
nIter = 20
nProc = nProc <- round( ( parallel::detectCores( ) )  ) - 2
probMissing = 0.1
PValueThresholdForMetrics = 0.1
ImputationRepetitions = 20
Data = iris[,1:4]
PlotIt = TRUE
pfctMtdsInABC = FALSE
overallBestzDelta = FALSE
univariate_imputation_methods <- c( "median", "mean", "mode", "rSample" )
poisoned_imputation_methods <- c( "plus", "plusminus", "factor" )
calibrating_imputation_methods <- c("tinyNoise_0.000001", "tinyNoise_0.00001", "tinyNoise_0.0001", "tinyNoise_0.001", "tinyNoise_0.01",
"tinyNoise_0.05", "tinyNoise_0.1", "tinyNoise_0.2", "tinyNoise_0.5", "tinyNoise_1")
multivariate_imputation_methods <- c( "bag", "bag_repeated",
"rf_mice", "rf_mice_repeated", "rf_missForest", "rf_missForest_repeated", "miceRanger", "miceRanger_repeated",
"cart", "cart_repeated",
"linear",
"pmm", "pmm_repeated",
"knn3", "knn5", "knn7", "knn9", "knn10",
"ameliaImp", "ameliaImp_repeated",
"miImp"
)
all_imputation_methods <- c( univariate_imputation_methods,
poisoned_imputation_methods,
calibrating_imputation_methods,
multivariate_imputation_methods
)
ImputationMethods =all_imputation_methods
radius <- 5
totalNr <- 100
nVars <- 3
dfXmatrix <- NULL
jitterAmount <- 0.3
library(opImputation)
seed = 100
nIter = 20
nProc = nProc <- round( ( parallel::detectCores( ) )  ) - 2
probMissing = 0.1
PValueThresholdForMetrics = 0.1
ImputationRepetitions = 20
Data = iris[,1:4]
PlotIt = TRUE
pfctMtdsInABC = FALSE
overallBestzDelta = FALSE
univariate_imputation_methods <- c( "median", "mean", "mode", "rSample" )
poisoned_imputation_methods <- c( "plus", "plusminus", "factor" )
calibrating_imputation_methods <- c("tinyNoise_0.000001", "tinyNoise_0.00001", "tinyNoise_0.0001", "tinyNoise_0.001", "tinyNoise_0.01",
"tinyNoise_0.05", "tinyNoise_0.1", "tinyNoise_0.2", "tinyNoise_0.5", "tinyNoise_1")
multivariate_imputation_methods <- c( "bag", "bag_repeated",
"rf_mice", "rf_mice_repeated", "rf_missForest", "rf_missForest_repeated", "miceRanger", "miceRanger_repeated",
"cart", "cart_repeated",
"linear",
"pmm", "pmm_repeated",
"knn3", "knn5", "knn7", "knn9", "knn10",
"ameliaImp", "ameliaImp_repeated",
"miImp"
)
all_imputation_methods <- c( univariate_imputation_methods,
poisoned_imputation_methods,
calibrating_imputation_methods,
multivariate_imputation_methods
)
ImputationMethods =all_imputation_methods
radius <- 5
totalNr <- 100
nVars <- 3
dfXmatrix <- NULL
jitterAmount <- 0.3
opImputationAnalyze(Data = iris[,1:4],
ImputationMethods =  c("factor", "median", "plus" ), nProc = nProc)
opImputationAnalyze(Data = iris[,1:4], nProc = nProc)
seed
