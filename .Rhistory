pZdeltasPlotAvgerage <- createBarplotMeanZDeltas(rowmeanImputationZDeltaInsertedMissings = Zdeltas$rowmeanImputationZDeltaInsertedMissings,
nonsense_imputation_methods = nonsense_imputation_methods,
scalar_imputation_methods = scalar_imputation_methods)
pZdeltasPDEraw <-  createPDERawZDeltas(multivarZDeltas = Zdeltas$skewnessGMZDeltaInsertedMissingsMultivarV,
univarZDeltas = Zdeltas$ImputationZDeltaInsertedMissingsUnivarV,
nonsenseZDeltas = Zdeltas$ImputationZDeltaInsertedMissingsNonsenseV, AddSkewnessGM = TRUE)
Zdeltas
Zdeltas$skewnessGMZDeltaInsertedMissingsMultivarV
Zdeltas$ImputationZDeltaInsertedMissingsUnivarV
Zdeltas$skewnessGMZDeltaInsertedMissingsMultivarV
multivarZDeltas = Zdeltas$ImputationZDeltaInsertedMissingsMultivarV
pZdeltasPDEraw <-  createPDERawZDeltas(multivarZDeltas = Zdeltas$ImputationZDeltaInsertedMissingsMultivarV,
univarZDeltas = Zdeltas$ImputationZDeltaInsertedMissingsUnivarV,
nonsenseZDeltas = Zdeltas$ImputationZDeltaInsertedMissingsNonsenseV, AddSkewnessGM = TRUE)
Zdeltas$ImputationZDeltaInsertedMissingsMultivarV
Zdeltas$ImputationZDeltaInsertedMissingsUnivarV
Zdeltas$ImputationZDeltaInsertedMissingsNonsenseV
multivarZDeltas = Zdeltas$ImputationZDeltaInsertedMissingsMultivarV
univarZDeltas = Zdeltas$ImputationZDeltaInsertedMissingsUnivarV
nonsenseZDeltas = Zdeltas$ImputationZDeltaInsertedMissingsNonsenseV
df4plot_long <- rbind.data.frame(
cbind.data.frame( Category = "Multivariate", Zdelta = multivarZDeltas ),
cbind.data.frame( Category = "Univariate", Zdelta = univarZDeltas ),
cbind.data.frame( Category = "Poisened", Zdelta = nonsenseZDeltas )
)
df4plot_long
# Calculate PDE xy
ParetoDistributions <- lapply( unique( df4plot_long$Category ), function( Category ) {
Pareto <- DataVisualizations::ParetoDensityEstimation( Data = df4plot_long$Zdelta[df4plot_long$Category == Category], PlotIt = FALSE )
dfPareto <- data.frame( Category = Category, x = Pareto$kernels, y = Pareto$paretoDensity )
return( dfPareto )
} )
dfParetoAll <- do.call( rbind.data.frame, ParetoDistributions )
PDERawZDeltas <- ggplot( data = dfParetoAll, aes( x = x, y = y, color = Category ) ) +
geom_line( ) +
theme_light( ) +
theme(
legend.position = "bottom",
legend.direction = "horizontal",
legend.background = element_rect( colour = "transparent", fill = ggplot2::alpha( "white", 0.4 ) )
) +
labs( title = "PDE of raw Zdelta values", x = "Data", y = "PDE" )
if ( AddSkewnessGM == TRUE ) {
skewnessGMZDeltaInsertedMissingsMultivarV <- round( skewnessGM( ImputationZDeltaInsertedMissingsMultivarV ), 3 )
skewnessGMZDeltaInsertedMissingsUnivarV <- round( skewnessGM( ImputationZDeltaInsertedMissingsUnivarV ), 3 )
skewnessGMZDeltaInsertedMissingsNonsenseV <- round( skewnessGM( ImputationZDeltaInsertedMissingsNonsenseV ), 3 )
PDERawZDeltas <- PDERawZDeltas +
annotate( "text", x = Inf, y = Inf, hjust = 1.1, vjust = 1.1,
label = paste0( "GMC\n", "Multivariate: ", skewnessGMZDeltaInsertedMissingsMultivarV, "\n",
"Univariate: ", skewnessGMZDeltaInsertedMissingsUnivarV, "\n",
"Poisened: ", skewnessGMZDeltaInsertedMissingsNonsenseV, "\n" ) )
}
PDERawZDeltas
pZdeltasPDEraw <-  createPDERawZDeltas(multivarZDeltas = Zdeltas$ImputationZDeltaInsertedMissingsMultivarV,
univarZDeltas = Zdeltas$ImputationZDeltaInsertedMissingsUnivarV,
nonsenseZDeltas = Zdeltas$ImputationZDeltaInsertedMissingsNonsenseV, AddSkewnessGM = TRUE)
source( paste0( pfad_o, pfad_r, "retrieveZdeltas.R" ) )
pZdeltasPDEraw <-  createPDERawZDeltas(multivarZDeltas = Zdeltas$ImputationZDeltaInsertedMissingsMultivarV,
univarZDeltas = Zdeltas$ImputationZDeltaInsertedMissingsUnivarV,
nonsenseZDeltas = Zdeltas$ImputationZDeltaInsertedMissingsNonsenseV, AddSkewnessGM = TRUE)
FigZdelta <-
cowplot::plot_grid(
pZdeltasPlotAvgerage,
pZdeltasPDEraw,
align = "v", axis = "lr",
labels = LETTERS[1:22],
nrow = 2, rel_heights = c( 1, 1 )
)
print(FigZdelta)
MethodsResults <- BestMethod(RepeatedSampleImputations = RepeatedSampleImputations)
source( paste0( pfad_o, pfad_r, "findBestImputation.R" ) )
MethodsResults <- BestMethod(RepeatedSampleImputations = RepeatedSampleImputations)
#################################### Libraries ########################################################################
library( abind )
#################################### Functions ########################################################################
# Function to rank matrices
rank_matrices <- function( rank_matrix, inverted = FALSE ) {
Mx <- lapply( rank_matrix, function( y ) apply( y, 2, function( x ) rank( ifelse( inverted, -x, x ), na.last = !inverted ) ) )
return( Mx )
}
# Function to calculate random rank scores
calculate_random_rank_scores <- function( rank_matrix, total_perm = 200 ) {
rank_matrix_perm <- rep( rank_matrix, round( total_perm / length( rank_matrix ) ) )
rank_matrix_perm <- lapply( seq_along( rank_matrix_perm ), function( i ) {
set.seed( i )
rank_matrix_perm1 <- data.frame( apply( rank_matrix_perm[[i]], 2, function( x ) sample( x ) ) )
rownames( rank_matrix_perm1 ) <- rownames( rank_matrix_perm[[i]] )
return( rank_matrix_perm1 )
} )
return( rank_matrix_perm )
}
# Function to z-transform the ABC values
rename_df_columns_in_nested_list <- function( df_list ) {
lapply( seq_along( df_list ), function( i ) {
y <- df_list[[i]]
colnames( y ) <- gsub( 'RMSE_', 'MeanRank_', colnames( y ) )
return( y )
} )
}
# Function to z-transform the ABC values
calculate_z_abc_values <- function( data, mean_ranks ) {
n_var <- ncol( data[[1]] )
n_methods <- nrow( data[[1]] )
n_tests <- length( data )
d <- n_var * n_tests
M <- n_methods
m <- ( M + 1 ) / 2
s <- ( 1 / sqrt( 12 ) ) * ( M / sqrt( d ) )
z_mean_ranks_per_alg <- ( mean_ranks - m ) / s
z_mean_ranks_per_alg[z_mean_ranks_per_alg > 0] <- 0
abc_value <- z_mean_ranks_per_alg^2
return( abc_value )
}
# Function to calculate combined metrics
calculate_combined_metrics <- function( rmse_matrix, mem_matrix, rbias_matrix ) {
R_rmse_matrix <- rank_matrices( rmse_matrix )
R_mem_matrix <- rank_matrices( mem_matrix )
R_rbias_matrix <- rank_matrices( rbias_matrix )
rank_errors_missings <- mapply( function( r1, r2, r3 ) {
( r1 + r2 + r3 ) / 3
}, R_rmse_matrix, R_mem_matrix, R_rbias_matrix, SIMPLIFY = FALSE )
rank_errors_missings <- rename_df_columns_in_nested_list( df_list = rank_errors_missings )
ranksums_errors_missings <- lapply( rank_errors_missings, function( x ) apply( x, 1, mean ) )
a <- do.call( abind::abind, c( rank_errors_missings, list( along = 3 ) ) )
grand_mean_rank_errors_missings <- apply( a, 1:2, median )
MajorityVoteRanksErrorsMissings <- lapply( ranksumsErrorsMissings, function( x ) names( which.min( x ) ) )
PerDatasetRanksums_Missings <- Reduce( "+", ranksumsErrorsMissings ) / length( ranksumsErrorsMissings )
BestPerDatasetRanksums_Missings <- which.min( PerDatasetRanksums_Missings )
zABCvalues <- calculateZABCvalues( data = RRMSEMX, meanRanks = PerDatasetRanksums_Missings )
ABCRanksums <-
ABCanalysis( zABCvalues )
BestRanksumsGrandMean_Missings_ABC_A <-
names( PerDatasetRanksums_Missings )[ABCRanksums$Aind]
return( list(
rank_errors_missings = rank_errors_missings,
ranksums_errors_missings = ranksums_errors_missings,
MajorityVoteRanksErrorsMissings = MajorityVoteRanksErrorsMissings,
grand_mean_rank_errors_missings = grand_mean_rank_errors_missings,
PerDatasetRanksums_Missings = PerDatasetRanksums_Missings,
BestPerDatasetRanksums_Missings = BestPerDatasetRanksums_Missings,
zABCvalues = zABCvalues,
ABCRanksums = ABCRanksums,
BestRanksumsGrandMean_Missings_ABC_A = BestRanksumsGrandMean_Missings_ABC_A,
RRMSEMX = RRMSEMX,
RMEMx = RMEMx,
RrBiasMx = RrBiasMx
) )
}
metrics_list <- lapply( RepeatedSampleImputations, function( x ) {
list(
RMSE = x[["ImputationRMSEInsertedMissings"]],
ME = x[["ImputationMEInsertedMissings"]],
rBias = x[["ImputationrBiasInsertedMissings"]]
)
} )
# Calculate combined metrics
CombinedMetricsInsertedMissings <- calculate_combined_metrics(
RMSEMX = lapply( metrics_list, function( x ) x$RMSE ),
MEMx = lapply( metrics_list, function( x ) x$ME ),
rBiasMx = lapply( metrics_list, function( x ) x$rBias )
)
CombinedMetricsInsertedMissings <- calculate_combined_metrics(
rmse_matrix = lapply( metrics_list, function( x ) x$RMSE ),
mem_matrix = lapply( metrics_list, function( x ) x$ME ),
rbias_matrix = lapply( metrics_list, function( x ) x$rBias )
)
metrics_list
rmse_matrix = lapply( metrics_list, function( x ) x$RMSE )
rmse_matrix
mem_matrix = lapply( metrics_list, function( x ) x$ME
mem_matrix = lapply( metrics_list, function( x ) x$ME )
mem_matrix = lapply( metrics_list, function( x ) x$ME )
rbias_matrix = lapply( metrics_list, function( x ) x$rBias )
rbias_matrix
R_rmse_matrix <- rank_matrices( rmse_matrix )
R_mem_matrix <- rank_matrices( mem_matrix )
R_rbias_matrix <- rank_matrices( rbias_matrix )
rank_errors_missings <- mapply( function( r1, r2, r3 ) {
( r1 + r2 + r3 ) / 3
}, R_rmse_matrix, R_mem_matrix, R_rbias_matrix, SIMPLIFY = FALSE )
rank_errors_missings <- rename_df_columns_in_nested_list( df_list = rank_errors_missings )
R_rmse_matrix
rank_errors_missings <- mapply( function( r1, r2, r3 ) {
( r1 + r2 + r3 ) / 3
}, R_rmse_matrix, R_mem_matrix, R_rbias_matrix, SIMPLIFY = FALSE )
rank_errors_missings
R_rmse_matrix
R_mem_matrix
R_rbias_matrix
RMSEinsertedMissings <- lapply( RepeatedSampleImputations, function( x ) {
x[[ActualDataset]][["ImputationRMSEInsertedMissings"]]
} )
RMSEinsertedMissings <- lapply( RepeatedSampleImputations, function( x ) {
x[["ImputationRMSEInsertedMissings"]]
} )
MEinsertedMissings <- lapply( RepeatedSampleImputations, function( x ) {
x[["ImputationMEInsertedMissings"]]
} )
CorrinsertedMissings <- lapply( RepeatedSampleImputations, function( x ) {
x[["ImputationCorrelationInsertedMissings"]]
} )
RMSEMX = RMSEinsertedMissings
RMSEinsertedMissings
rmse_matrix
mem_matrix
rbias_matrix
rank_matrices
R_rmse_matrix
RMSEMX = RMSEinsertedMissings
rankMEs( RMSEMX )
# Function to rank matrices
rankMEs <-
function( rankMx, inverted = FALSE ) {
if ( !inverted ) {
Mx <- lapply( rankMx, function( y ) apply( y, 2, function( x ) rank( x, na.last = TRUE ) ) )
} else {
Mx <- lapply( rankMx, function( y ) apply( y, 2, function( x ) rank( -x, na.last = FALSE ) ) )
}
return( Mx )
}
RRMSEMX <- rankMEs( RMSEMX )
RRMSEMX
RRMSEMX <- rankMEs( RMSEMX )
RMEMx <- rankMEs( MEMx )
source( paste0( pfad_o, pfad_r, "findBestImputation.R" ) )
source( paste0( pfad_o, pfad_r, "findBestImputation.R" ) )
MethodsResults <- BestMethod(RepeatedSampleImputations = RepeatedSampleImputations)
MethodsResults <- BestMethod(RepeatedSampleImputations = RepeatedSampleImputations)
q
d
MethodsResults <- BestMethod(RepeatedSampleImputations = RepeatedSampleImputations)
source( paste0( pfad_o, pfad_r, "findBestImputation.R" ) )
source( paste0( pfad_o, pfad_r, "findBestImputation.R" ) )
source( paste0( pfad_o, pfad_r, "findBestImputation.R" ) )
MethodsResults <- BestMethod(RepeatedSampleImputations = RepeatedSampleImputations)
#################################### Libraries ########################################################################
library( abind )
#################################### Functions ########################################################################
# Function to rank matrices
rankMEs <-
function( rankMx ) {
Mx <- lapply( rankMx, function( y ) apply( y, 2, function( x ) rank( x, na.last = TRUE ) ) )
return( Mx )
}
# Function to calculate random rank scores
calculateRandomRankScores <-
function( rankMx, totalPerm = 200 ) {
rankMxPerm <- rep( rankMx, round( totalPerm / length( rankMx ) ) )
rankMxPerm2 <- lapply( seq_along( rankMxPerm ), function( i ) {
set.seed( i )
rankMxPerm1 <- data.frame( apply( rankMxPerm[[i]], 2, function( x ) sample( x ) ) )
rownames( rankMxPerm1 ) <- rownames( rankMxPerm[[i]] )
return( rankMxPerm1 )
} )
return( rankMxPerm2 )
}
# Function to z-transform the ABC values
renameDfcolumnsInNestedList <- function( df ) {
lapply( seq_along( df ), function( i ) {
y <- df[[i]]
colnames( y ) <- gsub( 'RMSE_', 'MeanRank_', colnames( y ) )
return( y )
} )
}
# Function to z-transform the ABC values
calculateZABCvalues <- function( data, meanRanks ) {
nVar <- ncol( data[[1]] )
nMethods <- nrow( data[[1]] )
nTests <- length( data )
d <- nVar * nTests
M <- nMethods
m <- ( M + 1 ) / 2
s <- (1 / sqrt(12)) * ( M / sqrt(d) )
ZmeanRanksPerAlg <- ( meanRanks - m ) / s
ZmeanRanksPerAlg[ZmeanRanksPerAlg > 0] <- 0
ABCvalue <- ZmeanRanksPerAlg^2
return( ABCvalue )
}
# Function to calculate combined metrics
calculateCombinedMetrics <-
function( RMSEMX, MEMx, rBiasMx, RSMEWeight = 1, MEWeight = 1, CorrelationWeight = 1 ) {
RRMSEMX <- rankMEs( RMSEMX )
RMEMx <- rankMEs( MEMx )
RrBiasMx <- rankMEs( rBiasMx )
rankErrorsMissings <- mapply( function( r1, r2, r3 ) { ( r1 + r2 + r3 ) / 3 } , RRMSEMX,  RMEMx,  RrBiasMx, SIMPLIFY = FALSE )
rankErrorsMissings <- renameDfcolumnsInNestedList( df = rankErrorsMissings )
ranksumsErrorsMissings <- lapply( rankErrorsMissings, function( x ) apply( x, 1, mean ) )
a <- do.call( abind::abind, c( rankErrorsMissings, list( along = 3 ) ) )
grandMeanrankErrorsMissings <- apply( a, 1:2, median )
MajorityVoteRanksErrorsMissings <- lapply( ranksumsErrorsMissings, function( x ) names( which.min( x ) ) )
PerDatasetRanksums_Missings <- Reduce( "+", ranksumsErrorsMissings ) / length( ranksumsErrorsMissings )
BestPerDatasetRanksums_Missings <- which.min( PerDatasetRanksums_Missings )
BestPerVariableRanksums_Missings <-
apply( grandMeanrankErrorsMissings, 2, function( y ) rownames( as.data.frame( grandMeanrankErrorsMissings ) )[which.min( y )] )
zABCvalues <- calculateZABCvalues( data = RRMSEMX, meanRanks = PerDatasetRanksums_Missings )
ABCRanksums <-
ABCanalysis( zABCvalues )
BestRanksumsGrandMean_Missings_ABC_A <-
names( PerDatasetRanksums_Missings )[ABCRanksums$Aind]
return( list(
rankErrorsMissings = rankErrorsMissings,
ranksumsErrorsMissings = ranksumsErrorsMissings,
MajorityVoteRanksErrorsMissings = MajorityVoteRanksErrorsMissings,
grandMeanrankErrorsMissings = grandMeanrankErrorsMissings,
PerDatasetRanksums_Missings = PerDatasetRanksums_Missings,
BestPerDatasetRanksums_Missings = BestPerDatasetRanksums_Missings,
BestPerVariableRanksums_Missings = BestPerVariableRanksums_Missings,
zABCvalues = zABCvalues,
ABCRanksums = ABCRanksums,
BestRanksumsGrandMean_Missings_ABC_A = BestRanksumsGrandMean_Missings_ABC_A,
RRMSEMX = RRMSEMX,
RMEMx = RMEMx,
RrBiasMx = RrBiasMx
) )
}
RMSEinsertedMissings <- lapply( RepeatedSampleImputations, function( x ) {
x[["ImputationRMSEInsertedMissings"]]
} )
MEinsertedMissings <- lapply( RepeatedSampleImputations, function( x ) {
x[["ImputationMEInsertedMissings"]]
} )
CorrinsertedMissings <- lapply( RepeatedSampleImputations, function( x ) {
x[["ImputationCorrelationInsertedMissings"]]
} )
RMSEinsertedMissings
MEinsertedMissings
CorrinsertedMissings
RMSEinsertedMissings <- lapply( RepeatedSampleImputations, function( x ) {
x[["ImputationRMSEInsertedMissings"]]
} )
MEinsertedMissings <- lapply( RepeatedSampleImputations, function( x ) {
x[["ImputationMEInsertedMissings"]]
} )
rBiasinsertedMissings <- lapply( RepeatedSampleImputations, function( x ) {
x[["ImputationrBiasInsertedMissings"]]
} )
rBiasinsertedMissings
CombinedMetricsInsertedMissings <-
calculateCombinedMetrics( RMSEMX = RMSEinsertedMissings, MEMx = MEinsertedMissings, rBiasMx = rBiasinsertedMissings )
CombinedMetricsInsertedMissings
source( paste0( pfad_o, pfad_r, "findBestImputation.R" ) )
MethodsResults <- BestMethod(RepeatedSampleImputations = RepeatedSampleImputations)
print( "BestMethodPerDataset" )
BestMethodPerDataset <- names(MethodsResults$BestPerDatasetRanksums_insertedMissings)
print( BestMethodPerDataset )
ImputedData <- retrieveAveragedImputedData(Data = Datasets$UniformRandom3VarIndependent$dfXmatrixInitialMissings,
RepeatedSampleImputations = RepeatedSampleImputations)
source( paste0( pfad_o, pfad_r, "retrieveImputedData.R" ) )
ImputedData <- retrieveAveragedImputedData(Data = Datasets$UniformRandom3VarIndependent$dfXmatrixInitialMissings,
RepeatedSampleImputations = RepeatedSampleImputations)
ImputedData
ABCres <- makeABCanaylsis( zABCvalues = MethodsResults$zABCvalues_insertedMissings,
zDelta =  Zdeltas$meanImputationZDeltaInsertedMissings)
FigABC <-
cowplot::plot_grid(
ABCres$ABCplot,
ABCres$ZDeltaPerVarPlot,
align = "v", axis = "lr",
labels = LETTERS[1:22],
nrow = 2, rel_heights = c( 2, 1 )
)
print(FigABC)
#################################### Paths ########################################################################
pfad_o <- "/home/joern/Aktuell/opImputation/"
pfad_u1 <- "09Originale/"
pfad_r <- "12RLibrary/opImputation/R/"
pfad_r2 <- "08AnalyseProgramme/R/"
#################################### Libraries ########################################################################
source( paste0( pfad_o, pfad_r, "createMissings.R" ) )
source( paste0( pfad_o, pfad_r, "imputeMissings.R" ) )
source( paste0( pfad_o, pfad_r, "eval_with_timeout.R" ) )
source( paste0( pfad_o, pfad_r, "makeAndMeasureRepeatedImputations.R" ) )
source( paste0( pfad_o, pfad_r, "calculateMetrics.R" ) )
source( paste0( pfad_o, pfad_r, "findBestImputation.R" ) )
source( paste0( pfad_o, pfad_r, "makeABCanaylsis.R" ) )
source( paste0( pfad_o, pfad_r, "retrieveZdeltas.R" ) )
source( paste0( pfad_o, pfad_r, "retrieveImputedData.R" ) )
nProc <- max( round( ( parallel::detectCores( ) ) / 10 ), 4 )
# nProc <- 5
################## Switches #######################################
seed <- 100
nIter <- 20
list.of.seeds <- 1:nIter + seed - 1
PercentMissingInitial <- 10
PercentMissing <- 10
probMissing <- PercentMissing / 100
################## Functions #######################################
################## Create data set #######################################
DatasetNames <- c( "UniformRandom3VarDependent",
"UniformRandom3VarIndependent" )
source( paste0( pfad_o, pfad_r2, "create_prepaire_Datasets.R" ) )
################## Imputation methods #######################################
ImputationMethods <- c( "plus", "rf2", "median" )
# ImputationMethods <- all_imputation_methods
################## Make missings in each variable #######################################
Datasets <-
pbmcapply::pbmclapply( DatasetNames, function( ActualDataset ) {
dfXmatrix <- DatasetsInitial[[ActualDataset]]
dfXmatrixInitialMissings_WhichAnddata <-
createMissings( x = dfXmatrix, Prob = PercentMissingInitial / 100, seed = seed^2, mnarity = 0, lowOnly = F, mnarshape = 1 )
dfXmatrixInitialMissings <- dfXmatrixInitialMissings_WhichAnddata$missData
dfXmatrixInitialMissings_Which <- dfXmatrixInitialMissings_WhichAnddata$toDelete
return( list(
dfXmatrix = dfXmatrix,
dfXmatrixInitialMissings = dfXmatrixInitialMissings,
dfXmatrixInitialMissings_Which = dfXmatrixInitialMissings_Which
) )
}, mc.cores = nProc )
names( Datasets ) <- DatasetNames
################## Impute data sets #######################################
RepeatedSampleImputations <-
makeAndMeasureRepeatedImputations( Data = Datasets$
UniformRandom3VarIndependent$
dfXmatrixInitialMissings,
seeds = list.of.seeds,
probMissing = probMissing )
##################  Look at  bad imputations #######################################
Zdeltas <- retrieveZdeltas( RepeatedSampleImputations = RepeatedSampleImputations )
pZdeltasPlotAvgerage <- createBarplotMeanZDeltas( rowmeanImputationZDeltaInsertedMissings = Zdeltas$rowmeanImputationZDeltaInsertedMissings,
nonsense_imputation_methods = nonsense_imputation_methods,
scalar_imputation_methods = scalar_imputation_methods )
pZdeltasPDEraw <- createPDERawZDeltas( multivarZDeltas = Zdeltas$ImputationZDeltaInsertedMissingsMultivarV,
univarZDeltas = Zdeltas$ImputationZDeltaInsertedMissingsUnivarV,
nonsenseZDeltas = Zdeltas$ImputationZDeltaInsertedMissingsNonsenseV, AddSkewnessGM = TRUE )
FigZdelta <-
cowplot::plot_grid(
pZdeltasPlotAvgerage,
pZdeltasPDEraw,
align = "v", axis = "lr",
labels = LETTERS[1:22],
nrow = 2, rel_heights = c( 1, 1 )
)
print( FigZdelta )
##################  Find best imputation #######################################
MethodsResults <- BestMethod( RepeatedSampleImputations = RepeatedSampleImputations )
print( "BestMethodPerDataset" )
BestMethodPerDataset <- names( MethodsResults$BestPerDatasetRanksums_insertedMissings )
print( BestMethodPerDataset )
##################  Retrieve imputed data #######################################
ImputedData <- retrieveAveragedImputedData( Data = Datasets$
UniformRandom3VarIndependent$
dfXmatrixInitialMissings,
RepeatedSampleImputations = RepeatedSampleImputations )
##################  Create ABC plots #######################################
ABCres <- makeABCanaylsis( zABCvalues = MethodsResults$zABCvalues_insertedMissings,
zDelta = Zdeltas$meanImputationZDeltaInsertedMissings )
FigABC <-
cowplot::plot_grid(
ABCres$ABCplot,
ABCres$ZDeltaPerVarPlot,
align = "v", axis = "lr",
labels = LETTERS[1:22],
nrow = 2, rel_heights = c( 2, 1 )
)
print( FigABC )
DatasetNames <- c( "CodeinLogMetabolitesUrine",
"LipidsPsychiatricPat",
"QSTpainEJPtransf")
source( paste0( pfad_o, pfad_r2, "create_prepaire_Datasets.R" ) )
lapply( DatasetNames, function( ActualDataset ) {
dfXmatrix <- DatasetsInitial[[ActualDataset]]
save(dfXmatrix, file = paste0(ActualDataset, ".rda"))
}
)
DatasetsInitial
ActualDataset
source( paste0( pfad_o, pfad_r2, "create_prepaire_Datasets.R" ) )
lapply( DatasetNames, function( ActualDataset ) {
dfXmatrix <- DatasetsInitial[[ActualDataset]]
save(dfXmatrix, file = paste0(ActualDataset, ".rda"))
}
)
DatasetsInitial
source( paste0( pfad_o, pfad_r, "create_prepaire_Datasets.R" ) )
lapply( DatasetNames, function( ActualDataset ) {
dfXmatrix <- DatasetsInitial[[ActualDataset]]
save(dfXmatrix, file = paste0(ActualDataset, ".rda"))
}
)
dfXmatrix
DatasetsInitial
source( paste0( pfad_o, pfad_r, "create_prepaire_Datasets.R" ) )
lapply( DatasetNames, function( ActualDataset ) {
dfXmatrix <- DatasetsInitial[[ActualDataset]]
save(dfXmatrix, file = paste0(ActualDataset, ".rda"))
}
)
DatasetsInitial
source( paste0( pfad_o, pfad_r, "create_prepaire_Datasets.R" ) )
lapply( DatasetNames, function( ActualDataset ) {
dfXmatrix <- DatasetsInitial[[ActualDataset]]
save(dfXmatrix, file = paste0(ActualDataset, ".rda"))
}
)
DatasetsInitial
source( paste0( pfad_o, pfad_r, "create_prepaire_Datasets.R" ) )
lapply( DatasetNames, function( ActualDataset ) {
dfXmatrix <- DatasetsInitial[[ActualDataset]]
save(dfXmatrix, file = paste0(ActualDataset, ".rda"))
}
)
DatasetsInitial
DatasetNames <- c( "CodeinLogMetabolitesUrine",
"LipidsPsychiatricPat",
"QSTpainEJPtransf")
source( paste0( pfad_o, pfad_r, "create_prepaire_Datasets.R" ) )
lapply( DatasetNames, function( ActualDataset ) {
dfXmatrix <- DatasetsInitial[[ActualDataset]]
save(dfXmatrix, file = paste0(ActualDataset, ".rda"))
}
)
library( pbmcapply )
