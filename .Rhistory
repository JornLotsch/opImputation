return( combined_p_value )
}
# Function to find best method per category
retrieve_z_deltas_for_best_method_per_category <- function( zDeltas,
BestMethodPerDataset, BestUnivariateMethodPerDataset,
BestMultivariateMethodPerDataset, BestPoisonedMethodPerDataset ) {
multivarzDeltas <- unlist( lapply( zDeltas$ImputationzDeltaInsertedMissings, function( x )
x[gsub( " imputed|Imp", "", rownames( x ) ) %in% BestMultivariateMethodPerDataset,] ) )
univarzDeltas <- unlist( lapply( zDeltas$ImputationzDeltaInsertedMissings, function( x )
x[gsub( " imputed|Imp", "", rownames( x ) ) %in% BestUnivariateMethodPerDataset,] ) )
if ( BestMethodPerDataset %in% poisoned_imputation_methods ) {
poisonedzDeltas <- unlist( lapply( zDeltas$ImputationzDeltaInsertedMissings, function( x )
x[gsub( " imputed|Imp", "", rownames( x ) ) %in% BestPoisonedMethodPerDataset,] ) )
} else {
poisonedzDeltas <- NULL
}
return( list( multivarzDeltas = multivarzDeltas,
univarzDeltas = univarzDeltas,
poisonedzDeltas = poisonedzDeltas ) )
}
# Function to create a PDE plot of zDelta values for best methods
create_d_deltas_multivar_univar_PDE_plot <- function( zDeltas,
BestMethodPerDataset, BestUnivariateMethodPerDataset,
BestMultivariateMethodPerDataset, BestPoisonedMethodPerDataset ) {
# Retrieve zDeltas for best method per per category
BestzDeltas <- retrieve_z_deltas_for_best_method_per_category( zDeltas,
BestMethodPerDataset, BestUnivariateMethodPerDataset,
BestMultivariateMethodPerDataset, BestPoisonedMethodPerDataset )
multivarzDeltas <- BestzDeltas$multivarzDeltas
univarzDeltas <- BestzDeltas$univarzDeltas
poisonedzDeltas <- BestzDeltas$poisonedzDeltas
# Create PDE plot
dfParetoAll <- generate_PDE_plot_df( multivarzDeltas = multivarzDeltas,
univarzDeltas = univarzDeltas,
poisonedzDeltas = poisonedzDeltas,
calibratingzDeltas = NULL
)
PDERawzDeltasBest <- create_z_delta_PDE_plot( dfParetoAll = dfParetoAll )
PDERawzDeltasBest <- PDERawzDeltasBest +
labs( title = "PDE of raw zDelta (best uni/multivariate)" )
# Do stats multivariate versus univariate imputation errors
df.stat.deltas <- rbind.data.frame(
cbind.data.frame( y = 1, x = univarzDeltas ),
cbind.data.frame( y = 2, x = multivarzDeltas )
)
stat.deltas.W <- suppressWarnings( wilcox.test( df.stat.deltas$x ~ df.stat.deltas$y )$p.value )
stat.deltas.CDF <- suppressWarnings( twosamples::dts_test( univarzDeltas, multivarzDeltas )["P-Value"] )
stat.deltas <- suppressWarnings( fisher_method( p_values = c( stat.deltas.W, stat.deltas.CDF ) ) )
# Creating a data frame for statistical tests
dfStats <- data.frame(
Test = c( "Wilcoxon test", "DTS test", "Combination of tests" ),
pValue = c( stat.deltas.W, stat.deltas.CDF, stat.deltas ),
x = 0.5 * max( dfParetoAll$x ),
y = 1
)
dfStats$label <- paste0( dfStats$Test, ": ", formatC( dfStats$pValue, format = "e", digits = 4 ) )
if ( BestMethodPerDataset %in% poisoned_imputation_methods ) {
dfStats <- rbind.data.frame(
dfStats,
data.frame( Test = NA, pValue = NA, x = 0.5 * max( dfParetoAll$x ), y = NA,
label = "A poisoned method is best!" )
)
PDERawzDeltasBest <- PDERawzDeltasBest +
geom_line( data = dfParetoAll[dfParetoAll$Category %in% c( "Calibrating", "Poisoned" ),],
aes( x = x,
y = PDE / max( dfParetoAll$PDE[dfParetoAll$Category %in% c( "Calibrating", "Poisoned" )] ) *
max( dfParetoAll$PDE[dfParetoAll$Category %in% c( "Multivariate", "Univariate" )] ), color = Category ) ) +
scale_y_continuous(
name = "PDE (univariate, multivariate)",
sec.axis = sec_axis( trans = ~. * max( dfParetoAll$PDE[dfParetoAll$Category %in% c( "Calibrating", "Poisoned" )] ) /
max( dfParetoAll$PDE[dfParetoAll$Category %in% c( "Multivariate", "Univariate" )] ), name = "PDE (poisoned / calibrating)" )
)
}
# Finalize plot labels
dfStats$y <- seq( from = 0.95, by = -0.05, length.out = nrow( dfStats ) ) *
max( dfParetoAll$PDE[dfParetoAll$Category %in% c( "Multivariate", "Univariate" )] )
PDERawzDeltasBest <- PDERawzDeltasBest +
geom_text( data = dfStats, aes( label = label, x = x, y = y ), inherit.aes = FALSE )
return( PDERawzDeltasBest )
}
# Function to create a QQ plot of zDelta values for best methods
create_d_deltas_multivar_univar_QQ_plot <- function( zDeltas,
BestMethodPerDataset,
BestUnivariateMethodPerDataset,
BestMultivariateMethodPerDataset,
BestPoisonedMethodPerDataset ) {
# Retrieve zDeltas for best method per per category
BestzDeltas <- retrieve_z_deltas_for_best_method_per_category( zDeltas,
BestMethodPerDataset,
BestUnivariateMethodPerDataset,
BestMultivariateMethodPerDataset,
BestPoisonedMethodPerDataset )
multivarzDeltas <- BestzDeltas$multivarzDeltas
univarzDeltas <- BestzDeltas$univarzDeltas
# QQ plots
quantiles <- seq( 0, 1, 0.01 )
df_quantiles <- cbind.data.frame(
BestUnivariate = quantile( univarzDeltas, quantiles, na.rm = TRUE ),
Multivariate = quantile( multivarzDeltas, quantiles, na.rm = TRUE )
)
p_qq <-
ggplot( data = df_quantiles, aes( x = BestUnivariate, y = Multivariate ) ) +
geom_point( color = "dodgerblue", alpha = 0.6 ) +
geom_abline( aes( slope = 1, intercept = 0 ), linetype = 2, color = "salmon" ) +
theme_light( ) +
theme( legend.position = c( 0.1, 0.9 ),
strip.background = element_rect( fill = "cornsilk" ),
strip.text = element_text( colour = "black" ) ) +
labs( title = "QQ plot raw zDelta (best methods)" ) +
xlim( 0, 1 ) +
ylim( 0, 1 )
return( p_qq )
}
# Compare zDelta values between multivariate and univariate methods
if ( sum( ImputationMethods %in% univariate_imputation_methods ) > 0 &
sum( ImputationMethods %in% multivariate_imputation_methods ) > 0 ) {
pzDeltasMultivarUnivarPDE <-
create_d_deltas_multivar_univar_PDE_plot( zDeltas = zDeltas,
BestMethodPerDataset = BestMethodPerDataset,
BestUnivariateMethodPerDataset = BestUnivariateMethodPerDataset,
BestMultivariateMethodPerDataset = BestMultivariateMethodPerDataset,
BestPoisonedMethodPerDataset = BestPoisonedMethodPerDataset )
pzDeltasMultivarUnivarQQ <-
create_d_deltas_multivar_univar_QQ_plot( zDeltas = zDeltas,
BestMethodPerDataset = BestMethodPerDataset,
BestUnivariateMethodPerDataset = BestUnivariateMethodPerDataset,
BestMultivariateMethodPerDataset = BestMultivariateMethodPerDataset,
BestPoisonedMethodPerDataset = BestPoisonedMethodPerDataset )
Fig_zDeltaDistributions_bestMethods <-
cowplot::plot_grid(
pzDeltasMultivarUnivarPDE,
pzDeltasMultivarUnivarQQ,
labels = LETTERS[1:2],
nrow = 1,
align = "h", axis = "tb"
)
}
Fig_zDeltaDistributions_bestMethods
opImputationImpute <- function( Data,
ImputationMethod,
ImputationRepetitions = 20, seed = 100, nIter = 100,
nProc = getOption( "mc.cores", 2L ) ) {
list.of.seeds <- 1:nIter + seed - 1
iImputedData <- pbmcapply::pbmclapply( list.of.seeds, function( seed ) {
imputeMissings( x = Data, method = ImputationMethod, ImputationRepetitions = ImputationRepetitions, seed = seed, x_orig = NULL )
}, mc.cores = nProc )
ImputedData <- tryCatch(median_imputations(iImputedData), error = function(e) NULL)
return(ImputedData)
}
Data
ImputationMethod
ImputationMethod="pmm"
ImputationRepetitions
x_orig
x_orig = NULL
imputeMissings( x = Data, method = ImputationMethod, ImputationRepetitions = ImputationRepetitions, seed = seed, x_orig = NULL )
list.of.seeds
list.of.seeds <- 1:nIter + seed - 1
iImputedData <- pbmcapply::pbmclapply( list.of.seeds, function( seed ) {
imputeMissings( x = Data, method = ImputationMethod, ImputationRepetitions = ImputationRepetitions, seed = seed, x_orig = NULL )
}, mc.cores = nProc )
iImputedData
ImputedData <- tryCatch(median_imputations(iImputedData), error = function(e) NULL)
ImputedData
median_imputations <- function( x ) {
all.matrix <- array( unlist( x ), dim = c( dim( x[[1]] )[1], dim( x[[1]] )[2], length( x ) ) )
avg <- data.frame( apply( all.matrix, c( 1, 2 ), function( x ) median( x, na.rm = TRUE ) ) )
names( avg ) <- names( x[[1]] )
rownames( avg ) <- rownames( x[[1]] )
return( avg )
}
RepeatedSampleImputations
# Function to identity the optimal imputation method from the comparative evaluations
# Function to rank matrices
rank_MEs <-
function( rankMx ) {
Mx <- lapply( rankMx, function( y ) apply( y, 2, function( x ) rank( x, na.last = TRUE ) ) )
return( Mx )
}
# Function to z-transform the ABC values
rename_df_columns_in_nested_list <- function( df ) {
lapply( seq_along( df ), function( i ) {
y <- df[[i]]
colnames( y ) <- gsub( 'RMSE_', 'MeanRank_', colnames( y ) )
return( y )
} )
}
# Function to z-transform the ABC values
calculate_zABC_values <- function( meanRanks, nVar, nMethods, nIter ) {
d <- nVar * nIter
M <- nMethods
m <- ( M + 1 ) / 2
s <- ( 1 / sqrt( 12 ) ) * ( M / sqrt( d ) )
ZmeanRanksPerAlg <- ( meanRanks - m ) / s
ZmeanRanksPerAlg[ZmeanRanksPerAlg > 0] <- 0
ABCvalue <- ZmeanRanksPerAlg^2
return( ABCvalue )
}
# Function to calculate combined metrics
calculate_combined_metrics <-
function( RMSEMX, MEMx, rBiasMx, nIter ) {
RRMSEMX <- rank_MEs( RMSEMX )
RMEMx <- rank_MEs( MEMx )
RrBiasMx <- rank_MEs( rBiasMx )
rankErrorsMissings <- mapply( function( r1, r2, r3 ) { ( r1 + r2 + r3 ) / 3 }, RRMSEMX, RMEMx, RrBiasMx, SIMPLIFY = FALSE )
rankErrorsMissings <- rename_df_columns_in_nested_list( df = rankErrorsMissings )
ranksumsErrorsMissings <- lapply( rankErrorsMissings, function( x ) apply( x, 1, median ) )
grandMeanrankErrorsMissings <- median_imputations( rankErrorsMissings )
# grandMeanrankErrorsMissings <- Reduce( "+", rankErrorsMissings ) / length( rankErrorsMissings )
median_imputations_2d <- function( x ) {
all.matrix <- array( unlist( x ), dim = c( dim( x[[1]] )[1], dim( x[[1]] )[2], length( x ) ) )
avg <- data.frame( apply( all.matrix, c( 1, 2 ), function( x ) median( x, na.rm = TRUE ) ) )
return( avg )
}
all.matrix <- data.frame( array( unlist( ranksumsErrorsMissings ), dim = c( length( ranksumsErrorsMissings[[1]] ), length( ranksumsErrorsMissings ) ) ) )
rownames( all.matrix ) <- names( ranksumsErrorsMissings[[1]] )
PerDatasetRanksums_Missings <- apply( all.matrix, c( 1 ), function( x ) median( x, na.rm = TRUE ) )
BestPerDatasetRanksums_Missings <- names( which.min( PerDatasetRanksums_Missings ) )
BestUnivariatePerDatasetRanksums_Missings <- names( which.min( PerDatasetRanksums_Missings[gsub( " imputed", "",
names( PerDatasetRanksums_Missings ) ) %in% univariate_imputation_methods] ) )
BestMultivariatePerDatasetRanksums_Missings <- names( which.min( PerDatasetRanksums_Missings[gsub( " imputed", "",
names( PerDatasetRanksums_Missings ) ) %in% multivariate_imputation_methods] ) )
BestUniMultivariatePerDatasetRanksums_Missings <- names( which.min( PerDatasetRanksums_Missings[gsub( " imputed", "",
names( PerDatasetRanksums_Missings ) ) %in% c( univariate_imputation_methods, multivariate_imputation_methods )] ) )
BestPoisonedPerDatasetRanksums_Missings <- names( which.min( PerDatasetRanksums_Missings[gsub( " imputed", "",
names( PerDatasetRanksums_Missings ) ) %in% poisoned_imputation_methods] ) )
zABCvalues <- calculate_zABC_values( meanRanks = PerDatasetRanksums_Missings,
nVar = ncol( RMSEMX[[1]] ),
nMethods = length( PerDatasetRanksums_Missings ),
nIter = nIter )
ABCRanksums <-
ABCanalysis( as.vector( zABCvalues ) )
BestRanksumsGrandMean_Missings_ABC_A <-
names( PerDatasetRanksums_Missings )[ABCRanksums$Aind]
return( list(
rankErrorsMissings = rankErrorsMissings,
ranksumsErrorsMissings = ranksumsErrorsMissings,
grandMeanrankErrorsMissings = grandMeanrankErrorsMissings,
PerDatasetRanksums_Missings = PerDatasetRanksums_Missings,
BestPerDatasetRanksums_Missings = BestPerDatasetRanksums_Missings,
BestUnivariatePerDatasetRanksums_Missings = BestUnivariatePerDatasetRanksums_Missings,
BestMultivariatePerDatasetRanksums_Missings = BestMultivariatePerDatasetRanksums_Missings,
BestUniMultivariatePerDatasetRanksums_Missings = BestUniMultivariatePerDatasetRanksums_Missings,
BestPoisonedPerDatasetRanksums_Missings = BestPoisonedPerDatasetRanksums_Missings,
zABCvalues = zABCvalues,
ABCRanksums = ABCRanksums,
BestRanksumsGrandMean_Missings_ABC_A = BestRanksumsGrandMean_Missings_ABC_A,
RRMSEMX = RRMSEMX,
RMEMx = RMEMx,
RrBiasMx = RrBiasMx
) )
}
# Find best imputation
find_best_method <- function( RepeatedSampleImputations, pfctMtdsInABC, nIter ) {
# Inserted diagnostic missings
RMSEinsertedMissings <- lapply( RepeatedSampleImputations, function( x ) {
x[["ImputationRMSEInsertedMissings"]]
} )
MEinsertedMissings <- lapply( RepeatedSampleImputations, function( x ) {
x[["ImputationMEInsertedMissings"]]
} )
rBiasinsertedMissings <- lapply( RepeatedSampleImputations, function( x ) {
x[["ImputationrBiasInsertedMissings"]]
} )
if ( pfctMtdsInABC == FALSE ) {
RMSEinsertedMissings <- lapply( RMSEinsertedMissings, function( x ) x[!gsub( " imputed", "", rownames( x ) ) %in% calibrating_imputation_methods,] )
MEinsertedMissings <- lapply( MEinsertedMissings, function( x ) x[!gsub( " imputed", "", rownames( x ) ) %in% calibrating_imputation_methods,] )
rBiasinsertedMissings <- lapply( rBiasinsertedMissings, function( x ) x[!gsub( " imputed", "", rownames( x ) ) %in% calibrating_imputation_methods,] )
}
CombinedMetricsInsertedMissings <-
calculate_combined_metrics( RMSEMX = RMSEinsertedMissings,
MEMx = MEinsertedMissings,
rBiasMx = rBiasinsertedMissings,
nIter = nIter )
# Return results
return( list(
BestPerDatasetRanksums_insertedMissings = CombinedMetricsInsertedMissings[["BestPerDatasetRanksums_Missings"]],
BestUnivariatePerDatasetRanksums_insertedMissings = CombinedMetricsInsertedMissings[["BestUnivariatePerDatasetRanksums_Missings"]],
BestMultivariatePerDatasetRanksums_insertedMissings = CombinedMetricsInsertedMissings[["BestMultivariatePerDatasetRanksums_Missings"]],
BestUniMultivariatePerDatasetRanksums_insertedMissings = CombinedMetricsInsertedMissings[["BestUniMultivariatePerDatasetRanksums_Missings"]],
BestPoisonedPerDatasetRanksums_insertedMissings = CombinedMetricsInsertedMissings[["BestPoisonedPerDatasetRanksums_Missings"]],
BestPerDatasetRanksums_insertedMissings = CombinedMetricsInsertedMissings[["BestPerDatasetRanksums_Missings"]],
BestPerDatasetRanksums_insertedMissings = CombinedMetricsInsertedMissings[["BestPerDatasetRanksums_Missings"]],
BestRanksumsGrandMean_insertedMissings_ABC_A = CombinedMetricsInsertedMissings[["BestRanksumsGrandMean_Missings_ABC_A"]],
ranksumsErrorsInsertedMissings = CombinedMetricsInsertedMissings[["ranksumsErrorsMissings"]],
grandMeanrankErrorsInsertedMissings = CombinedMetricsInsertedMissings[["grandMeanrankErrorsMissings"]],
RMSEinsertedMissings = RMSEinsertedMissings,
MEinsertedMissings = MEinsertedMissings,
rBiasinsertedMissings = rBiasinsertedMissings,
ranksRMSEinsertedMissings = CombinedMetricsInsertedMissings[["RRMSEMX"]],
ranksMEinsertedMissings = CombinedMetricsInsertedMissings[["RMEMx"]],
ranksrBiasinsertedMissings = CombinedMetricsInsertedMissings[["RrBiasMx"]],
PerDatasetRanksums_insertedMissings = CombinedMetricsInsertedMissings[["PerDatasetRanksums_Missings"]],
zABCvalues_insertedMissings = CombinedMetricsInsertedMissings[["zABCvalues"]]
) )
}
RRMSEMX <- rank_MEs( RMSEMX )
# Inserted diagnostic missings
RMSEinsertedMissings <- lapply( RepeatedSampleImputations, function( x ) {
x[["ImputationRMSEInsertedMissings"]]
} )
MEinsertedMissings <- lapply( RepeatedSampleImputations, function( x ) {
x[["ImputationMEInsertedMissings"]]
} )
rBiasinsertedMissings <- lapply( RepeatedSampleImputations, function( x ) {
x[["ImputationrBiasInsertedMissings"]]
} )
if ( pfctMtdsInABC == FALSE ) {
RMSEinsertedMissings <- lapply( RMSEinsertedMissings, function( x ) x[!gsub( " imputed", "", rownames( x ) ) %in% calibrating_imputation_methods,] )
MEinsertedMissings <- lapply( MEinsertedMissings, function( x ) x[!gsub( " imputed", "", rownames( x ) ) %in% calibrating_imputation_methods,] )
rBiasinsertedMissings <- lapply( rBiasinsertedMissings, function( x ) x[!gsub( " imputed", "", rownames( x ) ) %in% calibrating_imputation_methods,] )
}
RMSEMX = RMSEinsertedMissings
MEMx = MEinsertedMissings
rBiasMx = rBiasinsertedMissings
RRMSEMX <- rank_MEs( RMSEMX )
RMEMx <- rank_MEs( MEMx )
RrBiasMx <- rank_MEs( rBiasMx )
rankErrorsMissings <- mapply( function( r1, r2, r3 ) { ( r1 + r2 + r3 ) / 3 }, RRMSEMX, RMEMx, RrBiasMx, SIMPLIFY = FALSE )
rankErrorsMissings <- rename_df_columns_in_nested_list( df = rankErrorsMissings )
ranksumsErrorsMissings <- lapply( rankErrorsMissings, function( x ) apply( x, 1, median ) )
median_imputations( rankErrorsMissings )
rankErrorsMissings
rankErrorsMissings[[1]]
names(rankErrorsMissings[[1]])
colnames(rankErrorsMissings[[1]])
median_imputations <- function( x ) {
all.matrix <- array( unlist( x ), dim = c( dim( x[[1]] )[1], dim( x[[1]] )[2], length( x ) ) )
avg <- data.frame( apply( all.matrix, c( 1, 2 ), function( x ) median( x, na.rm = TRUE ) ) )
names( avg ) <- colnames( x[[1]] )
rownames( avg ) <- rownames( x[[1]] )
return( avg )
}
rankErrorsMissings <- mapply( function( r1, r2, r3 ) { ( r1 + r2 + r3 ) / 3 }, RRMSEMX, RMEMx, RrBiasMx, SIMPLIFY = FALSE )
rankErrorsMissings <- rename_df_columns_in_nested_list( df = rankErrorsMissings )
ranksumsErrorsMissings <- lapply( rankErrorsMissings, function( x ) apply( x, 1, median ) )
grandMeanrankErrorsMissings <- median_imputations( rankErrorsMissings )
grandMeanrankErrorsMissings
# grandMeanrankErrorsMissings <- Reduce( "+", rankErrorsMissings ) / length( rankErrorsMissings )
median_imputations_2d <- function( x ) {
all.matrix <- array( unlist( x ), dim = c( dim( x[[1]] )[1], dim( x[[1]] )[2], length( x ) ) )
avg <- data.frame( apply( all.matrix, c( 1, 2 ), function( x ) median( x, na.rm = TRUE ) ) )
return( avg )
}
all.matrix <- data.frame( array( unlist( ranksumsErrorsMissings ), dim = c( length( ranksumsErrorsMissings[[1]] ), length( ranksumsErrorsMissings ) ) ) )
rownames( all.matrix ) <- names( ranksumsErrorsMissings[[1]] )
PerDatasetRanksums_Missings <- apply( all.matrix, c( 1 ), function( x ) median( x, na.rm = TRUE ) )
PerDatasetRanksums_Missings
all.matrix <- data.frame( array( unlist( ranksumsErrorsMissings ), dim = c( length( ranksumsErrorsMissings[[1]] ), length( ranksumsErrorsMissings ) ) ) )
rownames( all.matrix ) <- names( ranksumsErrorsMissings[[1]] )
PerDatasetRanksums_Missings <- apply( all.matrix, c( 1 ), function( x ) median( x, na.rm = TRUE ) )
BestPerDatasetRanksums_Missings <- names( which.min( PerDatasetRanksums_Missings ) )
BestUnivariatePerDatasetRanksums_Missings <- names( which.min( PerDatasetRanksums_Missings[gsub( " imputed", "",
names( PerDatasetRanksums_Missings ) ) %in% univariate_imputation_methods] ) )
BestMultivariatePerDatasetRanksums_Missings <- names( which.min( PerDatasetRanksums_Missings[gsub( " imputed", "",
names( PerDatasetRanksums_Missings ) ) %in% multivariate_imputation_methods] ) )
BestUniMultivariatePerDatasetRanksums_Missings <- names( which.min( PerDatasetRanksums_Missings[gsub( " imputed", "",
names( PerDatasetRanksums_Missings ) ) %in% c( univariate_imputation_methods, multivariate_imputation_methods )] ) )
BestPoisonedPerDatasetRanksums_Missings <- names( which.min( PerDatasetRanksums_Missings[gsub( " imputed", "",
names( PerDatasetRanksums_Missings ) ) %in% poisoned_imputation_methods] ) )
zABCvalues <- calculate_zABC_values( meanRanks = PerDatasetRanksums_Missings,
nVar = ncol( RMSEMX[[1]] ),
nMethods = length( PerDatasetRanksums_Missings ),
nIter = nIter )
ABCRanksums <-
ABCanalysis( as.vector( zABCvalues ) )
BestRanksumsGrandMean_Missings_ABC_A <-
names( PerDatasetRanksums_Missings )[ABCRanksums$Aind]
zABCvalues
# Function to identity the optimal imputation method from the comparative evaluations
# Function to rank matrices
rank_MEs <-
function( rankMx ) {
Mx <- lapply( rankMx, function( y ) apply( y, 2, function( x ) rank( x, na.last = TRUE ) ) )
return( Mx )
}
# Function to z-transform the ABC values
rename_df_columns_in_nested_list <- function( df ) {
lapply( seq_along( df ), function( i ) {
y <- df[[i]]
colnames( y ) <- gsub( 'RMSE_', 'MeanRank_', colnames( y ) )
return( y )
} )
}
# Function to z-transform the ABC values
calculate_zABC_values <- function( meanRanks, nVar, nMethods, nIter ) {
d <- nVar * nIter
M <- nMethods
m <- ( M + 1 ) / 2
s <- ( 1 / sqrt( 12 ) ) * ( M / sqrt( d ) )
ZmeanRanksPerAlg <- ( meanRanks - m ) / s
ZmeanRanksPerAlg[ZmeanRanksPerAlg > 0] <- 0
ABCvalue <- ZmeanRanksPerAlg^2
return( ABCvalue )
}
# Function to calculate combined metrics
calculate_combined_metrics <-
function( RMSEMX, MEMx, rBiasMx, nIter ) {
RRMSEMX <- rank_MEs( RMSEMX )
RMEMx <- rank_MEs( MEMx )
RrBiasMx <- rank_MEs( rBiasMx )
rankErrorsMissings <- mapply( function( r1, r2, r3 ) { ( r1 + r2 + r3 ) / 3 }, RRMSEMX, RMEMx, RrBiasMx, SIMPLIFY = FALSE )
rankErrorsMissings <- rename_df_columns_in_nested_list( df = rankErrorsMissings )
ranksumsErrorsMissings <- lapply( rankErrorsMissings, function( x ) apply( x, 1, median ) )
grandMeanrankErrorsMissings <- median_imputations( rankErrorsMissings )
# grandMeanrankErrorsMissings <- Reduce( "+", rankErrorsMissings ) / length( rankErrorsMissings )
median_imputations_2d <- function( x ) {
all.matrix <- array( unlist( x ), dim = c( dim( x[[1]] )[1], dim( x[[1]] )[2], length( x ) ) )
avg <- data.frame( apply( all.matrix, c( 1, 2 ), function( x ) median( x, na.rm = TRUE ) ) )
return( avg )
}
all.matrix <- data.frame( array( unlist( ranksumsErrorsMissings ), dim = c( length( ranksumsErrorsMissings[[1]] ), length( ranksumsErrorsMissings ) ) ) )
rownames( all.matrix ) <- names( ranksumsErrorsMissings[[1]] )
PerDatasetRanksums_Missings <- apply( all.matrix, c( 1 ), function( x ) median( x, na.rm = TRUE ) )
BestPerDatasetRanksums_Missings <- names( which.min( PerDatasetRanksums_Missings ) )
BestUnivariatePerDatasetRanksums_Missings <- names( which.min( PerDatasetRanksums_Missings[gsub( " imputed", "",
names( PerDatasetRanksums_Missings ) ) %in% univariate_imputation_methods] ) )
BestMultivariatePerDatasetRanksums_Missings <- names( which.min( PerDatasetRanksums_Missings[gsub( " imputed", "",
names( PerDatasetRanksums_Missings ) ) %in% multivariate_imputation_methods] ) )
BestUniMultivariatePerDatasetRanksums_Missings <- names( which.min( PerDatasetRanksums_Missings[gsub( " imputed", "",
names( PerDatasetRanksums_Missings ) ) %in% c( univariate_imputation_methods, multivariate_imputation_methods )] ) )
BestPoisonedPerDatasetRanksums_Missings <- names( which.min( PerDatasetRanksums_Missings[gsub( " imputed", "",
names( PerDatasetRanksums_Missings ) ) %in% poisoned_imputation_methods] ) )
zABCvalues <- calculate_zABC_values( meanRanks = PerDatasetRanksums_Missings,
nVar = ncol( RMSEMX[[1]] ),
nMethods = length( PerDatasetRanksums_Missings ),
nIter = nIter )
ABCRanksums <-
ABCanalysis( as.vector( zABCvalues ) )
BestRanksumsGrandMean_Missings_ABC_A <-
names( PerDatasetRanksums_Missings )[ABCRanksums$Aind]
return( list(
rankErrorsMissings = rankErrorsMissings,
ranksumsErrorsMissings = ranksumsErrorsMissings,
grandMeanrankErrorsMissings = grandMeanrankErrorsMissings,
PerDatasetRanksums_Missings = PerDatasetRanksums_Missings,
BestPerDatasetRanksums_Missings = BestPerDatasetRanksums_Missings,
BestUnivariatePerDatasetRanksums_Missings = BestUnivariatePerDatasetRanksums_Missings,
BestMultivariatePerDatasetRanksums_Missings = BestMultivariatePerDatasetRanksums_Missings,
BestUniMultivariatePerDatasetRanksums_Missings = BestUniMultivariatePerDatasetRanksums_Missings,
BestPoisonedPerDatasetRanksums_Missings = BestPoisonedPerDatasetRanksums_Missings,
zABCvalues = zABCvalues,
ABCRanksums = ABCRanksums,
BestRanksumsGrandMean_Missings_ABC_A = BestRanksumsGrandMean_Missings_ABC_A,
RRMSEMX = RRMSEMX,
RMEMx = RMEMx,
RrBiasMx = RrBiasMx
) )
}
# Find best imputation
find_best_method <- function( RepeatedSampleImputations, pfctMtdsInABC, nIter ) {
# Inserted diagnostic missings
RMSEinsertedMissings <- lapply( RepeatedSampleImputations, function( x ) {
x[["ImputationRMSEInsertedMissings"]]
} )
MEinsertedMissings <- lapply( RepeatedSampleImputations, function( x ) {
x[["ImputationMEInsertedMissings"]]
} )
rBiasinsertedMissings <- lapply( RepeatedSampleImputations, function( x ) {
x[["ImputationrBiasInsertedMissings"]]
} )
if ( pfctMtdsInABC == FALSE ) {
RMSEinsertedMissings <- lapply( RMSEinsertedMissings, function( x ) x[!gsub( " imputed", "", rownames( x ) ) %in% calibrating_imputation_methods,] )
MEinsertedMissings <- lapply( MEinsertedMissings, function( x ) x[!gsub( " imputed", "", rownames( x ) ) %in% calibrating_imputation_methods,] )
rBiasinsertedMissings <- lapply( rBiasinsertedMissings, function( x ) x[!gsub( " imputed", "", rownames( x ) ) %in% calibrating_imputation_methods,] )
}
CombinedMetricsInsertedMissings <-
calculate_combined_metrics( RMSEMX = RMSEinsertedMissings,
MEMx = MEinsertedMissings,
rBiasMx = rBiasinsertedMissings,
nIter = nIter )
# Return results
return( list(
BestPerDatasetRanksums_insertedMissings = CombinedMetricsInsertedMissings[["BestPerDatasetRanksums_Missings"]],
BestUnivariatePerDatasetRanksums_insertedMissings = CombinedMetricsInsertedMissings[["BestUnivariatePerDatasetRanksums_Missings"]],
BestMultivariatePerDatasetRanksums_insertedMissings = CombinedMetricsInsertedMissings[["BestMultivariatePerDatasetRanksums_Missings"]],
BestUniMultivariatePerDatasetRanksums_insertedMissings = CombinedMetricsInsertedMissings[["BestUniMultivariatePerDatasetRanksums_Missings"]],
BestPoisonedPerDatasetRanksums_insertedMissings = CombinedMetricsInsertedMissings[["BestPoisonedPerDatasetRanksums_Missings"]],
BestPerDatasetRanksums_insertedMissings = CombinedMetricsInsertedMissings[["BestPerDatasetRanksums_Missings"]],
BestPerDatasetRanksums_insertedMissings = CombinedMetricsInsertedMissings[["BestPerDatasetRanksums_Missings"]],
BestRanksumsGrandMean_insertedMissings_ABC_A = CombinedMetricsInsertedMissings[["BestRanksumsGrandMean_Missings_ABC_A"]],
ranksumsErrorsInsertedMissings = CombinedMetricsInsertedMissings[["ranksumsErrorsMissings"]],
grandMeanrankErrorsInsertedMissings = CombinedMetricsInsertedMissings[["grandMeanrankErrorsMissings"]],
RMSEinsertedMissings = RMSEinsertedMissings,
MEinsertedMissings = MEinsertedMissings,
rBiasinsertedMissings = rBiasinsertedMissings,
ranksRMSEinsertedMissings = CombinedMetricsInsertedMissings[["RRMSEMX"]],
ranksMEinsertedMissings = CombinedMetricsInsertedMissings[["RMEMx"]],
ranksrBiasinsertedMissings = CombinedMetricsInsertedMissings[["RrBiasMx"]],
PerDatasetRanksums_insertedMissings = CombinedMetricsInsertedMissings[["PerDatasetRanksums_Missings"]],
zABCvalues_insertedMissings = CombinedMetricsInsertedMissings[["zABCvalues"]]
) )
}
ranksumsErrorsMissings
grandMeanrankErrorsMissings <- median_imputations( rankErrorsMissings )
grandMeanrankErrorsMissings
grandMeanrankErrorsMissings <- Reduce( "+", rankErrorsMissings ) / length( rankErrorsMissings )
grandMeanrankErrorsMissings
rankErrorsMissings
rankErrorsMissings <- mapply( function( r1, r2, r3 ) { ( r1 + r2 + r3 ) / 3 }, RRMSEMX, RMEMx, RrBiasMx, SIMPLIFY = FALSE )
rankErrorsMissings
rename_df_columns_in_nested_list( df = rankErrorsMissings )
rankErrorsMissings <- mapply( function( r1, r2, r3 ) { ( r1 + r2 + r3 ) / 3 }, RRMSEMX, RMEMx, RrBiasMx, SIMPLIFY = FALSE )
rankErrorsMissings
tryCatch(median_imputations(iImputedData), error = function(e) NULL)
library(opImputation)
TestImputation <- opImputationAnalyze(Data = iris[,1:4],
ImputationMethods =  c("rf_missForest", "median", "plus" ) )
library(opImputation)
TestImputation <- opImputationAnalyze(Data = iris[,1:4],
ImputationMethods =  c("rf_missForest", "median", "plus" ) )
library(opImputation)
